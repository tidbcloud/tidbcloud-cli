// Code generated by mockery v2.38.0. DO NOT EDIT.

package mock

import (
	branch_service "tidbcloud-cli/pkg/tidbcloud/branch/client/branch_service"

	cluster "github.com/c4pt0r/go-tidbcloud-sdk-v1/client/cluster"

	connect_info_service "tidbcloud-cli/pkg/tidbcloud/connect_info/client/connect_info_service"

	import_service "tidbcloud-cli/pkg/tidbcloud/import/client/import_service"

	mock "github.com/stretchr/testify/mock"

	operations "tidbcloud-cli/pkg/tidbcloud/pingchat/client/operations"

	os "os"

	project "github.com/c4pt0r/go-tidbcloud-sdk-v1/client/project"
)

// TiDBCloudClient is an autogenerated mock type for the TiDBCloudClient type
type TiDBCloudClient struct {
	mock.Mock
}

// CancelImport provides a mock function with given fields: params, opts
func (_m *TiDBCloudClient) CancelImport(params *import_service.CancelImportParams, opts ...import_service.ClientOption) (*import_service.CancelImportOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelImport")
	}

	var r0 *import_service.CancelImportOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*import_service.CancelImportParams, ...import_service.ClientOption) (*import_service.CancelImportOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*import_service.CancelImportParams, ...import_service.ClientOption) *import_service.CancelImportOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*import_service.CancelImportOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*import_service.CancelImportParams, ...import_service.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Chat provides a mock function with given fields: params, opts
func (_m *TiDBCloudClient) Chat(params *operations.ChatParams, opts ...operations.ClientOption) (*operations.ChatOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Chat")
	}

	var r0 *operations.ChatOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.ChatParams, ...operations.ClientOption) (*operations.ChatOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.ChatParams, ...operations.ClientOption) *operations.ChatOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ChatOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.ChatParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBranch provides a mock function with given fields: params, opts
func (_m *TiDBCloudClient) CreateBranch(params *branch_service.CreateBranchParams, opts ...branch_service.ClientOption) (*branch_service.CreateBranchOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateBranch")
	}

	var r0 *branch_service.CreateBranchOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*branch_service.CreateBranchParams, ...branch_service.ClientOption) (*branch_service.CreateBranchOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*branch_service.CreateBranchParams, ...branch_service.ClientOption) *branch_service.CreateBranchOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*branch_service.CreateBranchOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*branch_service.CreateBranchParams, ...branch_service.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCluster provides a mock function with given fields: params, opts
func (_m *TiDBCloudClient) CreateCluster(params *cluster.CreateClusterParams, opts ...cluster.ClientOption) (*cluster.CreateClusterOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCluster")
	}

	var r0 *cluster.CreateClusterOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*cluster.CreateClusterParams, ...cluster.ClientOption) (*cluster.CreateClusterOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*cluster.CreateClusterParams, ...cluster.ClientOption) *cluster.CreateClusterOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cluster.CreateClusterOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*cluster.CreateClusterParams, ...cluster.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateImport provides a mock function with given fields: params, opts
func (_m *TiDBCloudClient) CreateImport(params *import_service.CreateImportParams, opts ...import_service.ClientOption) (*import_service.CreateImportOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateImport")
	}

	var r0 *import_service.CreateImportOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*import_service.CreateImportParams, ...import_service.ClientOption) (*import_service.CreateImportOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*import_service.CreateImportParams, ...import_service.ClientOption) *import_service.CreateImportOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*import_service.CreateImportOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*import_service.CreateImportParams, ...import_service.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBranch provides a mock function with given fields: params, opts
func (_m *TiDBCloudClient) DeleteBranch(params *branch_service.DeleteBranchParams, opts ...branch_service.ClientOption) (*branch_service.DeleteBranchOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBranch")
	}

	var r0 *branch_service.DeleteBranchOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*branch_service.DeleteBranchParams, ...branch_service.ClientOption) (*branch_service.DeleteBranchOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*branch_service.DeleteBranchParams, ...branch_service.ClientOption) *branch_service.DeleteBranchOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*branch_service.DeleteBranchOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*branch_service.DeleteBranchParams, ...branch_service.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCluster provides a mock function with given fields: params, opts
func (_m *TiDBCloudClient) DeleteCluster(params *cluster.DeleteClusterParams, opts ...cluster.ClientOption) (*cluster.DeleteClusterOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCluster")
	}

	var r0 *cluster.DeleteClusterOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*cluster.DeleteClusterParams, ...cluster.ClientOption) (*cluster.DeleteClusterOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*cluster.DeleteClusterParams, ...cluster.ClientOption) *cluster.DeleteClusterOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cluster.DeleteClusterOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*cluster.DeleteClusterParams, ...cluster.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateUploadURL provides a mock function with given fields: params, opts
func (_m *TiDBCloudClient) GenerateUploadURL(params *import_service.GenerateUploadURLParams, opts ...import_service.ClientOption) (*import_service.GenerateUploadURLOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GenerateUploadURL")
	}

	var r0 *import_service.GenerateUploadURLOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*import_service.GenerateUploadURLParams, ...import_service.ClientOption) (*import_service.GenerateUploadURLOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*import_service.GenerateUploadURLParams, ...import_service.ClientOption) *import_service.GenerateUploadURLOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*import_service.GenerateUploadURLOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*import_service.GenerateUploadURLParams, ...import_service.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBranch provides a mock function with given fields: params, opts
func (_m *TiDBCloudClient) GetBranch(params *branch_service.GetBranchParams, opts ...branch_service.ClientOption) (*branch_service.GetBranchOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBranch")
	}

	var r0 *branch_service.GetBranchOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*branch_service.GetBranchParams, ...branch_service.ClientOption) (*branch_service.GetBranchOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*branch_service.GetBranchParams, ...branch_service.ClientOption) *branch_service.GetBranchOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*branch_service.GetBranchOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*branch_service.GetBranchParams, ...branch_service.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCluster provides a mock function with given fields: params, opts
func (_m *TiDBCloudClient) GetCluster(params *cluster.GetClusterParams, opts ...cluster.ClientOption) (*cluster.GetClusterOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCluster")
	}

	var r0 *cluster.GetClusterOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*cluster.GetClusterParams, ...cluster.ClientOption) (*cluster.GetClusterOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*cluster.GetClusterParams, ...cluster.ClientOption) *cluster.GetClusterOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cluster.GetClusterOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*cluster.GetClusterParams, ...cluster.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConnectInfo provides a mock function with given fields: params, opts
func (_m *TiDBCloudClient) GetConnectInfo(params *connect_info_service.GetInfoParams, opts ...connect_info_service.ClientOption) (*connect_info_service.GetInfoOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetConnectInfo")
	}

	var r0 *connect_info_service.GetInfoOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*connect_info_service.GetInfoParams, ...connect_info_service.ClientOption) (*connect_info_service.GetInfoOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*connect_info_service.GetInfoParams, ...connect_info_service.ClientOption) *connect_info_service.GetInfoOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect_info_service.GetInfoOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*connect_info_service.GetInfoParams, ...connect_info_service.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImport provides a mock function with given fields: params, opts
func (_m *TiDBCloudClient) GetImport(params *import_service.GetImportParams, opts ...import_service.ClientOption) (*import_service.GetImportOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetImport")
	}

	var r0 *import_service.GetImportOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*import_service.GetImportParams, ...import_service.ClientOption) (*import_service.GetImportOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*import_service.GetImportParams, ...import_service.ClientOption) *import_service.GetImportOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*import_service.GetImportOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*import_service.GetImportParams, ...import_service.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBranches provides a mock function with given fields: params, opts
func (_m *TiDBCloudClient) ListBranches(params *branch_service.ListBranchesParams, opts ...branch_service.ClientOption) (*branch_service.ListBranchesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListBranches")
	}

	var r0 *branch_service.ListBranchesOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*branch_service.ListBranchesParams, ...branch_service.ClientOption) (*branch_service.ListBranchesOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*branch_service.ListBranchesParams, ...branch_service.ClientOption) *branch_service.ListBranchesOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*branch_service.ListBranchesOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*branch_service.ListBranchesParams, ...branch_service.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListClustersOfProject provides a mock function with given fields: params, opts
func (_m *TiDBCloudClient) ListClustersOfProject(params *cluster.ListClustersOfProjectParams, opts ...cluster.ClientOption) (*cluster.ListClustersOfProjectOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListClustersOfProject")
	}

	var r0 *cluster.ListClustersOfProjectOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*cluster.ListClustersOfProjectParams, ...cluster.ClientOption) (*cluster.ListClustersOfProjectOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*cluster.ListClustersOfProjectParams, ...cluster.ClientOption) *cluster.ListClustersOfProjectOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cluster.ListClustersOfProjectOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*cluster.ListClustersOfProjectParams, ...cluster.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListImports provides a mock function with given fields: params, opts
func (_m *TiDBCloudClient) ListImports(params *import_service.ListImportsParams, opts ...import_service.ClientOption) (*import_service.ListImportsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListImports")
	}

	var r0 *import_service.ListImportsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*import_service.ListImportsParams, ...import_service.ClientOption) (*import_service.ListImportsOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*import_service.ListImportsParams, ...import_service.ClientOption) *import_service.ListImportsOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*import_service.ListImportsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*import_service.ListImportsParams, ...import_service.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProjects provides a mock function with given fields: params, opts
func (_m *TiDBCloudClient) ListProjects(params *project.ListProjectsParams, opts ...project.ClientOption) (*project.ListProjectsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProjects")
	}

	var r0 *project.ListProjectsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*project.ListProjectsParams, ...project.ClientOption) (*project.ListProjectsOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*project.ListProjectsParams, ...project.ClientOption) *project.ListProjectsOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*project.ListProjectsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*project.ListProjectsParams, ...project.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProviderRegions provides a mock function with given fields: params, opts
func (_m *TiDBCloudClient) ListProviderRegions(params *cluster.ListProviderRegionsParams, opts ...cluster.ClientOption) (*cluster.ListProviderRegionsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProviderRegions")
	}

	var r0 *cluster.ListProviderRegionsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*cluster.ListProviderRegionsParams, ...cluster.ClientOption) (*cluster.ListProviderRegionsOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*cluster.ListProviderRegionsParams, ...cluster.ClientOption) *cluster.ListProviderRegionsOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cluster.ListProviderRegionsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*cluster.ListProviderRegionsParams, ...cluster.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PreSignedUrlUpload provides a mock function with given fields: url, uploadFile, size
func (_m *TiDBCloudClient) PreSignedUrlUpload(url *string, uploadFile *os.File, size int64) error {
	ret := _m.Called(url, uploadFile, size)

	if len(ret) == 0 {
		panic("no return value specified for PreSignedUrlUpload")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*string, *os.File, int64) error); ok {
		r0 = rf(url, uploadFile, size)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTiDBCloudClient creates a new instance of TiDBCloudClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTiDBCloudClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *TiDBCloudClient {
	mock := &TiDBCloudClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
