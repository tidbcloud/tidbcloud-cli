// Code generated by mockery v2.43.0. DO NOT EDIT.

package mock

import (
	branch "tidbcloud-cli/pkg/tidbcloud/v1beta1/serverless/branch"
	backup_restore_service "tidbcloud-cli/pkg/tidbcloud/v1beta1/serverless_br/client/backup_restore_service"

	cluster "tidbcloud-cli/pkg/tidbcloud/v1beta1/serverless/cluster"

	context "context"

	export "tidbcloud-cli/pkg/tidbcloud/v1beta1/serverless/export"

	iam "tidbcloud-cli/pkg/tidbcloud/v1beta1/iam"

	import_service "tidbcloud-cli/pkg/tidbcloud/v1beta1/serverless_import/client/import_service"

	mock "github.com/stretchr/testify/mock"

	operations "tidbcloud-cli/pkg/tidbcloud/pingchat/client/operations"
)

// TiDBCloudClient is an autogenerated mock type for the TiDBCloudClient type
type TiDBCloudClient struct {
	mock.Mock
}

// CancelExport provides a mock function with given fields: ctx, clusterId, exportId
func (_m *TiDBCloudClient) CancelExport(ctx context.Context, clusterId string, exportId string) (*export.Export, error) {
	ret := _m.Called(ctx, clusterId, exportId)

	if len(ret) == 0 {
		panic("no return value specified for CancelExport")
	}

	var r0 *export.Export
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*export.Export, error)); ok {
		return rf(ctx, clusterId, exportId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *export.Export); ok {
		r0 = rf(ctx, clusterId, exportId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*export.Export)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, clusterId, exportId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelImport provides a mock function with given fields: params, opts
func (_m *TiDBCloudClient) CancelImport(params *import_service.ImportServiceCancelImportParams, opts ...import_service.ClientOption) (*import_service.ImportServiceCancelImportOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelImport")
	}

	var r0 *import_service.ImportServiceCancelImportOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*import_service.ImportServiceCancelImportParams, ...import_service.ClientOption) (*import_service.ImportServiceCancelImportOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*import_service.ImportServiceCancelImportParams, ...import_service.ClientOption) *import_service.ImportServiceCancelImportOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*import_service.ImportServiceCancelImportOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*import_service.ImportServiceCancelImportParams, ...import_service.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelUpload provides a mock function with given fields: params, opts
func (_m *TiDBCloudClient) CancelUpload(params *import_service.ImportServiceCancelUploadParams, opts ...import_service.ClientOption) (*import_service.ImportServiceCancelUploadOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelUpload")
	}

	var r0 *import_service.ImportServiceCancelUploadOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*import_service.ImportServiceCancelUploadParams, ...import_service.ClientOption) (*import_service.ImportServiceCancelUploadOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*import_service.ImportServiceCancelUploadParams, ...import_service.ClientOption) *import_service.ImportServiceCancelUploadOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*import_service.ImportServiceCancelUploadOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*import_service.ImportServiceCancelUploadParams, ...import_service.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Chat provides a mock function with given fields: params, opts
func (_m *TiDBCloudClient) Chat(params *operations.ChatParams, opts ...operations.ClientOption) (*operations.ChatOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Chat")
	}

	var r0 *operations.ChatOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.ChatParams, ...operations.ClientOption) (*operations.ChatOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.ChatParams, ...operations.ClientOption) *operations.ChatOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ChatOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.ChatParams, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CompleteUpload provides a mock function with given fields: params, opts
func (_m *TiDBCloudClient) CompleteUpload(params *import_service.ImportServiceCompleteUploadParams, opts ...import_service.ClientOption) (*import_service.ImportServiceCompleteUploadOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CompleteUpload")
	}

	var r0 *import_service.ImportServiceCompleteUploadOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*import_service.ImportServiceCompleteUploadParams, ...import_service.ClientOption) (*import_service.ImportServiceCompleteUploadOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*import_service.ImportServiceCompleteUploadParams, ...import_service.ClientOption) *import_service.ImportServiceCompleteUploadOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*import_service.ImportServiceCompleteUploadOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*import_service.ImportServiceCompleteUploadParams, ...import_service.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBranch provides a mock function with given fields: ctx, clusterId, body
func (_m *TiDBCloudClient) CreateBranch(ctx context.Context, clusterId string, body *branch.Branch) (*branch.Branch, error) {
	ret := _m.Called(ctx, clusterId, body)

	if len(ret) == 0 {
		panic("no return value specified for CreateBranch")
	}

	var r0 *branch.Branch
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *branch.Branch) (*branch.Branch, error)); ok {
		return rf(ctx, clusterId, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *branch.Branch) *branch.Branch); ok {
		r0 = rf(ctx, clusterId, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*branch.Branch)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *branch.Branch) error); ok {
		r1 = rf(ctx, clusterId, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCluster provides a mock function with given fields: ctx, body
func (_m *TiDBCloudClient) CreateCluster(ctx context.Context, body *cluster.TidbCloudOpenApiserverlessv1beta1Cluster) (*cluster.TidbCloudOpenApiserverlessv1beta1Cluster, error) {
	ret := _m.Called(ctx, body)

	if len(ret) == 0 {
		panic("no return value specified for CreateCluster")
	}

	var r0 *cluster.TidbCloudOpenApiserverlessv1beta1Cluster
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cluster.TidbCloudOpenApiserverlessv1beta1Cluster) (*cluster.TidbCloudOpenApiserverlessv1beta1Cluster, error)); ok {
		return rf(ctx, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cluster.TidbCloudOpenApiserverlessv1beta1Cluster) *cluster.TidbCloudOpenApiserverlessv1beta1Cluster); ok {
		r0 = rf(ctx, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cluster.TidbCloudOpenApiserverlessv1beta1Cluster)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cluster.TidbCloudOpenApiserverlessv1beta1Cluster) error); ok {
		r1 = rf(ctx, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateExport provides a mock function with given fields: ctx, clusterId, body
func (_m *TiDBCloudClient) CreateExport(ctx context.Context, clusterId string, body *export.ExportServiceCreateExportBody) (*export.Export, error) {
	ret := _m.Called(ctx, clusterId, body)

	if len(ret) == 0 {
		panic("no return value specified for CreateExport")
	}

	var r0 *export.Export
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *export.ExportServiceCreateExportBody) (*export.Export, error)); ok {
		return rf(ctx, clusterId, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *export.ExportServiceCreateExportBody) *export.Export); ok {
		r0 = rf(ctx, clusterId, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*export.Export)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *export.ExportServiceCreateExportBody) error); ok {
		r1 = rf(ctx, clusterId, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateImport provides a mock function with given fields: params, opts
func (_m *TiDBCloudClient) CreateImport(params *import_service.ImportServiceCreateImportParams, opts ...import_service.ClientOption) (*import_service.ImportServiceCreateImportOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateImport")
	}

	var r0 *import_service.ImportServiceCreateImportOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*import_service.ImportServiceCreateImportParams, ...import_service.ClientOption) (*import_service.ImportServiceCreateImportOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*import_service.ImportServiceCreateImportParams, ...import_service.ClientOption) *import_service.ImportServiceCreateImportOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*import_service.ImportServiceCreateImportOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*import_service.ImportServiceCreateImportParams, ...import_service.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSQLUser provides a mock function with given fields: ctx, clusterID, body
func (_m *TiDBCloudClient) CreateSQLUser(ctx context.Context, clusterID string, body *iam.ApiCreateSqlUserReq) (*iam.ApiSqlUser, error) {
	ret := _m.Called(ctx, clusterID, body)

	if len(ret) == 0 {
		panic("no return value specified for CreateSQLUser")
	}

	var r0 *iam.ApiSqlUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *iam.ApiCreateSqlUserReq) (*iam.ApiSqlUser, error)); ok {
		return rf(ctx, clusterID, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *iam.ApiCreateSqlUserReq) *iam.ApiSqlUser); ok {
		r0 = rf(ctx, clusterID, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ApiSqlUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *iam.ApiCreateSqlUserReq) error); ok {
		r1 = rf(ctx, clusterID, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBackup provides a mock function with given fields: params, opts
func (_m *TiDBCloudClient) DeleteBackup(params *backup_restore_service.BackupRestoreServiceDeleteBackupParams, opts ...backup_restore_service.ClientOption) (*backup_restore_service.BackupRestoreServiceDeleteBackupOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBackup")
	}

	var r0 *backup_restore_service.BackupRestoreServiceDeleteBackupOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*backup_restore_service.BackupRestoreServiceDeleteBackupParams, ...backup_restore_service.ClientOption) (*backup_restore_service.BackupRestoreServiceDeleteBackupOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*backup_restore_service.BackupRestoreServiceDeleteBackupParams, ...backup_restore_service.ClientOption) *backup_restore_service.BackupRestoreServiceDeleteBackupOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup_restore_service.BackupRestoreServiceDeleteBackupOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*backup_restore_service.BackupRestoreServiceDeleteBackupParams, ...backup_restore_service.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBranch provides a mock function with given fields: ctx, clusterId, branchId
func (_m *TiDBCloudClient) DeleteBranch(ctx context.Context, clusterId string, branchId string) (*branch.Branch, error) {
	ret := _m.Called(ctx, clusterId, branchId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBranch")
	}

	var r0 *branch.Branch
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*branch.Branch, error)); ok {
		return rf(ctx, clusterId, branchId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *branch.Branch); ok {
		r0 = rf(ctx, clusterId, branchId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*branch.Branch)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, clusterId, branchId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCluster provides a mock function with given fields: ctx, clusterId
func (_m *TiDBCloudClient) DeleteCluster(ctx context.Context, clusterId string) (*cluster.TidbCloudOpenApiserverlessv1beta1Cluster, error) {
	ret := _m.Called(ctx, clusterId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCluster")
	}

	var r0 *cluster.TidbCloudOpenApiserverlessv1beta1Cluster
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*cluster.TidbCloudOpenApiserverlessv1beta1Cluster, error)); ok {
		return rf(ctx, clusterId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *cluster.TidbCloudOpenApiserverlessv1beta1Cluster); ok {
		r0 = rf(ctx, clusterId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cluster.TidbCloudOpenApiserverlessv1beta1Cluster)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, clusterId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteExport provides a mock function with given fields: ctx, clusterId, exportId
func (_m *TiDBCloudClient) DeleteExport(ctx context.Context, clusterId string, exportId string) (*export.Export, error) {
	ret := _m.Called(ctx, clusterId, exportId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteExport")
	}

	var r0 *export.Export
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*export.Export, error)); ok {
		return rf(ctx, clusterId, exportId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *export.Export); ok {
		r0 = rf(ctx, clusterId, exportId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*export.Export)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, clusterId, exportId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSQLUser provides a mock function with given fields: ctx, clusterID, userName
func (_m *TiDBCloudClient) DeleteSQLUser(ctx context.Context, clusterID string, userName string) (*iam.ApiBasicResp, error) {
	ret := _m.Called(ctx, clusterID, userName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSQLUser")
	}

	var r0 *iam.ApiBasicResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*iam.ApiBasicResp, error)); ok {
		return rf(ctx, clusterID, userName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *iam.ApiBasicResp); ok {
		r0 = rf(ctx, clusterID, userName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ApiBasicResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, clusterID, userName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DownloadExport provides a mock function with given fields: ctx, clusterId, exportId
func (_m *TiDBCloudClient) DownloadExport(ctx context.Context, clusterId string, exportId string) (*export.DownloadExportsResponse, error) {
	ret := _m.Called(ctx, clusterId, exportId)

	if len(ret) == 0 {
		panic("no return value specified for DownloadExport")
	}

	var r0 *export.DownloadExportsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*export.DownloadExportsResponse, error)); ok {
		return rf(ctx, clusterId, exportId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *export.DownloadExportsResponse); ok {
		r0 = rf(ctx, clusterId, exportId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*export.DownloadExportsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, clusterId, exportId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBackup provides a mock function with given fields: params, opts
func (_m *TiDBCloudClient) GetBackup(params *backup_restore_service.BackupRestoreServiceGetBackupParams, opts ...backup_restore_service.ClientOption) (*backup_restore_service.BackupRestoreServiceGetBackupOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBackup")
	}

	var r0 *backup_restore_service.BackupRestoreServiceGetBackupOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*backup_restore_service.BackupRestoreServiceGetBackupParams, ...backup_restore_service.ClientOption) (*backup_restore_service.BackupRestoreServiceGetBackupOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*backup_restore_service.BackupRestoreServiceGetBackupParams, ...backup_restore_service.ClientOption) *backup_restore_service.BackupRestoreServiceGetBackupOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup_restore_service.BackupRestoreServiceGetBackupOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*backup_restore_service.BackupRestoreServiceGetBackupParams, ...backup_restore_service.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBranch provides a mock function with given fields: ctx, clusterId, branchId
func (_m *TiDBCloudClient) GetBranch(ctx context.Context, clusterId string, branchId string) (*branch.Branch, error) {
	ret := _m.Called(ctx, clusterId, branchId)

	if len(ret) == 0 {
		panic("no return value specified for GetBranch")
	}

	var r0 *branch.Branch
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*branch.Branch, error)); ok {
		return rf(ctx, clusterId, branchId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *branch.Branch); ok {
		r0 = rf(ctx, clusterId, branchId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*branch.Branch)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, clusterId, branchId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCluster provides a mock function with given fields: ctx, clusterId
func (_m *TiDBCloudClient) GetCluster(ctx context.Context, clusterId string) (*cluster.TidbCloudOpenApiserverlessv1beta1Cluster, error) {
	ret := _m.Called(ctx, clusterId)

	if len(ret) == 0 {
		panic("no return value specified for GetCluster")
	}

	var r0 *cluster.TidbCloudOpenApiserverlessv1beta1Cluster
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*cluster.TidbCloudOpenApiserverlessv1beta1Cluster, error)); ok {
		return rf(ctx, clusterId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *cluster.TidbCloudOpenApiserverlessv1beta1Cluster); ok {
		r0 = rf(ctx, clusterId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cluster.TidbCloudOpenApiserverlessv1beta1Cluster)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, clusterId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExport provides a mock function with given fields: ctx, clusterId, exportId
func (_m *TiDBCloudClient) GetExport(ctx context.Context, clusterId string, exportId string) (*export.Export, error) {
	ret := _m.Called(ctx, clusterId, exportId)

	if len(ret) == 0 {
		panic("no return value specified for GetExport")
	}

	var r0 *export.Export
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*export.Export, error)); ok {
		return rf(ctx, clusterId, exportId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *export.Export); ok {
		r0 = rf(ctx, clusterId, exportId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*export.Export)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, clusterId, exportId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImport provides a mock function with given fields: params, opts
func (_m *TiDBCloudClient) GetImport(params *import_service.ImportServiceGetImportParams, opts ...import_service.ClientOption) (*import_service.ImportServiceGetImportOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetImport")
	}

	var r0 *import_service.ImportServiceGetImportOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*import_service.ImportServiceGetImportParams, ...import_service.ClientOption) (*import_service.ImportServiceGetImportOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*import_service.ImportServiceGetImportParams, ...import_service.ClientOption) *import_service.ImportServiceGetImportOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*import_service.ImportServiceGetImportOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*import_service.ImportServiceGetImportParams, ...import_service.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSQLUser provides a mock function with given fields: ctx, clusterID, userName
func (_m *TiDBCloudClient) GetSQLUser(ctx context.Context, clusterID string, userName string) (*iam.ApiSqlUser, error) {
	ret := _m.Called(ctx, clusterID, userName)

	if len(ret) == 0 {
		panic("no return value specified for GetSQLUser")
	}

	var r0 *iam.ApiSqlUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*iam.ApiSqlUser, error)); ok {
		return rf(ctx, clusterID, userName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *iam.ApiSqlUser); ok {
		r0 = rf(ctx, clusterID, userName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ApiSqlUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, clusterID, userName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBackups provides a mock function with given fields: params, opts
func (_m *TiDBCloudClient) ListBackups(params *backup_restore_service.BackupRestoreServiceListBackupsParams, opts ...backup_restore_service.ClientOption) (*backup_restore_service.BackupRestoreServiceListBackupsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListBackups")
	}

	var r0 *backup_restore_service.BackupRestoreServiceListBackupsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*backup_restore_service.BackupRestoreServiceListBackupsParams, ...backup_restore_service.ClientOption) (*backup_restore_service.BackupRestoreServiceListBackupsOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*backup_restore_service.BackupRestoreServiceListBackupsParams, ...backup_restore_service.ClientOption) *backup_restore_service.BackupRestoreServiceListBackupsOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup_restore_service.BackupRestoreServiceListBackupsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*backup_restore_service.BackupRestoreServiceListBackupsParams, ...backup_restore_service.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBranches provides a mock function with given fields: ctx, clusterId, pageSize, pageToken
func (_m *TiDBCloudClient) ListBranches(ctx context.Context, clusterId string, pageSize *int32, pageToken *string) (*branch.ListBranchesResponse, error) {
	ret := _m.Called(ctx, clusterId, pageSize, pageToken)

	if len(ret) == 0 {
		panic("no return value specified for ListBranches")
	}

	var r0 *branch.ListBranchesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *int32, *string) (*branch.ListBranchesResponse, error)); ok {
		return rf(ctx, clusterId, pageSize, pageToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *int32, *string) *branch.ListBranchesResponse); ok {
		r0 = rf(ctx, clusterId, pageSize, pageToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*branch.ListBranchesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *int32, *string) error); ok {
		r1 = rf(ctx, clusterId, pageSize, pageToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListClusters provides a mock function with given fields: ctx, filter, pageSize, pageToken, orderBy, skip
func (_m *TiDBCloudClient) ListClusters(ctx context.Context, filter *string, pageSize *int32, pageToken *string, orderBy *string, skip *int32) (*cluster.TidbCloudOpenApiserverlessv1beta1ListClustersResponse, error) {
	ret := _m.Called(ctx, filter, pageSize, pageToken, orderBy, skip)

	if len(ret) == 0 {
		panic("no return value specified for ListClusters")
	}

	var r0 *cluster.TidbCloudOpenApiserverlessv1beta1ListClustersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *string, *int32, *string, *string, *int32) (*cluster.TidbCloudOpenApiserverlessv1beta1ListClustersResponse, error)); ok {
		return rf(ctx, filter, pageSize, pageToken, orderBy, skip)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *string, *int32, *string, *string, *int32) *cluster.TidbCloudOpenApiserverlessv1beta1ListClustersResponse); ok {
		r0 = rf(ctx, filter, pageSize, pageToken, orderBy, skip)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cluster.TidbCloudOpenApiserverlessv1beta1ListClustersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *string, *int32, *string, *string, *int32) error); ok {
		r1 = rf(ctx, filter, pageSize, pageToken, orderBy, skip)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListExports provides a mock function with given fields: ctx, clusterId, pageSize, pageToken, orderBy
func (_m *TiDBCloudClient) ListExports(ctx context.Context, clusterId string, pageSize *int32, pageToken *string, orderBy *string) (*export.ListExportsResponse, error) {
	ret := _m.Called(ctx, clusterId, pageSize, pageToken, orderBy)

	if len(ret) == 0 {
		panic("no return value specified for ListExports")
	}

	var r0 *export.ListExportsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *int32, *string, *string) (*export.ListExportsResponse, error)); ok {
		return rf(ctx, clusterId, pageSize, pageToken, orderBy)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *int32, *string, *string) *export.ListExportsResponse); ok {
		r0 = rf(ctx, clusterId, pageSize, pageToken, orderBy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*export.ListExportsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *int32, *string, *string) error); ok {
		r1 = rf(ctx, clusterId, pageSize, pageToken, orderBy)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListImports provides a mock function with given fields: params, opts
func (_m *TiDBCloudClient) ListImports(params *import_service.ImportServiceListImportsParams, opts ...import_service.ClientOption) (*import_service.ImportServiceListImportsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListImports")
	}

	var r0 *import_service.ImportServiceListImportsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*import_service.ImportServiceListImportsParams, ...import_service.ClientOption) (*import_service.ImportServiceListImportsOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*import_service.ImportServiceListImportsParams, ...import_service.ClientOption) *import_service.ImportServiceListImportsOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*import_service.ImportServiceListImportsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*import_service.ImportServiceListImportsParams, ...import_service.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProjects provides a mock function with given fields: ctx, pageSize, pageToken
func (_m *TiDBCloudClient) ListProjects(ctx context.Context, pageSize *int32, pageToken *string) (*iam.ApiListProjectsRsp, error) {
	ret := _m.Called(ctx, pageSize, pageToken)

	if len(ret) == 0 {
		panic("no return value specified for ListProjects")
	}

	var r0 *iam.ApiListProjectsRsp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *int32, *string) (*iam.ApiListProjectsRsp, error)); ok {
		return rf(ctx, pageSize, pageToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *int32, *string) *iam.ApiListProjectsRsp); ok {
		r0 = rf(ctx, pageSize, pageToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ApiListProjectsRsp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *int32, *string) error); ok {
		r1 = rf(ctx, pageSize, pageToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProviderRegions provides a mock function with given fields: ctx
func (_m *TiDBCloudClient) ListProviderRegions(ctx context.Context) (*cluster.TidbCloudOpenApiserverlessv1beta1ListRegionsResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListProviderRegions")
	}

	var r0 *cluster.TidbCloudOpenApiserverlessv1beta1ListRegionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*cluster.TidbCloudOpenApiserverlessv1beta1ListRegionsResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *cluster.TidbCloudOpenApiserverlessv1beta1ListRegionsResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cluster.TidbCloudOpenApiserverlessv1beta1ListRegionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSQLUsers provides a mock function with given fields: ctx, clusterID, pageSize, pageToken
func (_m *TiDBCloudClient) ListSQLUsers(ctx context.Context, clusterID string, pageSize *int32, pageToken *string) (*iam.ApiListSqlUsersRsp, error) {
	ret := _m.Called(ctx, clusterID, pageSize, pageToken)

	if len(ret) == 0 {
		panic("no return value specified for ListSQLUsers")
	}

	var r0 *iam.ApiListSqlUsersRsp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *int32, *string) (*iam.ApiListSqlUsersRsp, error)); ok {
		return rf(ctx, clusterID, pageSize, pageToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *int32, *string) *iam.ApiListSqlUsersRsp); ok {
		r0 = rf(ctx, clusterID, pageSize, pageToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ApiListSqlUsersRsp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *int32, *string) error); ok {
		r1 = rf(ctx, clusterID, pageSize, pageToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PartialUpdateCluster provides a mock function with given fields: ctx, clusterId, body
func (_m *TiDBCloudClient) PartialUpdateCluster(ctx context.Context, clusterId string, body *cluster.V1beta1ServerlessServicePartialUpdateClusterBody) (*cluster.TidbCloudOpenApiserverlessv1beta1Cluster, error) {
	ret := _m.Called(ctx, clusterId, body)

	if len(ret) == 0 {
		panic("no return value specified for PartialUpdateCluster")
	}

	var r0 *cluster.TidbCloudOpenApiserverlessv1beta1Cluster
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *cluster.V1beta1ServerlessServicePartialUpdateClusterBody) (*cluster.TidbCloudOpenApiserverlessv1beta1Cluster, error)); ok {
		return rf(ctx, clusterId, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *cluster.V1beta1ServerlessServicePartialUpdateClusterBody) *cluster.TidbCloudOpenApiserverlessv1beta1Cluster); ok {
		r0 = rf(ctx, clusterId, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cluster.TidbCloudOpenApiserverlessv1beta1Cluster)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *cluster.V1beta1ServerlessServicePartialUpdateClusterBody) error); ok {
		r1 = rf(ctx, clusterId, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Restore provides a mock function with given fields: params, opts
func (_m *TiDBCloudClient) Restore(params *backup_restore_service.BackupRestoreServiceRestoreParams, opts ...backup_restore_service.ClientOption) (*backup_restore_service.BackupRestoreServiceRestoreOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Restore")
	}

	var r0 *backup_restore_service.BackupRestoreServiceRestoreOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*backup_restore_service.BackupRestoreServiceRestoreParams, ...backup_restore_service.ClientOption) (*backup_restore_service.BackupRestoreServiceRestoreOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*backup_restore_service.BackupRestoreServiceRestoreParams, ...backup_restore_service.ClientOption) *backup_restore_service.BackupRestoreServiceRestoreOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup_restore_service.BackupRestoreServiceRestoreOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*backup_restore_service.BackupRestoreServiceRestoreParams, ...backup_restore_service.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartUpload provides a mock function with given fields: params, opts
func (_m *TiDBCloudClient) StartUpload(params *import_service.ImportServiceStartUploadParams, opts ...import_service.ClientOption) (*import_service.ImportServiceStartUploadOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartUpload")
	}

	var r0 *import_service.ImportServiceStartUploadOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*import_service.ImportServiceStartUploadParams, ...import_service.ClientOption) (*import_service.ImportServiceStartUploadOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*import_service.ImportServiceStartUploadParams, ...import_service.ClientOption) *import_service.ImportServiceStartUploadOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*import_service.ImportServiceStartUploadOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*import_service.ImportServiceStartUploadParams, ...import_service.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSQLUser provides a mock function with given fields: ctx, clusterID, userName, body
func (_m *TiDBCloudClient) UpdateSQLUser(ctx context.Context, clusterID string, userName string, body *iam.ApiUpdateSqlUserReq) (*iam.ApiSqlUser, error) {
	ret := _m.Called(ctx, clusterID, userName, body)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSQLUser")
	}

	var r0 *iam.ApiSqlUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *iam.ApiUpdateSqlUserReq) (*iam.ApiSqlUser, error)); ok {
		return rf(ctx, clusterID, userName, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *iam.ApiUpdateSqlUserReq) *iam.ApiSqlUser); ok {
		r0 = rf(ctx, clusterID, userName, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam.ApiSqlUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *iam.ApiUpdateSqlUserReq) error); ok {
		r1 = rf(ctx, clusterID, userName, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTiDBCloudClient creates a new instance of TiDBCloudClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTiDBCloudClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *TiDBCloudClient {
	mock := &TiDBCloudClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
