// Code generated by mockery v2.24.0. DO NOT EDIT.

package mock

import (
	connect_info_service "tidbcloud-cli/pkg/tidbcloud/connect_info/client/connect_info_service"

	cluster "github.com/c4pt0r/go-tidbcloud-sdk-v1/client/cluster"
	import_operations "github.com/c4pt0r/go-tidbcloud-sdk-v1/client/import_operations"

	mock "github.com/stretchr/testify/mock"

	project "github.com/c4pt0r/go-tidbcloud-sdk-v1/client/project"
)

// TiDBCloudClient is an autogenerated mock type for the TiDBCloudClient type
type TiDBCloudClient struct {
	mock.Mock
}

// CreateCluster provides a mock function with given fields: params, opts
func (_m *TiDBCloudClient) CreateCluster(params *cluster.CreateClusterParams, opts ...cluster.ClientOption) (*cluster.CreateClusterOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cluster.CreateClusterOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*cluster.CreateClusterParams, ...cluster.ClientOption) (*cluster.CreateClusterOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*cluster.CreateClusterParams, ...cluster.ClientOption) *cluster.CreateClusterOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cluster.CreateClusterOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*cluster.CreateClusterParams, ...cluster.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateImportTask provides a mock function with given fields: params, opts
func (_m *TiDBCloudClient) CreateImportTask(params *import_operations.CreateImportTaskParams, opts ...import_operations.ClientOption) (*import_operations.CreateImportTaskOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *import_operations.CreateImportTaskOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*import_operations.CreateImportTaskParams, ...import_operations.ClientOption) (*import_operations.CreateImportTaskOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*import_operations.CreateImportTaskParams, ...import_operations.ClientOption) *import_operations.CreateImportTaskOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*import_operations.CreateImportTaskOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*import_operations.CreateImportTaskParams, ...import_operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCluster provides a mock function with given fields: params, opts
func (_m *TiDBCloudClient) DeleteCluster(params *cluster.DeleteClusterParams, opts ...cluster.ClientOption) (*cluster.DeleteClusterOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cluster.DeleteClusterOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*cluster.DeleteClusterParams, ...cluster.ClientOption) (*cluster.DeleteClusterOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*cluster.DeleteClusterParams, ...cluster.ClientOption) *cluster.DeleteClusterOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cluster.DeleteClusterOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*cluster.DeleteClusterParams, ...cluster.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCluster provides a mock function with given fields: params, opts
func (_m *TiDBCloudClient) GetCluster(params *cluster.GetClusterParams, opts ...cluster.ClientOption) (*cluster.GetClusterOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cluster.GetClusterOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*cluster.GetClusterParams, ...cluster.ClientOption) (*cluster.GetClusterOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*cluster.GetClusterParams, ...cluster.ClientOption) *cluster.GetClusterOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cluster.GetClusterOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*cluster.GetClusterParams, ...cluster.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConnectInfo provides a mock function with given fields: params, opts
func (_m *TiDBCloudClient) GetConnectInfo(params *connect_info_service.GetInfoParams, opts ...connect_info_service.ClientOption) (*connect_info_service.GetInfoOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *connect_info_service.GetInfoOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*connect_info_service.GetInfoParams, ...connect_info_service.ClientOption) (*connect_info_service.GetInfoOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*connect_info_service.GetInfoParams, ...connect_info_service.ClientOption) *connect_info_service.GetInfoOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect_info_service.GetInfoOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*connect_info_service.GetInfoParams, ...connect_info_service.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImportTask provides a mock function with given fields: params, opts
func (_m *TiDBCloudClient) GetImportTask(params *import_operations.GetImportTaskParams, opts ...import_operations.ClientOption) (*import_operations.GetImportTaskOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *import_operations.GetImportTaskOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*import_operations.GetImportTaskParams, ...import_operations.ClientOption) (*import_operations.GetImportTaskOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*import_operations.GetImportTaskParams, ...import_operations.ClientOption) *import_operations.GetImportTaskOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*import_operations.GetImportTaskOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*import_operations.GetImportTaskParams, ...import_operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListClustersOfProject provides a mock function with given fields: params, opts
func (_m *TiDBCloudClient) ListClustersOfProject(params *cluster.ListClustersOfProjectParams, opts ...cluster.ClientOption) (*cluster.ListClustersOfProjectOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cluster.ListClustersOfProjectOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*cluster.ListClustersOfProjectParams, ...cluster.ClientOption) (*cluster.ListClustersOfProjectOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*cluster.ListClustersOfProjectParams, ...cluster.ClientOption) *cluster.ListClustersOfProjectOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cluster.ListClustersOfProjectOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*cluster.ListClustersOfProjectParams, ...cluster.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListImportTasks provides a mock function with given fields: params, opts
func (_m *TiDBCloudClient) ListImportTasks(params *import_operations.ListImportTasksParams, opts ...import_operations.ClientOption) (*import_operations.ListImportTasksOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *import_operations.ListImportTasksOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*import_operations.ListImportTasksParams, ...import_operations.ClientOption) (*import_operations.ListImportTasksOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*import_operations.ListImportTasksParams, ...import_operations.ClientOption) *import_operations.ListImportTasksOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*import_operations.ListImportTasksOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*import_operations.ListImportTasksParams, ...import_operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProjects provides a mock function with given fields: params, opts
func (_m *TiDBCloudClient) ListProjects(params *project.ListProjectsParams, opts ...project.ClientOption) (*project.ListProjectsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *project.ListProjectsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*project.ListProjectsParams, ...project.ClientOption) (*project.ListProjectsOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*project.ListProjectsParams, ...project.ClientOption) *project.ListProjectsOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*project.ListProjectsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*project.ListProjectsParams, ...project.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProviderRegions provides a mock function with given fields: params, opts
func (_m *TiDBCloudClient) ListProviderRegions(params *cluster.ListProviderRegionsParams, opts ...cluster.ClientOption) (*cluster.ListProviderRegionsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cluster.ListProviderRegionsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*cluster.ListProviderRegionsParams, ...cluster.ClientOption) (*cluster.ListProviderRegionsOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*cluster.ListProviderRegionsParams, ...cluster.ClientOption) *cluster.ListProviderRegionsOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cluster.ListProviderRegionsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*cluster.ListProviderRegionsParams, ...cluster.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PreviewImportData provides a mock function with given fields: params, opts
func (_m *TiDBCloudClient) PreviewImportData(params *import_operations.PreviewImportDataParams, opts ...import_operations.ClientOption) (*import_operations.PreviewImportDataOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *import_operations.PreviewImportDataOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*import_operations.PreviewImportDataParams, ...import_operations.ClientOption) (*import_operations.PreviewImportDataOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*import_operations.PreviewImportDataParams, ...import_operations.ClientOption) *import_operations.PreviewImportDataOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*import_operations.PreviewImportDataOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*import_operations.PreviewImportDataParams, ...import_operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateImportTask provides a mock function with given fields: params, opts
func (_m *TiDBCloudClient) UpdateImportTask(params *import_operations.UpdateImportTaskParams, opts ...import_operations.ClientOption) (*import_operations.UpdateImportTaskOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *import_operations.UpdateImportTaskOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*import_operations.UpdateImportTaskParams, ...import_operations.ClientOption) (*import_operations.UpdateImportTaskOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*import_operations.UpdateImportTaskParams, ...import_operations.ClientOption) *import_operations.UpdateImportTaskOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*import_operations.UpdateImportTaskOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*import_operations.UpdateImportTaskParams, ...import_operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadLocalFile provides a mock function with given fields: params, opts
func (_m *TiDBCloudClient) UploadLocalFile(params *import_operations.UploadLocalFileParams, opts ...import_operations.ClientOption) (*import_operations.UploadLocalFileOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *import_operations.UploadLocalFileOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*import_operations.UploadLocalFileParams, ...import_operations.ClientOption) (*import_operations.UploadLocalFileOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*import_operations.UploadLocalFileParams, ...import_operations.ClientOption) *import_operations.UploadLocalFileOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*import_operations.UploadLocalFileOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*import_operations.UploadLocalFileParams, ...import_operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTiDBCloudClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewTiDBCloudClient creates a new instance of TiDBCloudClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTiDBCloudClient(t mockConstructorTestingTNewTiDBCloudClient) *TiDBCloudClient {
	mock := &TiDBCloudClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
