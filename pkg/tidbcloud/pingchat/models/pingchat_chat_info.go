// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PingchatChatInfo pingchat chat info
//
// swagger:model pingchat.ChatInfo
type PingchatChatInfo struct {

	// domain
	Domain []string `json:"domain"`

	// https://pkg.go.dev/gopkg.in/bluesuncorp/validator.v9#hdr-Dive
	// Required: true
	Messages []*PingchatChatMessage `json:"messages"`
}

// Validate validates this pingchat chat info
func (m *PingchatChatInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessages(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var pingchatChatInfoDomainItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["tidb","tidbcloud","asktug","blog","community","knowledge-base-cn","kb"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		pingchatChatInfoDomainItemsEnum = append(pingchatChatInfoDomainItemsEnum, v)
	}
}

func (m *PingchatChatInfo) validateDomainItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, pingchatChatInfoDomainItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PingchatChatInfo) validateDomain(formats strfmt.Registry) error {
	if swag.IsZero(m.Domain) { // not required
		return nil
	}

	for i := 0; i < len(m.Domain); i++ {

		// value enum
		if err := m.validateDomainItemsEnum("domain"+"."+strconv.Itoa(i), "body", m.Domain[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *PingchatChatInfo) validateMessages(formats strfmt.Registry) error {

	if err := validate.Required("messages", "body", m.Messages); err != nil {
		return err
	}

	for i := 0; i < len(m.Messages); i++ {
		if swag.IsZero(m.Messages[i]) { // not required
			continue
		}

		if m.Messages[i] != nil {
			if err := m.Messages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("messages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("messages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this pingchat chat info based on the context it is used
func (m *PingchatChatInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMessages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PingchatChatInfo) contextValidateMessages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Messages); i++ {

		if m.Messages[i] != nil {

			if swag.IsZero(m.Messages[i]) { // not required
				return nil
			}

			if err := m.Messages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("messages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("messages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PingchatChatInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PingchatChatInfo) UnmarshalBinary(b []byte) error {
	var res PingchatChatInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
