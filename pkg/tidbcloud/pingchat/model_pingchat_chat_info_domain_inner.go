/*
PingChat Swagger API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pingchat

import (
	"encoding/json"
	"fmt"
)

// PingchatChatInfoDomainInner the model 'PingchatChatInfoDomainInner'
type PingchatChatInfoDomainInner string

// List of pingchat_ChatInfo_domain_inner
const (
	PINGCHATCHATINFODOMAININNER_TIDB              PingchatChatInfoDomainInner = "tidb"
	PINGCHATCHATINFODOMAININNER_TIDBCLOUD         PingchatChatInfoDomainInner = "tidbcloud"
	PINGCHATCHATINFODOMAININNER_ASKTUG            PingchatChatInfoDomainInner = "asktug"
	PINGCHATCHATINFODOMAININNER_BLOG              PingchatChatInfoDomainInner = "blog"
	PINGCHATCHATINFODOMAININNER_COMMUNITY         PingchatChatInfoDomainInner = "community"
	PINGCHATCHATINFODOMAININNER_KNOWLEDGE_BASE_CN PingchatChatInfoDomainInner = "knowledge-base-cn"
	PINGCHATCHATINFODOMAININNER_KB                PingchatChatInfoDomainInner = "kb"
)

// All allowed values of PingchatChatInfoDomainInner enum
var AllowedPingchatChatInfoDomainInnerEnumValues = []PingchatChatInfoDomainInner{
	"tidb",
	"tidbcloud",
	"asktug",
	"blog",
	"community",
	"knowledge-base-cn",
	"kb",
}

func (v *PingchatChatInfoDomainInner) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PingchatChatInfoDomainInner(value)
	for _, existing := range AllowedPingchatChatInfoDomainInnerEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PingchatChatInfoDomainInner", value)
}

// NewPingchatChatInfoDomainInnerFromValue returns a pointer to a valid PingchatChatInfoDomainInner
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPingchatChatInfoDomainInnerFromValue(v string) (*PingchatChatInfoDomainInner, error) {
	ev := PingchatChatInfoDomainInner(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PingchatChatInfoDomainInner: valid values are %v", v, AllowedPingchatChatInfoDomainInnerEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PingchatChatInfoDomainInner) IsValid() bool {
	for _, existing := range AllowedPingchatChatInfoDomainInnerEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to pingchat_ChatInfo_domain_inner value
func (v PingchatChatInfoDomainInner) Ptr() *PingchatChatInfoDomainInner {
	return &v
}

type NullablePingchatChatInfoDomainInner struct {
	value *PingchatChatInfoDomainInner
	isSet bool
}

func (v NullablePingchatChatInfoDomainInner) Get() *PingchatChatInfoDomainInner {
	return v.value
}

func (v *NullablePingchatChatInfoDomainInner) Set(val *PingchatChatInfoDomainInner) {
	v.value = val
	v.isSet = true
}

func (v NullablePingchatChatInfoDomainInner) IsSet() bool {
	return v.isSet
}

func (v *NullablePingchatChatInfoDomainInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePingchatChatInfoDomainInner(val *PingchatChatInfoDomainInner) *NullablePingchatChatInfoDomainInner {
	return &NullablePingchatChatInfoDomainInner{value: val, isSet: true}
}

func (v NullablePingchatChatInfoDomainInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePingchatChatInfoDomainInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
