// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ImportStateEnum  - PREPARING: The import is preparing.
//   - IMPORTING: The import is importing.
//   - COMPLETED: The import is completed.
//   - FAILED: The import is failed.
//   - CANCELING: The import is canceling.
//   - CANCELED: The import is canceled.
//
// swagger:model ImportState.Enum
type ImportStateEnum string

func NewImportStateEnum(value ImportStateEnum) *ImportStateEnum {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ImportStateEnum.
func (m ImportStateEnum) Pointer() *ImportStateEnum {
	return &m
}

const (

	// ImportStateEnumPREPARING captures enum value "PREPARING"
	ImportStateEnumPREPARING ImportStateEnum = "PREPARING"

	// ImportStateEnumIMPORTING captures enum value "IMPORTING"
	ImportStateEnumIMPORTING ImportStateEnum = "IMPORTING"

	// ImportStateEnumCOMPLETED captures enum value "COMPLETED"
	ImportStateEnumCOMPLETED ImportStateEnum = "COMPLETED"

	// ImportStateEnumFAILED captures enum value "FAILED"
	ImportStateEnumFAILED ImportStateEnum = "FAILED"

	// ImportStateEnumCANCELING captures enum value "CANCELING"
	ImportStateEnumCANCELING ImportStateEnum = "CANCELING"

	// ImportStateEnumCANCELED captures enum value "CANCELED"
	ImportStateEnumCANCELED ImportStateEnum = "CANCELED"
)

// for schema
var importStateEnumEnum []interface{}

func init() {
	var res []ImportStateEnum
	if err := json.Unmarshal([]byte(`["PREPARING","IMPORTING","COMPLETED","FAILED","CANCELING","CANCELED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		importStateEnumEnum = append(importStateEnumEnum, v)
	}
}

func (m ImportStateEnum) validateImportStateEnumEnum(path, location string, value ImportStateEnum) error {
	if err := validate.EnumCase(path, location, value, importStateEnumEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this import state enum
func (m ImportStateEnum) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateImportStateEnumEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this import state enum based on context it is used
func (m ImportStateEnum) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
