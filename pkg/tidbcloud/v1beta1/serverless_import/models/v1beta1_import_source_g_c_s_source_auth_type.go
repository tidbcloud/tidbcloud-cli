// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1beta1ImportSourceGCSSourceAuthType  - ACCESS_UNSPECIFIED: The access method is unknown.
//   - CREDENTIALS: The access method is credentials.
//
// swagger:model v1beta1ImportSourceGCSSourceAuthType
type V1beta1ImportSourceGCSSourceAuthType string

func NewV1beta1ImportSourceGCSSourceAuthType(value V1beta1ImportSourceGCSSourceAuthType) *V1beta1ImportSourceGCSSourceAuthType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated V1beta1ImportSourceGCSSourceAuthType.
func (m V1beta1ImportSourceGCSSourceAuthType) Pointer() *V1beta1ImportSourceGCSSourceAuthType {
	return &m
}

const (

	// V1beta1ImportSourceGCSSourceAuthTypeCREDENTIALS captures enum value "CREDENTIALS"
	V1beta1ImportSourceGCSSourceAuthTypeCREDENTIALS V1beta1ImportSourceGCSSourceAuthType = "CREDENTIALS"
)

// for schema
var v1beta1ImportSourceGCSSourceAuthTypeEnum []interface{}

func init() {
	var res []V1beta1ImportSourceGCSSourceAuthType
	if err := json.Unmarshal([]byte(`["CREDENTIALS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1beta1ImportSourceGCSSourceAuthTypeEnum = append(v1beta1ImportSourceGCSSourceAuthTypeEnum, v)
	}
}

func (m V1beta1ImportSourceGCSSourceAuthType) validateV1beta1ImportSourceGCSSourceAuthTypeEnum(path, location string, value V1beta1ImportSourceGCSSourceAuthType) error {
	if err := validate.EnumCase(path, location, value, v1beta1ImportSourceGCSSourceAuthTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1beta1 import source g c s source auth type
func (m V1beta1ImportSourceGCSSourceAuthType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1beta1ImportSourceGCSSourceAuthTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1beta1 import source g c s source auth type based on context it is used
func (m V1beta1ImportSourceGCSSourceAuthType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
