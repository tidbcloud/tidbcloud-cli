// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ImportSourceTypeEnum - LOCAL: Local source.
//   - S3: S3 source.
//   - GCS: gcs source
//   - AZURE_BLOB: azure blob source
//
// swagger:model ImportSourceType.Enum
type ImportSourceTypeEnum string

func NewImportSourceTypeEnum(value ImportSourceTypeEnum) *ImportSourceTypeEnum {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ImportSourceTypeEnum.
func (m ImportSourceTypeEnum) Pointer() *ImportSourceTypeEnum {
	return &m
}

const (

	// ImportSourceTypeEnumLOCAL captures enum value "LOCAL"
	ImportSourceTypeEnumLOCAL ImportSourceTypeEnum = "LOCAL"

	// ImportSourceTypeEnumS3 captures enum value "S3"
	ImportSourceTypeEnumS3 ImportSourceTypeEnum = "S3"

	// ImportSourceTypeEnumGCS captures enum value "GCS"
	ImportSourceTypeEnumGCS ImportSourceTypeEnum = "GCS"

	// ImportSourceTypeEnumAZUREBLOB captures enum value "AZURE_BLOB"
	ImportSourceTypeEnumAZUREBLOB ImportSourceTypeEnum = "AZURE_BLOB"
)

// for schema
var importSourceTypeEnumEnum []interface{}

func init() {
	var res []ImportSourceTypeEnum
	if err := json.Unmarshal([]byte(`["LOCAL","S3","GCS","AZURE_BLOB"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		importSourceTypeEnumEnum = append(importSourceTypeEnumEnum, v)
	}
}

func (m ImportSourceTypeEnum) validateImportSourceTypeEnumEnum(path, location string, value ImportSourceTypeEnum) error {
	if err := validate.EnumCase(path, location, value, importSourceTypeEnumEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this import source type enum
func (m ImportSourceTypeEnum) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateImportSourceTypeEnumEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this import source type enum based on context it is used
func (m ImportSourceTypeEnum) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
