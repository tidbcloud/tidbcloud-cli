// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1beta1ImportStatus v1beta1 import status
//
// swagger:model v1beta1ImportStatus
type V1beta1ImportStatus string

func NewV1beta1ImportStatus(value V1beta1ImportStatus) *V1beta1ImportStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated V1beta1ImportStatus.
func (m V1beta1ImportStatus) Pointer() *V1beta1ImportStatus {
	return &m
}

const (

	// V1beta1ImportStatusPREPARING captures enum value "PREPARING"
	V1beta1ImportStatusPREPARING V1beta1ImportStatus = "PREPARING"

	// V1beta1ImportStatusIMPORTING captures enum value "IMPORTING"
	V1beta1ImportStatusIMPORTING V1beta1ImportStatus = "IMPORTING"

	// V1beta1ImportStatusCOMPLETED captures enum value "COMPLETED"
	V1beta1ImportStatusCOMPLETED V1beta1ImportStatus = "COMPLETED"

	// V1beta1ImportStatusFAILED captures enum value "FAILED"
	V1beta1ImportStatusFAILED V1beta1ImportStatus = "FAILED"

	// V1beta1ImportStatusCANCELING captures enum value "CANCELING"
	V1beta1ImportStatusCANCELING V1beta1ImportStatus = "CANCELING"

	// V1beta1ImportStatusCANCELED captures enum value "CANCELED"
	V1beta1ImportStatusCANCELED V1beta1ImportStatus = "CANCELED"
)

// for schema
var v1beta1ImportStatusEnum []interface{}

func init() {
	var res []V1beta1ImportStatus
	if err := json.Unmarshal([]byte(`["PREPARING","IMPORTING","COMPLETED","FAILED","CANCELING","CANCELED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1beta1ImportStatusEnum = append(v1beta1ImportStatusEnum, v)
	}
}

func (m V1beta1ImportStatus) validateV1beta1ImportStatusEnum(path, location string, value V1beta1ImportStatus) error {
	if err := validate.EnumCase(path, location, value, v1beta1ImportStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1beta1 import status
func (m V1beta1ImportStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1beta1ImportStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1beta1 import status based on context it is used
func (m V1beta1ImportStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
