// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ImportS3AuthTypeEnum  - ROLE_ARN: The access method is role arn.
//   - ACCESS_KEY: The access method is access key.
//
// swagger:model ImportS3AuthType.Enum
type ImportS3AuthTypeEnum string

func NewImportS3AuthTypeEnum(value ImportS3AuthTypeEnum) *ImportS3AuthTypeEnum {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ImportS3AuthTypeEnum.
func (m ImportS3AuthTypeEnum) Pointer() *ImportS3AuthTypeEnum {
	return &m
}

const (

	// ImportS3AuthTypeEnumROLEARN captures enum value "ROLE_ARN"
	ImportS3AuthTypeEnumROLEARN ImportS3AuthTypeEnum = "ROLE_ARN"

	// ImportS3AuthTypeEnumACCESSKEY captures enum value "ACCESS_KEY"
	ImportS3AuthTypeEnumACCESSKEY ImportS3AuthTypeEnum = "ACCESS_KEY"
)

// for schema
var importS3AuthTypeEnumEnum []interface{}

func init() {
	var res []ImportS3AuthTypeEnum
	if err := json.Unmarshal([]byte(`["ROLE_ARN","ACCESS_KEY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		importS3AuthTypeEnumEnum = append(importS3AuthTypeEnumEnum, v)
	}
}

func (m ImportS3AuthTypeEnum) validateImportS3AuthTypeEnumEnum(path, location string, value ImportS3AuthTypeEnum) error {
	if err := validate.EnumCase(path, location, value, importS3AuthTypeEnumEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this import s3 auth type enum
func (m ImportS3AuthTypeEnum) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateImportS3AuthTypeEnumEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this import s3 auth type enum based on context it is used
func (m ImportS3AuthTypeEnum) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
