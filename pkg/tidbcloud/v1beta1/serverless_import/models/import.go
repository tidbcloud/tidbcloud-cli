// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Import import
//
// swagger:model Import
type Import struct {

	// The ID of the cluster to import into.
	// Read Only: true
	ClusterID string `json:"clusterId,omitempty"`

	// The process in percent of the import job, but doesn't include the post-processing progress.
	// Read Only: true
	CompletePercent int64 `json:"completePercent,omitempty"`

	// The time the import was completed.
	// Read Only: true
	// Format: date-time
	CompleteTime *strfmt.DateTime `json:"completeTime,omitempty"`

	// The time the import was created.
	// Read Only: true
	// Format: date-time
	CreateTime strfmt.DateTime `json:"createTime,omitempty"`

	// The user who created the import.
	// Read Only: true
	CreatedBy string `json:"createdBy,omitempty"`

	// The creation details of the import.
	// Read Only: true
	CreationDetails *CreationDetails `json:"creationDetails,omitempty"`

	// The ID of the import.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The output message of the import.
	// Read Only: true
	Message string `json:"message,omitempty"`

	// The name of the import.
	// Read Only: true
	Name string `json:"name,omitempty"`

	// The state of the import.
	// Read Only: true
	State ImportStateEnum `json:"state,omitempty"`

	// The total size of the data imported.
	// Read Only: true
	TotalSize string `json:"totalSize,omitempty"`
}

// Validate validates this import
func (m *Import) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompleteTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Import) validateCompleteTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CompleteTime) { // not required
		return nil
	}

	if err := validate.FormatOf("completeTime", "body", "date-time", m.CompleteTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Import) validateCreateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("createTime", "body", "date-time", m.CreateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Import) validateCreationDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationDetails) { // not required
		return nil
	}

	if m.CreationDetails != nil {
		if err := m.CreationDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("creationDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("creationDetails")
			}
			return err
		}
	}

	return nil
}

func (m *Import) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	if err := m.State.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("state")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("state")
		}
		return err
	}

	return nil
}

// ContextValidate validate this import based on the context it is used
func (m *Import) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusterID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCompletePercent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCompleteTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreateTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreationDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotalSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Import) contextValidateClusterID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "clusterId", "body", string(m.ClusterID)); err != nil {
		return err
	}

	return nil
}

func (m *Import) contextValidateCompletePercent(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "completePercent", "body", int64(m.CompletePercent)); err != nil {
		return err
	}

	return nil
}

func (m *Import) contextValidateCompleteTime(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "completeTime", "body", m.CompleteTime); err != nil {
		return err
	}

	return nil
}

func (m *Import) contextValidateCreateTime(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "createTime", "body", strfmt.DateTime(m.CreateTime)); err != nil {
		return err
	}

	return nil
}

func (m *Import) contextValidateCreatedBy(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "createdBy", "body", string(m.CreatedBy)); err != nil {
		return err
	}

	return nil
}

func (m *Import) contextValidateCreationDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.CreationDetails != nil {

		if swag.IsZero(m.CreationDetails) { // not required
			return nil
		}

		if err := m.CreationDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("creationDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("creationDetails")
			}
			return err
		}
	}

	return nil
}

func (m *Import) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *Import) contextValidateMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "message", "body", string(m.Message)); err != nil {
		return err
	}

	return nil
}

func (m *Import) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

func (m *Import) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	if err := m.State.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("state")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("state")
		}
		return err
	}

	return nil
}

func (m *Import) contextValidateTotalSize(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "totalSize", "body", string(m.TotalSize)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Import) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Import) UnmarshalBinary(b []byte) error {
	var res Import
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
