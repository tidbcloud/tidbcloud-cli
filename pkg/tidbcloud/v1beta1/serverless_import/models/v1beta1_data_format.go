// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1beta1DataFormat v1beta1 data format
//
// swagger:model v1beta1DataFormat
type V1beta1DataFormat string

func NewV1beta1DataFormat(value V1beta1DataFormat) *V1beta1DataFormat {
	return &value
}

// Pointer returns a pointer to a freshly-allocated V1beta1DataFormat.
func (m V1beta1DataFormat) Pointer() *V1beta1DataFormat {
	return &m
}

const (

	// V1beta1DataFormatSQLFile captures enum value "SqlFile"
	V1beta1DataFormatSQLFile V1beta1DataFormat = "SqlFile"

	// V1beta1DataFormatAuroraSnapshot captures enum value "AuroraSnapshot"
	V1beta1DataFormatAuroraSnapshot V1beta1DataFormat = "AuroraSnapshot"

	// V1beta1DataFormatCSV captures enum value "CSV"
	V1beta1DataFormatCSV V1beta1DataFormat = "CSV"

	// V1beta1DataFormatParquet captures enum value "Parquet"
	V1beta1DataFormatParquet V1beta1DataFormat = "Parquet"
)

// for schema
var v1beta1DataFormatEnum []interface{}

func init() {
	var res []V1beta1DataFormat
	if err := json.Unmarshal([]byte(`["SqlFile","AuroraSnapshot","CSV","Parquet"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1beta1DataFormatEnum = append(v1beta1DataFormatEnum, v)
	}
}

func (m V1beta1DataFormat) validateV1beta1DataFormatEnum(path, location string, value V1beta1DataFormat) error {
	if err := validate.EnumCase(path, location, value, v1beta1DataFormatEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1beta1 data format
func (m V1beta1DataFormat) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1beta1DataFormatEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1beta1 data format based on context it is used
func (m V1beta1DataFormat) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
