// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ImportFileTypeEnum  - CSV: CSV type.
//   - SQL: SQL type.
//   - AURORA_SNAPSHOT: Aurora snapshot type.
//   - PARQUET: Parquet type.
//
// swagger:model ImportFileType.Enum
type ImportFileTypeEnum string

func NewImportFileTypeEnum(value ImportFileTypeEnum) *ImportFileTypeEnum {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ImportFileTypeEnum.
func (m ImportFileTypeEnum) Pointer() *ImportFileTypeEnum {
	return &m
}

const (

	// ImportFileTypeEnumCSV captures enum value "CSV"
	ImportFileTypeEnumCSV ImportFileTypeEnum = "CSV"

	// ImportFileTypeEnumSQL captures enum value "SQL"
	ImportFileTypeEnumSQL ImportFileTypeEnum = "SQL"

	// ImportFileTypeEnumAURORASNAPSHOT captures enum value "AURORA_SNAPSHOT"
	ImportFileTypeEnumAURORASNAPSHOT ImportFileTypeEnum = "AURORA_SNAPSHOT"

	// ImportFileTypeEnumPARQUET captures enum value "PARQUET"
	ImportFileTypeEnumPARQUET ImportFileTypeEnum = "PARQUET"
)

// for schema
var importFileTypeEnumEnum []interface{}

func init() {
	var res []ImportFileTypeEnum
	if err := json.Unmarshal([]byte(`["CSV","SQL","AURORA_SNAPSHOT","PARQUET"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		importFileTypeEnumEnum = append(importFileTypeEnumEnum, v)
	}
}

func (m ImportFileTypeEnum) validateImportFileTypeEnumEnum(path, location string, value ImportFileTypeEnum) error {
	if err := validate.EnumCase(path, location, value, importFileTypeEnumEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this import file type enum
func (m ImportFileTypeEnum) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateImportFileTypeEnumEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this import file type enum based on context it is used
func (m ImportFileTypeEnum) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
