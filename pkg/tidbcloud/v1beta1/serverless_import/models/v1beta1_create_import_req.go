// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1beta1CreateImportReq v1beta1 create import req
//
// swagger:model v1beta1CreateImportReq
type V1beta1CreateImportReq struct {

	// cluster Id
	// Required: true
	ClusterID *string `json:"clusterId"`

	// data format
	// Required: true
	DataFormat *V1beta1DataFormat `json:"dataFormat"`

	// Optional. The options of the import.
	ImportOptions *V1beta1ImportOptions `json:"importOptions,omitempty"`

	// Optional. The target of the import.
	Target *V1beta1ImportTarget `json:"target,omitempty"`

	// type
	// Required: true
	Type *CreateImportReqImportType `json:"type"`
}

// Validate validates this v1beta1 create import req
func (m *V1beta1CreateImportReq) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImportOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1beta1CreateImportReq) validateClusterID(formats strfmt.Registry) error {

	if err := validate.Required("clusterId", "body", m.ClusterID); err != nil {
		return err
	}

	return nil
}

func (m *V1beta1CreateImportReq) validateDataFormat(formats strfmt.Registry) error {

	if err := validate.Required("dataFormat", "body", m.DataFormat); err != nil {
		return err
	}

	if err := validate.Required("dataFormat", "body", m.DataFormat); err != nil {
		return err
	}

	if m.DataFormat != nil {
		if err := m.DataFormat.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataFormat")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dataFormat")
			}
			return err
		}
	}

	return nil
}

func (m *V1beta1CreateImportReq) validateImportOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.ImportOptions) { // not required
		return nil
	}

	if m.ImportOptions != nil {
		if err := m.ImportOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("importOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("importOptions")
			}
			return err
		}
	}

	return nil
}

func (m *V1beta1CreateImportReq) validateTarget(formats strfmt.Registry) error {
	if swag.IsZero(m.Target) { // not required
		return nil
	}

	if m.Target != nil {
		if err := m.Target.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("target")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("target")
			}
			return err
		}
	}

	return nil
}

func (m *V1beta1CreateImportReq) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1beta1 create import req based on the context it is used
func (m *V1beta1CreateImportReq) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDataFormat(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateImportOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTarget(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1beta1CreateImportReq) contextValidateDataFormat(ctx context.Context, formats strfmt.Registry) error {

	if m.DataFormat != nil {

		if err := m.DataFormat.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataFormat")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dataFormat")
			}
			return err
		}
	}

	return nil
}

func (m *V1beta1CreateImportReq) contextValidateImportOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.ImportOptions != nil {

		if swag.IsZero(m.ImportOptions) { // not required
			return nil
		}

		if err := m.ImportOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("importOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("importOptions")
			}
			return err
		}
	}

	return nil
}

func (m *V1beta1CreateImportReq) contextValidateTarget(ctx context.Context, formats strfmt.Registry) error {

	if m.Target != nil {

		if swag.IsZero(m.Target) { // not required
			return nil
		}

		if err := m.Target.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("target")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("target")
			}
			return err
		}
	}

	return nil
}

func (m *V1beta1CreateImportReq) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {

		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1beta1CreateImportReq) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1beta1CreateImportReq) UnmarshalBinary(b []byte) error {
	var res V1beta1CreateImportReq
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
