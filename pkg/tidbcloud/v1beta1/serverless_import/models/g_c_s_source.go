// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GCSSource g c s source
//
// swagger:model GCSSource
type GCSSource struct {

	// The auth method of the import source.
	// Required: true
	AuthType *ImportGcsAuthTypeEnum `json:"authType"`

	// The service account key
	ServiceAccountKey string `json:"serviceAccountKey,omitempty"`

	// The GCS URI of the import source.
	// Required: true
	URI *string `json:"uri"`
}

// Validate validates this g c s source
func (m *GCSSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURI(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GCSSource) validateAuthType(formats strfmt.Registry) error {

	if err := validate.Required("authType", "body", m.AuthType); err != nil {
		return err
	}

	if err := validate.Required("authType", "body", m.AuthType); err != nil {
		return err
	}

	if m.AuthType != nil {
		if err := m.AuthType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("authType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("authType")
			}
			return err
		}
	}

	return nil
}

func (m *GCSSource) validateURI(formats strfmt.Registry) error {

	if err := validate.Required("uri", "body", m.URI); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this g c s source based on the context it is used
func (m *GCSSource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuthType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GCSSource) contextValidateAuthType(ctx context.Context, formats strfmt.Registry) error {

	if m.AuthType != nil {

		if err := m.AuthType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("authType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("authType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GCSSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GCSSource) UnmarshalBinary(b []byte) error {
	var res GCSSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
