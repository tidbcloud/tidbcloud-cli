// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1beta1LocalSource v1beta1 local source
//
// swagger:model v1beta1LocalSource
type V1beta1LocalSource struct {

	// The file name of import source file.
	// Read Only: true
	FileName string `json:"fileName,omitempty"`

	// The target database of import.
	// Required: true
	TargetDatabase *string `json:"targetDatabase"`

	// The target table of import.
	// Required: true
	TargetTable *string `json:"targetTable"`

	// The upload id of import source file.
	// Required: true
	UploadID *string `json:"uploadId"`
}

// Validate validates this v1beta1 local source
func (m *V1beta1LocalSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTargetDatabase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetTable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUploadID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1beta1LocalSource) validateTargetDatabase(formats strfmt.Registry) error {

	if err := validate.Required("targetDatabase", "body", m.TargetDatabase); err != nil {
		return err
	}

	return nil
}

func (m *V1beta1LocalSource) validateTargetTable(formats strfmt.Registry) error {

	if err := validate.Required("targetTable", "body", m.TargetTable); err != nil {
		return err
	}

	return nil
}

func (m *V1beta1LocalSource) validateUploadID(formats strfmt.Registry) error {

	if err := validate.Required("uploadId", "body", m.UploadID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this v1beta1 local source based on the context it is used
func (m *V1beta1LocalSource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFileName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1beta1LocalSource) contextValidateFileName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "fileName", "body", string(m.FileName)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1beta1LocalSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1beta1LocalSource) UnmarshalBinary(b []byte) error {
	var res V1beta1LocalSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
