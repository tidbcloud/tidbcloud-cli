// Code generated by go-swagger; DO NOT EDIT.

package import_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"tidbcloud-cli/pkg/tidbcloud/v1beta1/serverless_import/models"
)

// ImportServiceCreateImportReader is a Reader for the ImportServiceCreateImport structure.
type ImportServiceCreateImportReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ImportServiceCreateImportReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewImportServiceCreateImportOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewImportServiceCreateImportDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewImportServiceCreateImportOK creates a ImportServiceCreateImportOK with default headers values
func NewImportServiceCreateImportOK() *ImportServiceCreateImportOK {
	return &ImportServiceCreateImportOK{}
}

/*
ImportServiceCreateImportOK describes a response with status code 200, with default header values.

A successful response.
*/
type ImportServiceCreateImportOK struct {
	Payload *models.V1beta1Import
}

// IsSuccess returns true when this import service create import o k response has a 2xx status code
func (o *ImportServiceCreateImportOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this import service create import o k response has a 3xx status code
func (o *ImportServiceCreateImportOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this import service create import o k response has a 4xx status code
func (o *ImportServiceCreateImportOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this import service create import o k response has a 5xx status code
func (o *ImportServiceCreateImportOK) IsServerError() bool {
	return false
}

// IsCode returns true when this import service create import o k response a status code equal to that given
func (o *ImportServiceCreateImportOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the import service create import o k response
func (o *ImportServiceCreateImportOK) Code() int {
	return 200
}

func (o *ImportServiceCreateImportOK) Error() string {
	return fmt.Sprintf("[POST /v1beta1/clusters/{clusterId}/imports][%d] importServiceCreateImportOK  %+v", 200, o.Payload)
}

func (o *ImportServiceCreateImportOK) String() string {
	return fmt.Sprintf("[POST /v1beta1/clusters/{clusterId}/imports][%d] importServiceCreateImportOK  %+v", 200, o.Payload)
}

func (o *ImportServiceCreateImportOK) GetPayload() *models.V1beta1Import {
	return o.Payload
}

func (o *ImportServiceCreateImportOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V1beta1Import)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImportServiceCreateImportDefault creates a ImportServiceCreateImportDefault with default headers values
func NewImportServiceCreateImportDefault(code int) *ImportServiceCreateImportDefault {
	return &ImportServiceCreateImportDefault{
		_statusCode: code,
	}
}

/*
ImportServiceCreateImportDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type ImportServiceCreateImportDefault struct {
	_statusCode int

	Payload *models.RPCStatus
}

// IsSuccess returns true when this import service create import default response has a 2xx status code
func (o *ImportServiceCreateImportDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this import service create import default response has a 3xx status code
func (o *ImportServiceCreateImportDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this import service create import default response has a 4xx status code
func (o *ImportServiceCreateImportDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this import service create import default response has a 5xx status code
func (o *ImportServiceCreateImportDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this import service create import default response a status code equal to that given
func (o *ImportServiceCreateImportDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the import service create import default response
func (o *ImportServiceCreateImportDefault) Code() int {
	return o._statusCode
}

func (o *ImportServiceCreateImportDefault) Error() string {
	return fmt.Sprintf("[POST /v1beta1/clusters/{clusterId}/imports][%d] ImportService_CreateImport default  %+v", o._statusCode, o.Payload)
}

func (o *ImportServiceCreateImportDefault) String() string {
	return fmt.Sprintf("[POST /v1beta1/clusters/{clusterId}/imports][%d] ImportService_CreateImport default  %+v", o._statusCode, o.Payload)
}

func (o *ImportServiceCreateImportDefault) GetPayload() *models.RPCStatus {
	return o.Payload
}

func (o *ImportServiceCreateImportDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RPCStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
ImportServiceCreateImportBody import service create import body
swagger:model ImportServiceCreateImportBody
*/
type ImportServiceCreateImportBody struct {

	// The options of the import.
	// Required: true
	ImportOptions *models.V1beta1ImportOptions `json:"importOptions"`

	// The source of the import.
	// Required: true
	Source *models.V1beta1ImportSource `json:"source"`
}

// Validate validates this import service create import body
func (o *ImportServiceCreateImportBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateImportOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ImportServiceCreateImportBody) validateImportOptions(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"importOptions", "body", o.ImportOptions); err != nil {
		return err
	}

	if o.ImportOptions != nil {
		if err := o.ImportOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "importOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "importOptions")
			}
			return err
		}
	}

	return nil
}

func (o *ImportServiceCreateImportBody) validateSource(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"source", "body", o.Source); err != nil {
		return err
	}

	if o.Source != nil {
		if err := o.Source.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "source")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this import service create import body based on the context it is used
func (o *ImportServiceCreateImportBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateImportOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ImportServiceCreateImportBody) contextValidateImportOptions(ctx context.Context, formats strfmt.Registry) error {

	if o.ImportOptions != nil {

		if err := o.ImportOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "importOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "importOptions")
			}
			return err
		}
	}

	return nil
}

func (o *ImportServiceCreateImportBody) contextValidateSource(ctx context.Context, formats strfmt.Registry) error {

	if o.Source != nil {

		if err := o.Source.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "source")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ImportServiceCreateImportBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ImportServiceCreateImportBody) UnmarshalBinary(b []byte) error {
	var res ImportServiceCreateImportBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
