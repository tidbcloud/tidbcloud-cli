// Code generated by go-swagger; DO NOT EDIT.

package branch_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewBranchServiceGetBranchParams creates a new BranchServiceGetBranchParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewBranchServiceGetBranchParams() *BranchServiceGetBranchParams {
	return &BranchServiceGetBranchParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewBranchServiceGetBranchParamsWithTimeout creates a new BranchServiceGetBranchParams object
// with the ability to set a timeout on a request.
func NewBranchServiceGetBranchParamsWithTimeout(timeout time.Duration) *BranchServiceGetBranchParams {
	return &BranchServiceGetBranchParams{
		timeout: timeout,
	}
}

// NewBranchServiceGetBranchParamsWithContext creates a new BranchServiceGetBranchParams object
// with the ability to set a context for a request.
func NewBranchServiceGetBranchParamsWithContext(ctx context.Context) *BranchServiceGetBranchParams {
	return &BranchServiceGetBranchParams{
		Context: ctx,
	}
}

// NewBranchServiceGetBranchParamsWithHTTPClient creates a new BranchServiceGetBranchParams object
// with the ability to set a custom HTTPClient for a request.
func NewBranchServiceGetBranchParamsWithHTTPClient(client *http.Client) *BranchServiceGetBranchParams {
	return &BranchServiceGetBranchParams{
		HTTPClient: client,
	}
}

/*
BranchServiceGetBranchParams contains all the parameters to send to the API endpoint

	for the branch service get branch operation.

	Typically these are written to a http.Request.
*/
type BranchServiceGetBranchParams struct {

	/* BranchID.

	   Required. The branch ID
	*/
	BranchID string

	/* ClusterID.

	   Required. The cluster ID of the branch
	*/
	ClusterID string

	/* View.

	    Optional. The view of the branch to return. Defaults to FULL

	- BRANCH_VIEW_UNSPECIFIED: BRANCH_VIEW_UNSPECIFIED Not specified, equivalent to BASIC.
	- BASIC: Basic response contains basic information for a branch.
	- FULL: FULL response contains all detailed information for a branch.
	*/
	View *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the branch service get branch params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *BranchServiceGetBranchParams) WithDefaults() *BranchServiceGetBranchParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the branch service get branch params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *BranchServiceGetBranchParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the branch service get branch params
func (o *BranchServiceGetBranchParams) WithTimeout(timeout time.Duration) *BranchServiceGetBranchParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the branch service get branch params
func (o *BranchServiceGetBranchParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the branch service get branch params
func (o *BranchServiceGetBranchParams) WithContext(ctx context.Context) *BranchServiceGetBranchParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the branch service get branch params
func (o *BranchServiceGetBranchParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the branch service get branch params
func (o *BranchServiceGetBranchParams) WithHTTPClient(client *http.Client) *BranchServiceGetBranchParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the branch service get branch params
func (o *BranchServiceGetBranchParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBranchID adds the branchID to the branch service get branch params
func (o *BranchServiceGetBranchParams) WithBranchID(branchID string) *BranchServiceGetBranchParams {
	o.SetBranchID(branchID)
	return o
}

// SetBranchID adds the branchId to the branch service get branch params
func (o *BranchServiceGetBranchParams) SetBranchID(branchID string) {
	o.BranchID = branchID
}

// WithClusterID adds the clusterID to the branch service get branch params
func (o *BranchServiceGetBranchParams) WithClusterID(clusterID string) *BranchServiceGetBranchParams {
	o.SetClusterID(clusterID)
	return o
}

// SetClusterID adds the clusterId to the branch service get branch params
func (o *BranchServiceGetBranchParams) SetClusterID(clusterID string) {
	o.ClusterID = clusterID
}

// WithView adds the view to the branch service get branch params
func (o *BranchServiceGetBranchParams) WithView(view *string) *BranchServiceGetBranchParams {
	o.SetView(view)
	return o
}

// SetView adds the view to the branch service get branch params
func (o *BranchServiceGetBranchParams) SetView(view *string) {
	o.View = view
}

// WriteToRequest writes these params to a swagger request
func (o *BranchServiceGetBranchParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param branchId
	if err := r.SetPathParam("branchId", o.BranchID); err != nil {
		return err
	}

	// path param clusterId
	if err := r.SetPathParam("clusterId", o.ClusterID); err != nil {
		return err
	}

	if o.View != nil {

		// query param view
		var qrView string

		if o.View != nil {
			qrView = *o.View
		}
		qView := qrView
		if qView != "" {

			if err := r.SetQueryParam("view", qView); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
