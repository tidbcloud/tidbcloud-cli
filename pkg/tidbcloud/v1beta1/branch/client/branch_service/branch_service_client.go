// Code generated by go-swagger; DO NOT EDIT.

package branch_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new branch service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for branch service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	BranchServiceCreateBranch(params *BranchServiceCreateBranchParams, opts ...ClientOption) (*BranchServiceCreateBranchOK, error)

	BranchServiceDeleteBranch(params *BranchServiceDeleteBranchParams, opts ...ClientOption) (*BranchServiceDeleteBranchOK, error)

	BranchServiceGetBranch(params *BranchServiceGetBranchParams, opts ...ClientOption) (*BranchServiceGetBranchOK, error)

	BranchServiceListBranches(params *BranchServiceListBranchesParams, opts ...ClientOption) (*BranchServiceListBranchesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
BranchServiceCreateBranch creates a branch
*/
func (a *Client) BranchServiceCreateBranch(params *BranchServiceCreateBranchParams, opts ...ClientOption) (*BranchServiceCreateBranchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBranchServiceCreateBranchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BranchService_CreateBranch",
		Method:             "POST",
		PathPattern:        "/v1beta1/clusters/{clusterId}/branches",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BranchServiceCreateBranchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BranchServiceCreateBranchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*BranchServiceCreateBranchDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
BranchServiceDeleteBranch deletes a branch
*/
func (a *Client) BranchServiceDeleteBranch(params *BranchServiceDeleteBranchParams, opts ...ClientOption) (*BranchServiceDeleteBranchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBranchServiceDeleteBranchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BranchService_DeleteBranch",
		Method:             "DELETE",
		PathPattern:        "/v1beta1/clusters/{clusterId}/branches/{branchId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BranchServiceDeleteBranchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BranchServiceDeleteBranchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*BranchServiceDeleteBranchDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
BranchServiceGetBranch gets information about a branch
*/
func (a *Client) BranchServiceGetBranch(params *BranchServiceGetBranchParams, opts ...ClientOption) (*BranchServiceGetBranchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBranchServiceGetBranchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BranchService_GetBranch",
		Method:             "GET",
		PathPattern:        "/v1beta1/clusters/{clusterId}/branches/{branchId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BranchServiceGetBranchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BranchServiceGetBranchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*BranchServiceGetBranchDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
BranchServiceListBranches lists information about branches
*/
func (a *Client) BranchServiceListBranches(params *BranchServiceListBranchesParams, opts ...ClientOption) (*BranchServiceListBranchesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBranchServiceListBranchesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "BranchService_ListBranches",
		Method:             "GET",
		PathPattern:        "/v1beta1/clusters/{clusterId}/branches",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BranchServiceListBranchesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BranchServiceListBranchesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*BranchServiceListBranchesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
