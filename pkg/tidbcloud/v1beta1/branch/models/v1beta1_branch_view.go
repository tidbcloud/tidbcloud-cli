// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1beta1BranchView View on branch. Pass this enum to control which subsets of fields to get.
//
//   - BRANCH_VIEW_UNSPECIFIED: BRANCH_VIEW_UNSPECIFIED Not specified, equivalent to BASIC.
//   - BASIC: Basic response contains basic information for a branch.
//   - FULL: FULL response contains all detailed information for a branch.
//
// swagger:model v1beta1BranchView
type V1beta1BranchView string

func NewV1beta1BranchView(value V1beta1BranchView) *V1beta1BranchView {
	return &value
}

// Pointer returns a pointer to a freshly-allocated V1beta1BranchView.
func (m V1beta1BranchView) Pointer() *V1beta1BranchView {
	return &m
}

const (

	// V1beta1BranchViewBASIC captures enum value "BASIC"
	V1beta1BranchViewBASIC V1beta1BranchView = "BASIC"

	// V1beta1BranchViewFULL captures enum value "FULL"
	V1beta1BranchViewFULL V1beta1BranchView = "FULL"
)

// for schema
var v1beta1BranchViewEnum []interface{}

func init() {
	var res []V1beta1BranchView
	if err := json.Unmarshal([]byte(`["BASIC","FULL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1beta1BranchViewEnum = append(v1beta1BranchViewEnum, v)
	}
}

func (m V1beta1BranchView) validateV1beta1BranchViewEnum(path, location string, value V1beta1BranchView) error {
	if err := validate.EnumCase(path, location, value, v1beta1BranchViewEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1beta1 branch view
func (m V1beta1BranchView) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1beta1BranchViewEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1beta1 branch view based on context it is used
func (m V1beta1BranchView) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
