// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// BranchState Output Only. Branch State.
//
//   - CREATING: The branch is being created.
//   - ACTIVE: The branch is active and running.
//   - DELETED: The branch is being deleted.
//   - MAINTENANCE: The branch is under maintenance.
//
// swagger:model Branch.State
type BranchState string

func NewBranchState(value BranchState) *BranchState {
	return &value
}

// Pointer returns a pointer to a freshly-allocated BranchState.
func (m BranchState) Pointer() *BranchState {
	return &m
}

const (

	// BranchStateCREATING captures enum value "CREATING"
	BranchStateCREATING BranchState = "CREATING"

	// BranchStateACTIVE captures enum value "ACTIVE"
	BranchStateACTIVE BranchState = "ACTIVE"

	// BranchStateDELETED captures enum value "DELETED"
	BranchStateDELETED BranchState = "DELETED"

	// BranchStateMAINTENANCE captures enum value "MAINTENANCE"
	BranchStateMAINTENANCE BranchState = "MAINTENANCE"
)

// for schema
var branchStateEnum []interface{}

func init() {
	var res []BranchState
	if err := json.Unmarshal([]byte(`["CREATING","ACTIVE","DELETED","MAINTENANCE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		branchStateEnum = append(branchStateEnum, v)
	}
}

func (m BranchState) validateBranchStateEnum(path, location string, value BranchState) error {
	if err := validate.EnumCase(path, location, value, branchStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this branch state
func (m BranchState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateBranchStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this branch state based on context it is used
func (m BranchState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
