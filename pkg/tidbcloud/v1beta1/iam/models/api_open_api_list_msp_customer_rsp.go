// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// APIOpenAPIListMspCustomerRsp api open Api list msp customer rsp
//
// swagger:model api.OpenApiListMspCustomerRsp
type APIOpenAPIListMspCustomerRsp struct {

	// The list of matching MSP Customers.
	MspCustomers []*APIOpenAPIMspCustomer `json:"mspCustomers"`

	// `next_page_token` can be sent in a subsequent call to fetch more results
	// Example: 498c7f44-656f-4944-b455-0695faa5d4f9
	NextPageToken string `json:"nextPageToken,omitempty"`
}

// Validate validates this api open Api list msp customer rsp
func (m *APIOpenAPIListMspCustomerRsp) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMspCustomers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIOpenAPIListMspCustomerRsp) validateMspCustomers(formats strfmt.Registry) error {
	if swag.IsZero(m.MspCustomers) { // not required
		return nil
	}

	for i := 0; i < len(m.MspCustomers); i++ {
		if swag.IsZero(m.MspCustomers[i]) { // not required
			continue
		}

		if m.MspCustomers[i] != nil {
			if err := m.MspCustomers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mspCustomers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("mspCustomers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this api open Api list msp customer rsp based on the context it is used
func (m *APIOpenAPIListMspCustomerRsp) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMspCustomers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *APIOpenAPIListMspCustomerRsp) contextValidateMspCustomers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MspCustomers); i++ {

		if m.MspCustomers[i] != nil {

			if swag.IsZero(m.MspCustomers[i]) { // not required
				return nil
			}

			if err := m.MspCustomers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mspCustomers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("mspCustomers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *APIOpenAPIListMspCustomerRsp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *APIOpenAPIListMspCustomerRsp) UnmarshalBinary(b []byte) error {
	var res APIOpenAPIListMspCustomerRsp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
