/*
Acccount OPENAPI

This is account open api.

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iam

import (
	"encoding/json"
)

// checks if the ApiListProjectsRsp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiListProjectsRsp{}

// ApiListProjectsRsp struct for ApiListProjectsRsp
type ApiListProjectsRsp struct {
	// `next_page_token` can be sent in a subsequent call to fetch more results
	NextPageToken        *string      `json:"nextPageToken,omitempty"`
	Projects             []ApiProject `json:"projects,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ApiListProjectsRsp ApiListProjectsRsp

// NewApiListProjectsRsp instantiates a new ApiListProjectsRsp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiListProjectsRsp() *ApiListProjectsRsp {
	this := ApiListProjectsRsp{}
	return &this
}

// NewApiListProjectsRspWithDefaults instantiates a new ApiListProjectsRsp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiListProjectsRspWithDefaults() *ApiListProjectsRsp {
	this := ApiListProjectsRsp{}
	return &this
}

// GetNextPageToken returns the NextPageToken field value if set, zero value otherwise.
func (o *ApiListProjectsRsp) GetNextPageToken() string {
	if o == nil || IsNil(o.NextPageToken) {
		var ret string
		return ret
	}
	return *o.NextPageToken
}

// GetNextPageTokenOk returns a tuple with the NextPageToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiListProjectsRsp) GetNextPageTokenOk() (*string, bool) {
	if o == nil || IsNil(o.NextPageToken) {
		return nil, false
	}
	return o.NextPageToken, true
}

// HasNextPageToken returns a boolean if a field has been set.
func (o *ApiListProjectsRsp) HasNextPageToken() bool {
	if o != nil && !IsNil(o.NextPageToken) {
		return true
	}

	return false
}

// SetNextPageToken gets a reference to the given string and assigns it to the NextPageToken field.
func (o *ApiListProjectsRsp) SetNextPageToken(v string) {
	o.NextPageToken = &v
}

// GetProjects returns the Projects field value if set, zero value otherwise.
func (o *ApiListProjectsRsp) GetProjects() []ApiProject {
	if o == nil || IsNil(o.Projects) {
		var ret []ApiProject
		return ret
	}
	return o.Projects
}

// GetProjectsOk returns a tuple with the Projects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiListProjectsRsp) GetProjectsOk() ([]ApiProject, bool) {
	if o == nil || IsNil(o.Projects) {
		return nil, false
	}
	return o.Projects, true
}

// HasProjects returns a boolean if a field has been set.
func (o *ApiListProjectsRsp) HasProjects() bool {
	if o != nil && !IsNil(o.Projects) {
		return true
	}

	return false
}

// SetProjects gets a reference to the given []ApiProject and assigns it to the Projects field.
func (o *ApiListProjectsRsp) SetProjects(v []ApiProject) {
	o.Projects = v
}

func (o ApiListProjectsRsp) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiListProjectsRsp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NextPageToken) {
		toSerialize["nextPageToken"] = o.NextPageToken
	}
	if !IsNil(o.Projects) {
		toSerialize["projects"] = o.Projects
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ApiListProjectsRsp) UnmarshalJSON(data []byte) (err error) {
	varApiListProjectsRsp := _ApiListProjectsRsp{}

	err = json.Unmarshal(data, &varApiListProjectsRsp)

	if err != nil {
		return err
	}

	*o = ApiListProjectsRsp(varApiListProjectsRsp)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "nextPageToken")
		delete(additionalProperties, "projects")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApiListProjectsRsp struct {
	value *ApiListProjectsRsp
	isSet bool
}

func (v NullableApiListProjectsRsp) Get() *ApiListProjectsRsp {
	return v.value
}

func (v *NullableApiListProjectsRsp) Set(val *ApiListProjectsRsp) {
	v.value = val
	v.isSet = true
}

func (v NullableApiListProjectsRsp) IsSet() bool {
	return v.isSet
}

func (v *NullableApiListProjectsRsp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiListProjectsRsp(val *ApiListProjectsRsp) *NullableApiListProjectsRsp {
	return &NullableApiListProjectsRsp{value: val, isSet: true}
}

func (v NullableApiListProjectsRsp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiListProjectsRsp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
