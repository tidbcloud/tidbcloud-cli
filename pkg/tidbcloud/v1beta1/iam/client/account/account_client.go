// Code generated by go-swagger; DO NOT EDIT.

package account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new account API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for account API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteV1beta1SqluserUserName(params *DeleteV1beta1SqluserUserNameParams, opts ...ClientOption) (*DeleteV1beta1SqluserUserNameOK, error)

	GetMspCustomers(params *GetMspCustomersParams, opts ...ClientOption) (*GetMspCustomersOK, error)

	GetMspCustomersCustomerOrgID(params *GetMspCustomersCustomerOrgIDParams, opts ...ClientOption) (*GetMspCustomersCustomerOrgIDOK, error)

	GetV1beta1Projects(params *GetV1beta1ProjectsParams, opts ...ClientOption) (*GetV1beta1ProjectsOK, error)

	GetV1beta1Sqluser(params *GetV1beta1SqluserParams, opts ...ClientOption) (*GetV1beta1SqluserOK, error)

	GetV1beta1SqluserUserName(params *GetV1beta1SqluserUserNameParams, opts ...ClientOption) (*GetV1beta1SqluserUserNameOK, error)

	PatchV1beta1SqluserUserName(params *PatchV1beta1SqluserUserNameParams, opts ...ClientOption) (*PatchV1beta1SqluserUserNameOK, error)

	PostCustomerSignupURL(params *PostCustomerSignupURLParams, opts ...ClientOption) (*PostCustomerSignupURLOK, error)

	PostV1beta1Sqluser(params *PostV1beta1SqluserParams, opts ...ClientOption) (*PostV1beta1SqluserOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteV1beta1SqluserUserName gets one sqluser

This endpoint delete the sql user by user name.
*/
func (a *Client) DeleteV1beta1SqluserUserName(params *DeleteV1beta1SqluserUserNameParams, opts ...ClientOption) (*DeleteV1beta1SqluserUserNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1beta1SqluserUserNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteV1beta1SqluserUserName",
		Method:             "DELETE",
		PathPattern:        "/v1beta1/sqluser/{userName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteV1beta1SqluserUserNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1beta1SqluserUserNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteV1beta1SqluserUserName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetMspCustomers gets a list of m s p customers

This endpoint returns a list of MSP customers.
*/
func (a *Client) GetMspCustomers(params *GetMspCustomersParams, opts ...ClientOption) (*GetMspCustomersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMspCustomersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetMspCustomers",
		Method:             "GET",
		PathPattern:        "/mspCustomers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMspCustomersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMspCustomersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetMspCustomers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetMspCustomersCustomerOrgID retrieves a single m s p customer

This endpoint retrieves a single MSP customer by their customer org ID.
*/
func (a *Client) GetMspCustomersCustomerOrgID(params *GetMspCustomersCustomerOrgIDParams, opts ...ClientOption) (*GetMspCustomersCustomerOrgIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMspCustomersCustomerOrgIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetMspCustomersCustomerOrgID",
		Method:             "GET",
		PathPattern:        "/mspCustomers/{customerOrgId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMspCustomersCustomerOrgIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMspCustomersCustomerOrgIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetMspCustomersCustomerOrgID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1beta1Projects gets list of org projects

This endpoint returns a list of org projects.
*/
func (a *Client) GetV1beta1Projects(params *GetV1beta1ProjectsParams, opts ...ClientOption) (*GetV1beta1ProjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1beta1ProjectsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1beta1Projects",
		Method:             "GET",
		PathPattern:        "/v1beta1/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1beta1ProjectsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1beta1ProjectsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1beta1Projects: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1beta1Sqluser gets one sqluser

This endpoint retrieves all sqlusers  of the cluster.
*/
func (a *Client) GetV1beta1Sqluser(params *GetV1beta1SqluserParams, opts ...ClientOption) (*GetV1beta1SqluserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1beta1SqluserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1beta1Sqluser",
		Method:             "GET",
		PathPattern:        "/v1beta1/sqluser",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1beta1SqluserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1beta1SqluserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1beta1Sqluser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1beta1SqluserUserName queries one sql user

This endpoint retrieves a sql user by username.
*/
func (a *Client) GetV1beta1SqluserUserName(params *GetV1beta1SqluserUserNameParams, opts ...ClientOption) (*GetV1beta1SqluserUserNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1beta1SqluserUserNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetV1beta1SqluserUserName",
		Method:             "GET",
		PathPattern:        "/v1beta1/sqluser/{userName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetV1beta1SqluserUserNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1beta1SqluserUserNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetV1beta1SqluserUserName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1beta1SqluserUserName updates one sql user

This endpoint update one sql user.
*/
func (a *Client) PatchV1beta1SqluserUserName(params *PatchV1beta1SqluserUserNameParams, opts ...ClientOption) (*PatchV1beta1SqluserUserNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1beta1SqluserUserNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchV1beta1SqluserUserName",
		Method:             "PATCH",
		PathPattern:        "/v1beta1/sqluser/{userName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchV1beta1SqluserUserNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1beta1SqluserUserNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchV1beta1SqluserUserName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostCustomerSignupURL creates a new signup URL for an m s p customer

This endpoint creates a new signup URL for an MSP customer.
*/
func (a *Client) PostCustomerSignupURL(params *PostCustomerSignupURLParams, opts ...ClientOption) (*PostCustomerSignupURLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostCustomerSignupURLParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostCustomerSignupURL",
		Method:             "POST",
		PathPattern:        "/customerSignupUrl",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostCustomerSignupURLReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostCustomerSignupURLOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostCustomerSignupURL: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1beta1Sqluser creates one sqluser

This endpoint will create one sql user int the cluster.
*/
func (a *Client) PostV1beta1Sqluser(params *PostV1beta1SqluserParams, opts ...ClientOption) (*PostV1beta1SqluserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1beta1SqluserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostV1beta1Sqluser",
		Method:             "POST",
		PathPattern:        "/v1beta1/sqluser",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostV1beta1SqluserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1beta1SqluserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostV1beta1Sqluser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
