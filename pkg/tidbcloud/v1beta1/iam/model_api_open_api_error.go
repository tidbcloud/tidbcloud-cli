/*
Acccount OPENAPI

This is account open api.

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iam

import (
	"encoding/json"
)

// checks if the ApiOpenApiError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiOpenApiError{}

// ApiOpenApiError struct for ApiOpenApiError
type ApiOpenApiError struct {
	Code                 *string                `json:"code,omitempty"`
	Error                map[string]interface{} `json:"error,omitempty"`
	MsgPrefix            *string                `json:"msgPrefix,omitempty"`
	Status               *int32                 `json:"status,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ApiOpenApiError ApiOpenApiError

// NewApiOpenApiError instantiates a new ApiOpenApiError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiOpenApiError() *ApiOpenApiError {
	this := ApiOpenApiError{}
	return &this
}

// NewApiOpenApiErrorWithDefaults instantiates a new ApiOpenApiError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiOpenApiErrorWithDefaults() *ApiOpenApiError {
	this := ApiOpenApiError{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ApiOpenApiError) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiOpenApiError) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *ApiOpenApiError) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *ApiOpenApiError) SetCode(v string) {
	o.Code = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *ApiOpenApiError) GetError() map[string]interface{} {
	if o == nil || IsNil(o.Error) {
		var ret map[string]interface{}
		return ret
	}
	return o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiOpenApiError) GetErrorOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Error) {
		return map[string]interface{}{}, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *ApiOpenApiError) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given map[string]interface{} and assigns it to the Error field.
func (o *ApiOpenApiError) SetError(v map[string]interface{}) {
	o.Error = v
}

// GetMsgPrefix returns the MsgPrefix field value if set, zero value otherwise.
func (o *ApiOpenApiError) GetMsgPrefix() string {
	if o == nil || IsNil(o.MsgPrefix) {
		var ret string
		return ret
	}
	return *o.MsgPrefix
}

// GetMsgPrefixOk returns a tuple with the MsgPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiOpenApiError) GetMsgPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.MsgPrefix) {
		return nil, false
	}
	return o.MsgPrefix, true
}

// HasMsgPrefix returns a boolean if a field has been set.
func (o *ApiOpenApiError) HasMsgPrefix() bool {
	if o != nil && !IsNil(o.MsgPrefix) {
		return true
	}

	return false
}

// SetMsgPrefix gets a reference to the given string and assigns it to the MsgPrefix field.
func (o *ApiOpenApiError) SetMsgPrefix(v string) {
	o.MsgPrefix = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ApiOpenApiError) GetStatus() int32 {
	if o == nil || IsNil(o.Status) {
		var ret int32
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiOpenApiError) GetStatusOk() (*int32, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ApiOpenApiError) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given int32 and assigns it to the Status field.
func (o *ApiOpenApiError) SetStatus(v int32) {
	o.Status = &v
}

func (o ApiOpenApiError) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiOpenApiError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.MsgPrefix) {
		toSerialize["msgPrefix"] = o.MsgPrefix
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ApiOpenApiError) UnmarshalJSON(data []byte) (err error) {
	varApiOpenApiError := _ApiOpenApiError{}

	err = json.Unmarshal(data, &varApiOpenApiError)

	if err != nil {
		return err
	}

	*o = ApiOpenApiError(varApiOpenApiError)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "code")
		delete(additionalProperties, "error")
		delete(additionalProperties, "msgPrefix")
		delete(additionalProperties, "status")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApiOpenApiError struct {
	value *ApiOpenApiError
	isSet bool
}

func (v NullableApiOpenApiError) Get() *ApiOpenApiError {
	return v.value
}

func (v *NullableApiOpenApiError) Set(val *ApiOpenApiError) {
	v.value = val
	v.isSet = true
}

func (v NullableApiOpenApiError) IsSet() bool {
	return v.isSet
}

func (v *NullableApiOpenApiError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiOpenApiError(val *ApiOpenApiError) *NullableApiOpenApiError {
	return &NullableApiOpenApiError{value: val, isSet: true}
}

func (v NullableApiOpenApiError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiOpenApiError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
