/*
Acccount OPENAPI

This is account open api.

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package iam

import (
	"encoding/json"
)

// checks if the ApiSqlUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiSqlUser{}

// ApiSqlUser struct for ApiSqlUser
type ApiSqlUser struct {
	AuthMethod           *string  `json:"authMethod,omitempty"`
	BuiltinRole          *string  `json:"builtinRole,omitempty"`
	CustomRoles          []string `json:"customRoles,omitempty"`
	UserName             *string  `json:"userName,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ApiSqlUser ApiSqlUser

// NewApiSqlUser instantiates a new ApiSqlUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiSqlUser() *ApiSqlUser {
	this := ApiSqlUser{}
	return &this
}

// NewApiSqlUserWithDefaults instantiates a new ApiSqlUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiSqlUserWithDefaults() *ApiSqlUser {
	this := ApiSqlUser{}
	return &this
}

// GetAuthMethod returns the AuthMethod field value if set, zero value otherwise.
func (o *ApiSqlUser) GetAuthMethod() string {
	if o == nil || IsNil(o.AuthMethod) {
		var ret string
		return ret
	}
	return *o.AuthMethod
}

// GetAuthMethodOk returns a tuple with the AuthMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiSqlUser) GetAuthMethodOk() (*string, bool) {
	if o == nil || IsNil(o.AuthMethod) {
		return nil, false
	}
	return o.AuthMethod, true
}

// HasAuthMethod returns a boolean if a field has been set.
func (o *ApiSqlUser) HasAuthMethod() bool {
	if o != nil && !IsNil(o.AuthMethod) {
		return true
	}

	return false
}

// SetAuthMethod gets a reference to the given string and assigns it to the AuthMethod field.
func (o *ApiSqlUser) SetAuthMethod(v string) {
	o.AuthMethod = &v
}

// GetBuiltinRole returns the BuiltinRole field value if set, zero value otherwise.
func (o *ApiSqlUser) GetBuiltinRole() string {
	if o == nil || IsNil(o.BuiltinRole) {
		var ret string
		return ret
	}
	return *o.BuiltinRole
}

// GetBuiltinRoleOk returns a tuple with the BuiltinRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiSqlUser) GetBuiltinRoleOk() (*string, bool) {
	if o == nil || IsNil(o.BuiltinRole) {
		return nil, false
	}
	return o.BuiltinRole, true
}

// HasBuiltinRole returns a boolean if a field has been set.
func (o *ApiSqlUser) HasBuiltinRole() bool {
	if o != nil && !IsNil(o.BuiltinRole) {
		return true
	}

	return false
}

// SetBuiltinRole gets a reference to the given string and assigns it to the BuiltinRole field.
func (o *ApiSqlUser) SetBuiltinRole(v string) {
	o.BuiltinRole = &v
}

// GetCustomRoles returns the CustomRoles field value if set, zero value otherwise.
func (o *ApiSqlUser) GetCustomRoles() []string {
	if o == nil || IsNil(o.CustomRoles) {
		var ret []string
		return ret
	}
	return o.CustomRoles
}

// GetCustomRolesOk returns a tuple with the CustomRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiSqlUser) GetCustomRolesOk() ([]string, bool) {
	if o == nil || IsNil(o.CustomRoles) {
		return nil, false
	}
	return o.CustomRoles, true
}

// HasCustomRoles returns a boolean if a field has been set.
func (o *ApiSqlUser) HasCustomRoles() bool {
	if o != nil && !IsNil(o.CustomRoles) {
		return true
	}

	return false
}

// SetCustomRoles gets a reference to the given []string and assigns it to the CustomRoles field.
func (o *ApiSqlUser) SetCustomRoles(v []string) {
	o.CustomRoles = v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *ApiSqlUser) GetUserName() string {
	if o == nil || IsNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiSqlUser) GetUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *ApiSqlUser) HasUserName() bool {
	if o != nil && !IsNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *ApiSqlUser) SetUserName(v string) {
	o.UserName = &v
}

func (o ApiSqlUser) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiSqlUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AuthMethod) {
		toSerialize["authMethod"] = o.AuthMethod
	}
	if !IsNil(o.BuiltinRole) {
		toSerialize["builtinRole"] = o.BuiltinRole
	}
	if !IsNil(o.CustomRoles) {
		toSerialize["customRoles"] = o.CustomRoles
	}
	if !IsNil(o.UserName) {
		toSerialize["userName"] = o.UserName
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ApiSqlUser) UnmarshalJSON(data []byte) (err error) {
	varApiSqlUser := _ApiSqlUser{}

	err = json.Unmarshal(data, &varApiSqlUser)

	if err != nil {
		return err
	}

	*o = ApiSqlUser(varApiSqlUser)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "authMethod")
		delete(additionalProperties, "builtinRole")
		delete(additionalProperties, "customRoles")
		delete(additionalProperties, "userName")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApiSqlUser struct {
	value *ApiSqlUser
	isSet bool
}

func (v NullableApiSqlUser) Get() *ApiSqlUser {
	return v.value
}

func (v *NullableApiSqlUser) Set(val *ApiSqlUser) {
	v.value = val
	v.isSet = true
}

func (v NullableApiSqlUser) IsSet() bool {
	return v.isSet
}

func (v *NullableApiSqlUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiSqlUser(val *ApiSqlUser) *NullableApiSqlUser {
	return &NullableApiSqlUser{value: val, isSet: true}
}

func (v NullableApiSqlUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiSqlUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
