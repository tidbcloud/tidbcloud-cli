/*
TiDB Cloud Starter and Essential Database Audit Logging Open API

TiDB Cloud Starter and Essential Database Audit Logging Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditlog

import (
	"encoding/json"
)

// S3CloudStorageS3AuthType  - ROLE_ARN: The access method is role arn.  - ACCESS_KEY: The access method is access key.
type S3CloudStorageS3AuthType string

// List of S3CloudStorage.S3AuthType
const (
	S3CLOUDSTORAGES3AUTHTYPE_ROLE_ARN   S3CloudStorageS3AuthType = "ROLE_ARN"
	S3CLOUDSTORAGES3AUTHTYPE_ACCESS_KEY S3CloudStorageS3AuthType = "ACCESS_KEY"
)

// All allowed values of S3CloudStorageS3AuthType enum
var AllowedS3CloudStorageS3AuthTypeEnumValues = []S3CloudStorageS3AuthType{
	"ROLE_ARN",
	"ACCESS_KEY",
}

func (v *S3CloudStorageS3AuthType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := S3CloudStorageS3AuthType(value)
	for _, existing := range AllowedS3CloudStorageS3AuthTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = S3CloudStorageS3AuthType(value)
	return nil
}

// NewS3CloudStorageS3AuthTypeFromValue returns a pointer to a valid S3CloudStorageS3AuthType for the value passed as argument
func NewS3CloudStorageS3AuthTypeFromValue(v string) *S3CloudStorageS3AuthType {
	ev := S3CloudStorageS3AuthType(v)
	return &ev
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v S3CloudStorageS3AuthType) IsValid() bool {
	for _, existing := range AllowedS3CloudStorageS3AuthTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to S3CloudStorage.S3AuthType value
func (v S3CloudStorageS3AuthType) Ptr() *S3CloudStorageS3AuthType {
	return &v
}

type NullableS3CloudStorageS3AuthType struct {
	value *S3CloudStorageS3AuthType
	isSet bool
}

func (v NullableS3CloudStorageS3AuthType) Get() *S3CloudStorageS3AuthType {
	return v.value
}

func (v *NullableS3CloudStorageS3AuthType) Set(val *S3CloudStorageS3AuthType) {
	v.value = val
	v.isSet = true
}

func (v NullableS3CloudStorageS3AuthType) IsSet() bool {
	return v.isSet
}

func (v *NullableS3CloudStorageS3AuthType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableS3CloudStorageS3AuthType(val *S3CloudStorageS3AuthType) *NullableS3CloudStorageS3AuthType {
	return &NullableS3CloudStorageS3AuthType{value: val, isSet: true}
}

func (v NullableS3CloudStorageS3AuthType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableS3CloudStorageS3AuthType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
