/*
TiDB Cloud Starter and Essential Database Audit Logging Open API

TiDB Cloud Starter and Essential Database Audit Logging Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditlog

import (
	"encoding/json"
	"fmt"
)

// checks if the DatabaseAuditLogServiceCreateAuditLogFilterRuleBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatabaseAuditLogServiceCreateAuditLogFilterRuleBody{}

// DatabaseAuditLogServiceCreateAuditLogFilterRuleBody struct for DatabaseAuditLogServiceCreateAuditLogFilterRuleBody
type DatabaseAuditLogServiceCreateAuditLogFilterRuleBody struct {
	FilterRule           AuditLogFilterRule `json:"filterRule"`
	AdditionalProperties map[string]interface{}
}

type _DatabaseAuditLogServiceCreateAuditLogFilterRuleBody DatabaseAuditLogServiceCreateAuditLogFilterRuleBody

// NewDatabaseAuditLogServiceCreateAuditLogFilterRuleBody instantiates a new DatabaseAuditLogServiceCreateAuditLogFilterRuleBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseAuditLogServiceCreateAuditLogFilterRuleBody(filterRule AuditLogFilterRule) *DatabaseAuditLogServiceCreateAuditLogFilterRuleBody {
	this := DatabaseAuditLogServiceCreateAuditLogFilterRuleBody{}
	this.FilterRule = filterRule
	return &this
}

// NewDatabaseAuditLogServiceCreateAuditLogFilterRuleBodyWithDefaults instantiates a new DatabaseAuditLogServiceCreateAuditLogFilterRuleBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseAuditLogServiceCreateAuditLogFilterRuleBodyWithDefaults() *DatabaseAuditLogServiceCreateAuditLogFilterRuleBody {
	this := DatabaseAuditLogServiceCreateAuditLogFilterRuleBody{}
	return &this
}

// GetFilterRule returns the FilterRule field value
func (o *DatabaseAuditLogServiceCreateAuditLogFilterRuleBody) GetFilterRule() AuditLogFilterRule {
	if o == nil {
		var ret AuditLogFilterRule
		return ret
	}

	return o.FilterRule
}

// GetFilterRuleOk returns a tuple with the FilterRule field value
// and a boolean to check if the value has been set.
func (o *DatabaseAuditLogServiceCreateAuditLogFilterRuleBody) GetFilterRuleOk() (*AuditLogFilterRule, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FilterRule, true
}

// SetFilterRule sets field value
func (o *DatabaseAuditLogServiceCreateAuditLogFilterRuleBody) SetFilterRule(v AuditLogFilterRule) {
	o.FilterRule = v
}

func (o DatabaseAuditLogServiceCreateAuditLogFilterRuleBody) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatabaseAuditLogServiceCreateAuditLogFilterRuleBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["filterRule"] = o.FilterRule

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DatabaseAuditLogServiceCreateAuditLogFilterRuleBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"filterRule",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDatabaseAuditLogServiceCreateAuditLogFilterRuleBody := _DatabaseAuditLogServiceCreateAuditLogFilterRuleBody{}

	err = json.Unmarshal(data, &varDatabaseAuditLogServiceCreateAuditLogFilterRuleBody)

	if err != nil {
		return err
	}

	*o = DatabaseAuditLogServiceCreateAuditLogFilterRuleBody(varDatabaseAuditLogServiceCreateAuditLogFilterRuleBody)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "filterRule")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDatabaseAuditLogServiceCreateAuditLogFilterRuleBody struct {
	value *DatabaseAuditLogServiceCreateAuditLogFilterRuleBody
	isSet bool
}

func (v NullableDatabaseAuditLogServiceCreateAuditLogFilterRuleBody) Get() *DatabaseAuditLogServiceCreateAuditLogFilterRuleBody {
	return v.value
}

func (v *NullableDatabaseAuditLogServiceCreateAuditLogFilterRuleBody) Set(val *DatabaseAuditLogServiceCreateAuditLogFilterRuleBody) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseAuditLogServiceCreateAuditLogFilterRuleBody) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseAuditLogServiceCreateAuditLogFilterRuleBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseAuditLogServiceCreateAuditLogFilterRuleBody(val *DatabaseAuditLogServiceCreateAuditLogFilterRuleBody) *NullableDatabaseAuditLogServiceCreateAuditLogFilterRuleBody {
	return &NullableDatabaseAuditLogServiceCreateAuditLogFilterRuleBody{value: val, isSet: true}
}

func (v NullableDatabaseAuditLogServiceCreateAuditLogFilterRuleBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseAuditLogServiceCreateAuditLogFilterRuleBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
