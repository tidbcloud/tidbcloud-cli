/*
TiDB Cloud Starter and Essential Database Audit Logging Open API

TiDB Cloud Starter and Essential Database Audit Logging Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditlog

import (
	"encoding/json"
)

// checks if the AuditLogConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuditLogConfig{}

// AuditLogConfig struct for AuditLogConfig
type AuditLogConfig struct {
	// The ID of the cluster.
	ClusterId *string `json:"clusterId,omitempty"`
	// Whether audit log is enabled.
	Enabled NullableBool `json:"enabled,omitempty"`
	// Whether unredacted the audit log.
	Unredacted NullableBool `json:"unredacted,omitempty"`
	// The cloud storage for audit logs.
	CloudStorage *CloudStorage `json:"cloudStorage,omitempty"`
	// The rotation interval in minutes for audit logs. Default to 60 minutes.
	RotationIntervalMinutes *int32 `json:"rotationIntervalMinutes,omitempty"`
	// The rotation size in MiB for audit logs. Default to 100 MiB.
	RotationSizeMib      *int32 `json:"rotationSizeMib,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AuditLogConfig AuditLogConfig

// NewAuditLogConfig instantiates a new AuditLogConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuditLogConfig() *AuditLogConfig {
	this := AuditLogConfig{}
	return &this
}

// NewAuditLogConfigWithDefaults instantiates a new AuditLogConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuditLogConfigWithDefaults() *AuditLogConfig {
	this := AuditLogConfig{}
	return &this
}

// GetClusterId returns the ClusterId field value if set, zero value otherwise.
func (o *AuditLogConfig) GetClusterId() string {
	if o == nil || IsNil(o.ClusterId) {
		var ret string
		return ret
	}
	return *o.ClusterId
}

// GetClusterIdOk returns a tuple with the ClusterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogConfig) GetClusterIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClusterId) {
		return nil, false
	}
	return o.ClusterId, true
}

// HasClusterId returns a boolean if a field has been set.
func (o *AuditLogConfig) HasClusterId() bool {
	if o != nil && !IsNil(o.ClusterId) {
		return true
	}

	return false
}

// SetClusterId gets a reference to the given string and assigns it to the ClusterId field.
func (o *AuditLogConfig) SetClusterId(v string) {
	o.ClusterId = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AuditLogConfig) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled.Get()) {
		var ret bool
		return ret
	}
	return *o.Enabled.Get()
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuditLogConfig) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Enabled.Get(), o.Enabled.IsSet()
}

// HasEnabled returns a boolean if a field has been set.
func (o *AuditLogConfig) HasEnabled() bool {
	if o != nil && o.Enabled.IsSet() {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given NullableBool and assigns it to the Enabled field.
func (o *AuditLogConfig) SetEnabled(v bool) {
	o.Enabled.Set(&v)
}

// SetEnabledNil sets the value for Enabled to be an explicit nil
func (o *AuditLogConfig) SetEnabledNil() {
	o.Enabled.Set(nil)
}

// UnsetEnabled ensures that no value is present for Enabled, not even an explicit nil
func (o *AuditLogConfig) UnsetEnabled() {
	o.Enabled.Unset()
}

// GetUnredacted returns the Unredacted field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AuditLogConfig) GetUnredacted() bool {
	if o == nil || IsNil(o.Unredacted.Get()) {
		var ret bool
		return ret
	}
	return *o.Unredacted.Get()
}

// GetUnredactedOk returns a tuple with the Unredacted field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuditLogConfig) GetUnredactedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Unredacted.Get(), o.Unredacted.IsSet()
}

// HasUnredacted returns a boolean if a field has been set.
func (o *AuditLogConfig) HasUnredacted() bool {
	if o != nil && o.Unredacted.IsSet() {
		return true
	}

	return false
}

// SetUnredacted gets a reference to the given NullableBool and assigns it to the Unredacted field.
func (o *AuditLogConfig) SetUnredacted(v bool) {
	o.Unredacted.Set(&v)
}

// SetUnredactedNil sets the value for Unredacted to be an explicit nil
func (o *AuditLogConfig) SetUnredactedNil() {
	o.Unredacted.Set(nil)
}

// UnsetUnredacted ensures that no value is present for Unredacted, not even an explicit nil
func (o *AuditLogConfig) UnsetUnredacted() {
	o.Unredacted.Unset()
}

// GetCloudStorage returns the CloudStorage field value if set, zero value otherwise.
func (o *AuditLogConfig) GetCloudStorage() CloudStorage {
	if o == nil || IsNil(o.CloudStorage) {
		var ret CloudStorage
		return ret
	}
	return *o.CloudStorage
}

// GetCloudStorageOk returns a tuple with the CloudStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogConfig) GetCloudStorageOk() (*CloudStorage, bool) {
	if o == nil || IsNil(o.CloudStorage) {
		return nil, false
	}
	return o.CloudStorage, true
}

// HasCloudStorage returns a boolean if a field has been set.
func (o *AuditLogConfig) HasCloudStorage() bool {
	if o != nil && !IsNil(o.CloudStorage) {
		return true
	}

	return false
}

// SetCloudStorage gets a reference to the given CloudStorage and assigns it to the CloudStorage field.
func (o *AuditLogConfig) SetCloudStorage(v CloudStorage) {
	o.CloudStorage = &v
}

// GetRotationIntervalMinutes returns the RotationIntervalMinutes field value if set, zero value otherwise.
func (o *AuditLogConfig) GetRotationIntervalMinutes() int32 {
	if o == nil || IsNil(o.RotationIntervalMinutes) {
		var ret int32
		return ret
	}
	return *o.RotationIntervalMinutes
}

// GetRotationIntervalMinutesOk returns a tuple with the RotationIntervalMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogConfig) GetRotationIntervalMinutesOk() (*int32, bool) {
	if o == nil || IsNil(o.RotationIntervalMinutes) {
		return nil, false
	}
	return o.RotationIntervalMinutes, true
}

// HasRotationIntervalMinutes returns a boolean if a field has been set.
func (o *AuditLogConfig) HasRotationIntervalMinutes() bool {
	if o != nil && !IsNil(o.RotationIntervalMinutes) {
		return true
	}

	return false
}

// SetRotationIntervalMinutes gets a reference to the given int32 and assigns it to the RotationIntervalMinutes field.
func (o *AuditLogConfig) SetRotationIntervalMinutes(v int32) {
	o.RotationIntervalMinutes = &v
}

// GetRotationSizeMib returns the RotationSizeMib field value if set, zero value otherwise.
func (o *AuditLogConfig) GetRotationSizeMib() int32 {
	if o == nil || IsNil(o.RotationSizeMib) {
		var ret int32
		return ret
	}
	return *o.RotationSizeMib
}

// GetRotationSizeMibOk returns a tuple with the RotationSizeMib field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogConfig) GetRotationSizeMibOk() (*int32, bool) {
	if o == nil || IsNil(o.RotationSizeMib) {
		return nil, false
	}
	return o.RotationSizeMib, true
}

// HasRotationSizeMib returns a boolean if a field has been set.
func (o *AuditLogConfig) HasRotationSizeMib() bool {
	if o != nil && !IsNil(o.RotationSizeMib) {
		return true
	}

	return false
}

// SetRotationSizeMib gets a reference to the given int32 and assigns it to the RotationSizeMib field.
func (o *AuditLogConfig) SetRotationSizeMib(v int32) {
	o.RotationSizeMib = &v
}

func (o AuditLogConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuditLogConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ClusterId) {
		toSerialize["clusterId"] = o.ClusterId
	}
	if o.Enabled.IsSet() {
		toSerialize["enabled"] = o.Enabled.Get()
	}
	if o.Unredacted.IsSet() {
		toSerialize["unredacted"] = o.Unredacted.Get()
	}
	if !IsNil(o.CloudStorage) {
		toSerialize["cloudStorage"] = o.CloudStorage
	}
	if !IsNil(o.RotationIntervalMinutes) {
		toSerialize["rotationIntervalMinutes"] = o.RotationIntervalMinutes
	}
	if !IsNil(o.RotationSizeMib) {
		toSerialize["rotationSizeMib"] = o.RotationSizeMib
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AuditLogConfig) UnmarshalJSON(data []byte) (err error) {
	varAuditLogConfig := _AuditLogConfig{}

	err = json.Unmarshal(data, &varAuditLogConfig)

	if err != nil {
		return err
	}

	*o = AuditLogConfig(varAuditLogConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "clusterId")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "unredacted")
		delete(additionalProperties, "cloudStorage")
		delete(additionalProperties, "rotationIntervalMinutes")
		delete(additionalProperties, "rotationSizeMib")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAuditLogConfig struct {
	value *AuditLogConfig
	isSet bool
}

func (v NullableAuditLogConfig) Get() *AuditLogConfig {
	return v.value
}

func (v *NullableAuditLogConfig) Set(val *AuditLogConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditLogConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditLogConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditLogConfig(val *AuditLogConfig) *NullableAuditLogConfig {
	return &NullableAuditLogConfig{value: val, isSet: true}
}

func (v NullableAuditLogConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditLogConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
