/*
TiDB Cloud Starter and Essential Database Audit Logging Open API

TiDB Cloud Starter and Essential Database Audit Logging Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditlog

import (
	"encoding/json"
)

// CloudStorageTypeEnum  - TIDB_CLOUD: TiDB Cloud's own cloud storage.  - S3: Amazon S3 cloud storage.  - GCS: Google Cloud Storage.  - AZURE_BLOB: Azure Blob Storage.  - OSS: Alibaba Cloud OSS.
type CloudStorageTypeEnum string

// List of CloudStorageType.Enum
const (
	CLOUDSTORAGETYPEENUM_TIDB_CLOUD CloudStorageTypeEnum = "TIDB_CLOUD"
	CLOUDSTORAGETYPEENUM_S3         CloudStorageTypeEnum = "S3"
	CLOUDSTORAGETYPEENUM_GCS        CloudStorageTypeEnum = "GCS"
	CLOUDSTORAGETYPEENUM_AZURE_BLOB CloudStorageTypeEnum = "AZURE_BLOB"
	CLOUDSTORAGETYPEENUM_OSS        CloudStorageTypeEnum = "OSS"
)

// All allowed values of CloudStorageTypeEnum enum
var AllowedCloudStorageTypeEnumEnumValues = []CloudStorageTypeEnum{
	"TIDB_CLOUD",
	"S3",
	"GCS",
	"AZURE_BLOB",
	"OSS",
}

func (v *CloudStorageTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CloudStorageTypeEnum(value)
	for _, existing := range AllowedCloudStorageTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = CloudStorageTypeEnum(value)
	return nil
}

// NewCloudStorageTypeEnumFromValue returns a pointer to a valid CloudStorageTypeEnum for the value passed as argument
func NewCloudStorageTypeEnumFromValue(v string) *CloudStorageTypeEnum {
	ev := CloudStorageTypeEnum(v)
	return &ev
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CloudStorageTypeEnum) IsValid() bool {
	for _, existing := range AllowedCloudStorageTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CloudStorageType.Enum value
func (v CloudStorageTypeEnum) Ptr() *CloudStorageTypeEnum {
	return &v
}

type NullableCloudStorageTypeEnum struct {
	value *CloudStorageTypeEnum
	isSet bool
}

func (v NullableCloudStorageTypeEnum) Get() *CloudStorageTypeEnum {
	return v.value
}

func (v *NullableCloudStorageTypeEnum) Set(val *CloudStorageTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudStorageTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudStorageTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudStorageTypeEnum(val *CloudStorageTypeEnum) *NullableCloudStorageTypeEnum {
	return &NullableCloudStorageTypeEnum{value: val, isSet: true}
}

func (v NullableCloudStorageTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudStorageTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
