/*
TiDB Cloud Starter and Essential Database Audit Logging Open API

TiDB Cloud Starter and Essential Database Audit Logging Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditlog

import (
	"encoding/json"
	"time"
)

// checks if the AuditLogFile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuditLogFile{}

// AuditLogFile struct for AuditLogFile
type AuditLogFile struct {
	// The name of the audit log.
	Name *string `json:"name,omitempty"`
	// The size in bytes of the audit log.
	SizeBytes *int64 `json:"sizeBytes,omitempty"`
	// download url of the audit log.
	Url *string `json:"url,omitempty"`
	// The create time of the audit log.
	CreateTime           *time.Time `json:"createTime,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AuditLogFile AuditLogFile

// NewAuditLogFile instantiates a new AuditLogFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuditLogFile() *AuditLogFile {
	this := AuditLogFile{}
	return &this
}

// NewAuditLogFileWithDefaults instantiates a new AuditLogFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuditLogFileWithDefaults() *AuditLogFile {
	this := AuditLogFile{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AuditLogFile) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogFile) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AuditLogFile) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AuditLogFile) SetName(v string) {
	o.Name = &v
}

// GetSizeBytes returns the SizeBytes field value if set, zero value otherwise.
func (o *AuditLogFile) GetSizeBytes() int64 {
	if o == nil || IsNil(o.SizeBytes) {
		var ret int64
		return ret
	}
	return *o.SizeBytes
}

// GetSizeBytesOk returns a tuple with the SizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogFile) GetSizeBytesOk() (*int64, bool) {
	if o == nil || IsNil(o.SizeBytes) {
		return nil, false
	}
	return o.SizeBytes, true
}

// HasSizeBytes returns a boolean if a field has been set.
func (o *AuditLogFile) HasSizeBytes() bool {
	if o != nil && !IsNil(o.SizeBytes) {
		return true
	}

	return false
}

// SetSizeBytes gets a reference to the given int64 and assigns it to the SizeBytes field.
func (o *AuditLogFile) SetSizeBytes(v int64) {
	o.SizeBytes = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *AuditLogFile) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogFile) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *AuditLogFile) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *AuditLogFile) SetUrl(v string) {
	o.Url = &v
}

// GetCreateTime returns the CreateTime field value if set, zero value otherwise.
func (o *AuditLogFile) GetCreateTime() time.Time {
	if o == nil || IsNil(o.CreateTime) {
		var ret time.Time
		return ret
	}
	return *o.CreateTime
}

// GetCreateTimeOk returns a tuple with the CreateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogFile) GetCreateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreateTime) {
		return nil, false
	}
	return o.CreateTime, true
}

// HasCreateTime returns a boolean if a field has been set.
func (o *AuditLogFile) HasCreateTime() bool {
	if o != nil && !IsNil(o.CreateTime) {
		return true
	}

	return false
}

// SetCreateTime gets a reference to the given time.Time and assigns it to the CreateTime field.
func (o *AuditLogFile) SetCreateTime(v time.Time) {
	o.CreateTime = &v
}

func (o AuditLogFile) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuditLogFile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.SizeBytes) {
		toSerialize["sizeBytes"] = o.SizeBytes
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.CreateTime) {
		toSerialize["createTime"] = o.CreateTime
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AuditLogFile) UnmarshalJSON(data []byte) (err error) {
	varAuditLogFile := _AuditLogFile{}

	err = json.Unmarshal(data, &varAuditLogFile)

	if err != nil {
		return err
	}

	*o = AuditLogFile(varAuditLogFile)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "sizeBytes")
		delete(additionalProperties, "url")
		delete(additionalProperties, "createTime")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAuditLogFile struct {
	value *AuditLogFile
	isSet bool
}

func (v NullableAuditLogFile) Get() *AuditLogFile {
	return v.value
}

func (v *NullableAuditLogFile) Set(val *AuditLogFile) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditLogFile) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditLogFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditLogFile(val *AuditLogFile) *NullableAuditLogFile {
	return &NullableAuditLogFile{value: val, isSet: true}
}

func (v NullableAuditLogFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditLogFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
