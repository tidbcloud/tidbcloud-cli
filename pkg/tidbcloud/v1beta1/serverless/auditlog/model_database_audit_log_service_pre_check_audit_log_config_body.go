/*
TiDB Cloud Starter and Essential Database Audit Logging Open API

TiDB Cloud Starter and Essential Database Audit Logging Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditlog

import (
	"encoding/json"
)

// checks if the DatabaseAuditLogServicePreCheckAuditLogConfigBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatabaseAuditLogServicePreCheckAuditLogConfigBody{}

// DatabaseAuditLogServicePreCheckAuditLogConfigBody struct for DatabaseAuditLogServicePreCheckAuditLogConfigBody
type DatabaseAuditLogServicePreCheckAuditLogConfigBody struct {
	// OPTIONAL. PreCheck the audit log cloud storage configuration.
	CloudStorage         *CloudStorage `json:"cloudStorage,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DatabaseAuditLogServicePreCheckAuditLogConfigBody DatabaseAuditLogServicePreCheckAuditLogConfigBody

// NewDatabaseAuditLogServicePreCheckAuditLogConfigBody instantiates a new DatabaseAuditLogServicePreCheckAuditLogConfigBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseAuditLogServicePreCheckAuditLogConfigBody() *DatabaseAuditLogServicePreCheckAuditLogConfigBody {
	this := DatabaseAuditLogServicePreCheckAuditLogConfigBody{}
	return &this
}

// NewDatabaseAuditLogServicePreCheckAuditLogConfigBodyWithDefaults instantiates a new DatabaseAuditLogServicePreCheckAuditLogConfigBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseAuditLogServicePreCheckAuditLogConfigBodyWithDefaults() *DatabaseAuditLogServicePreCheckAuditLogConfigBody {
	this := DatabaseAuditLogServicePreCheckAuditLogConfigBody{}
	return &this
}

// GetCloudStorage returns the CloudStorage field value if set, zero value otherwise.
func (o *DatabaseAuditLogServicePreCheckAuditLogConfigBody) GetCloudStorage() CloudStorage {
	if o == nil || IsNil(o.CloudStorage) {
		var ret CloudStorage
		return ret
	}
	return *o.CloudStorage
}

// GetCloudStorageOk returns a tuple with the CloudStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseAuditLogServicePreCheckAuditLogConfigBody) GetCloudStorageOk() (*CloudStorage, bool) {
	if o == nil || IsNil(o.CloudStorage) {
		return nil, false
	}
	return o.CloudStorage, true
}

// HasCloudStorage returns a boolean if a field has been set.
func (o *DatabaseAuditLogServicePreCheckAuditLogConfigBody) HasCloudStorage() bool {
	if o != nil && !IsNil(o.CloudStorage) {
		return true
	}

	return false
}

// SetCloudStorage gets a reference to the given CloudStorage and assigns it to the CloudStorage field.
func (o *DatabaseAuditLogServicePreCheckAuditLogConfigBody) SetCloudStorage(v CloudStorage) {
	o.CloudStorage = &v
}

func (o DatabaseAuditLogServicePreCheckAuditLogConfigBody) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatabaseAuditLogServicePreCheckAuditLogConfigBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CloudStorage) {
		toSerialize["cloudStorage"] = o.CloudStorage
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DatabaseAuditLogServicePreCheckAuditLogConfigBody) UnmarshalJSON(data []byte) (err error) {
	varDatabaseAuditLogServicePreCheckAuditLogConfigBody := _DatabaseAuditLogServicePreCheckAuditLogConfigBody{}

	err = json.Unmarshal(data, &varDatabaseAuditLogServicePreCheckAuditLogConfigBody)

	if err != nil {
		return err
	}

	*o = DatabaseAuditLogServicePreCheckAuditLogConfigBody(varDatabaseAuditLogServicePreCheckAuditLogConfigBody)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "cloudStorage")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDatabaseAuditLogServicePreCheckAuditLogConfigBody struct {
	value *DatabaseAuditLogServicePreCheckAuditLogConfigBody
	isSet bool
}

func (v NullableDatabaseAuditLogServicePreCheckAuditLogConfigBody) Get() *DatabaseAuditLogServicePreCheckAuditLogConfigBody {
	return v.value
}

func (v *NullableDatabaseAuditLogServicePreCheckAuditLogConfigBody) Set(val *DatabaseAuditLogServicePreCheckAuditLogConfigBody) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseAuditLogServicePreCheckAuditLogConfigBody) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseAuditLogServicePreCheckAuditLogConfigBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseAuditLogServicePreCheckAuditLogConfigBody(val *DatabaseAuditLogServicePreCheckAuditLogConfigBody) *NullableDatabaseAuditLogServicePreCheckAuditLogConfigBody {
	return &NullableDatabaseAuditLogServicePreCheckAuditLogConfigBody{value: val, isSet: true}
}

func (v NullableDatabaseAuditLogServicePreCheckAuditLogConfigBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseAuditLogServicePreCheckAuditLogConfigBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
