/*
TiDB Cloud Starter and Essential Database Audit Logging Open API

TiDB Cloud Starter and Essential Database Audit Logging Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditlog

import (
	"encoding/json"
)

// checks if the AuditLogFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuditLogFilter{}

// AuditLogFilter Message for filter, only the entry matching all the conditions will be audit logged.
type AuditLogFilter struct {
	// OPTIONAL. Classes to include in the filter combined with an OR relationship.
	Classes []string `json:"classes,omitempty"`
	// OPTIONAL. Tables to include in the filter combined with an OR relationship.
	Tables []string `json:"tables,omitempty"`
	// OPTIONAL. Status codes to include in the filter combined with an OR relationship.
	StatusCodes          []int32 `json:"statusCodes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AuditLogFilter AuditLogFilter

// NewAuditLogFilter instantiates a new AuditLogFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuditLogFilter() *AuditLogFilter {
	this := AuditLogFilter{}
	return &this
}

// NewAuditLogFilterWithDefaults instantiates a new AuditLogFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuditLogFilterWithDefaults() *AuditLogFilter {
	this := AuditLogFilter{}
	return &this
}

// GetClasses returns the Classes field value if set, zero value otherwise.
func (o *AuditLogFilter) GetClasses() []string {
	if o == nil || IsNil(o.Classes) {
		var ret []string
		return ret
	}
	return o.Classes
}

// GetClassesOk returns a tuple with the Classes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogFilter) GetClassesOk() ([]string, bool) {
	if o == nil || IsNil(o.Classes) {
		return nil, false
	}
	return o.Classes, true
}

// HasClasses returns a boolean if a field has been set.
func (o *AuditLogFilter) HasClasses() bool {
	if o != nil && !IsNil(o.Classes) {
		return true
	}

	return false
}

// SetClasses gets a reference to the given []string and assigns it to the Classes field.
func (o *AuditLogFilter) SetClasses(v []string) {
	o.Classes = v
}

// GetTables returns the Tables field value if set, zero value otherwise.
func (o *AuditLogFilter) GetTables() []string {
	if o == nil || IsNil(o.Tables) {
		var ret []string
		return ret
	}
	return o.Tables
}

// GetTablesOk returns a tuple with the Tables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogFilter) GetTablesOk() ([]string, bool) {
	if o == nil || IsNil(o.Tables) {
		return nil, false
	}
	return o.Tables, true
}

// HasTables returns a boolean if a field has been set.
func (o *AuditLogFilter) HasTables() bool {
	if o != nil && !IsNil(o.Tables) {
		return true
	}

	return false
}

// SetTables gets a reference to the given []string and assigns it to the Tables field.
func (o *AuditLogFilter) SetTables(v []string) {
	o.Tables = v
}

// GetStatusCodes returns the StatusCodes field value if set, zero value otherwise.
func (o *AuditLogFilter) GetStatusCodes() []int32 {
	if o == nil || IsNil(o.StatusCodes) {
		var ret []int32
		return ret
	}
	return o.StatusCodes
}

// GetStatusCodesOk returns a tuple with the StatusCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogFilter) GetStatusCodesOk() ([]int32, bool) {
	if o == nil || IsNil(o.StatusCodes) {
		return nil, false
	}
	return o.StatusCodes, true
}

// HasStatusCodes returns a boolean if a field has been set.
func (o *AuditLogFilter) HasStatusCodes() bool {
	if o != nil && !IsNil(o.StatusCodes) {
		return true
	}

	return false
}

// SetStatusCodes gets a reference to the given []int32 and assigns it to the StatusCodes field.
func (o *AuditLogFilter) SetStatusCodes(v []int32) {
	o.StatusCodes = v
}

func (o AuditLogFilter) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuditLogFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Classes) {
		toSerialize["classes"] = o.Classes
	}
	if !IsNil(o.Tables) {
		toSerialize["tables"] = o.Tables
	}
	if !IsNil(o.StatusCodes) {
		toSerialize["statusCodes"] = o.StatusCodes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AuditLogFilter) UnmarshalJSON(data []byte) (err error) {
	varAuditLogFilter := _AuditLogFilter{}

	err = json.Unmarshal(data, &varAuditLogFilter)

	if err != nil {
		return err
	}

	*o = AuditLogFilter(varAuditLogFilter)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "classes")
		delete(additionalProperties, "tables")
		delete(additionalProperties, "statusCodes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAuditLogFilter struct {
	value *AuditLogFilter
	isSet bool
}

func (v NullableAuditLogFilter) Get() *AuditLogFilter {
	return v.value
}

func (v *NullableAuditLogFilter) Set(val *AuditLogFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditLogFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditLogFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditLogFilter(val *AuditLogFilter) *NullableAuditLogFilter {
	return &NullableAuditLogFilter{value: val, isSet: true}
}

func (v NullableAuditLogFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditLogFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
