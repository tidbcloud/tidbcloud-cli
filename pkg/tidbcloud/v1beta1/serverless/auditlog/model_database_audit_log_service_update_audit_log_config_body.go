/*
TiDB Cloud Starter and Essential Database Audit Logging Open API

TiDB Cloud Starter and Essential Database Audit Logging Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditlog

import (
	"encoding/json"
	"fmt"
)

// checks if the DatabaseAuditLogServiceUpdateAuditLogConfigBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatabaseAuditLogServiceUpdateAuditLogConfigBody{}

// DatabaseAuditLogServiceUpdateAuditLogConfigBody struct for DatabaseAuditLogServiceUpdateAuditLogConfigBody
type DatabaseAuditLogServiceUpdateAuditLogConfigBody struct {
	// Required. The audit log configuration to update.
	AuditLogConfig       AuditLogConfig `json:"auditLogConfig"`
	AdditionalProperties map[string]interface{}
}

type _DatabaseAuditLogServiceUpdateAuditLogConfigBody DatabaseAuditLogServiceUpdateAuditLogConfigBody

// NewDatabaseAuditLogServiceUpdateAuditLogConfigBody instantiates a new DatabaseAuditLogServiceUpdateAuditLogConfigBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseAuditLogServiceUpdateAuditLogConfigBody(auditLogConfig AuditLogConfig) *DatabaseAuditLogServiceUpdateAuditLogConfigBody {
	this := DatabaseAuditLogServiceUpdateAuditLogConfigBody{}
	this.AuditLogConfig = auditLogConfig
	return &this
}

// NewDatabaseAuditLogServiceUpdateAuditLogConfigBodyWithDefaults instantiates a new DatabaseAuditLogServiceUpdateAuditLogConfigBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseAuditLogServiceUpdateAuditLogConfigBodyWithDefaults() *DatabaseAuditLogServiceUpdateAuditLogConfigBody {
	this := DatabaseAuditLogServiceUpdateAuditLogConfigBody{}
	return &this
}

// GetAuditLogConfig returns the AuditLogConfig field value
func (o *DatabaseAuditLogServiceUpdateAuditLogConfigBody) GetAuditLogConfig() AuditLogConfig {
	if o == nil {
		var ret AuditLogConfig
		return ret
	}

	return o.AuditLogConfig
}

// GetAuditLogConfigOk returns a tuple with the AuditLogConfig field value
// and a boolean to check if the value has been set.
func (o *DatabaseAuditLogServiceUpdateAuditLogConfigBody) GetAuditLogConfigOk() (*AuditLogConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuditLogConfig, true
}

// SetAuditLogConfig sets field value
func (o *DatabaseAuditLogServiceUpdateAuditLogConfigBody) SetAuditLogConfig(v AuditLogConfig) {
	o.AuditLogConfig = v
}

func (o DatabaseAuditLogServiceUpdateAuditLogConfigBody) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatabaseAuditLogServiceUpdateAuditLogConfigBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["auditLogConfig"] = o.AuditLogConfig

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DatabaseAuditLogServiceUpdateAuditLogConfigBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"auditLogConfig",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDatabaseAuditLogServiceUpdateAuditLogConfigBody := _DatabaseAuditLogServiceUpdateAuditLogConfigBody{}

	err = json.Unmarshal(data, &varDatabaseAuditLogServiceUpdateAuditLogConfigBody)

	if err != nil {
		return err
	}

	*o = DatabaseAuditLogServiceUpdateAuditLogConfigBody(varDatabaseAuditLogServiceUpdateAuditLogConfigBody)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "auditLogConfig")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDatabaseAuditLogServiceUpdateAuditLogConfigBody struct {
	value *DatabaseAuditLogServiceUpdateAuditLogConfigBody
	isSet bool
}

func (v NullableDatabaseAuditLogServiceUpdateAuditLogConfigBody) Get() *DatabaseAuditLogServiceUpdateAuditLogConfigBody {
	return v.value
}

func (v *NullableDatabaseAuditLogServiceUpdateAuditLogConfigBody) Set(val *DatabaseAuditLogServiceUpdateAuditLogConfigBody) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseAuditLogServiceUpdateAuditLogConfigBody) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseAuditLogServiceUpdateAuditLogConfigBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseAuditLogServiceUpdateAuditLogConfigBody(val *DatabaseAuditLogServiceUpdateAuditLogConfigBody) *NullableDatabaseAuditLogServiceUpdateAuditLogConfigBody {
	return &NullableDatabaseAuditLogServiceUpdateAuditLogConfigBody{value: val, isSet: true}
}

func (v NullableDatabaseAuditLogServiceUpdateAuditLogConfigBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseAuditLogServiceUpdateAuditLogConfigBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
