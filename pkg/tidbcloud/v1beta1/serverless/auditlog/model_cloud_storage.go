/*
TiDB Cloud Starter and Essential Database Audit Logging Open API

TiDB Cloud Starter and Essential Database Audit Logging Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditlog

import (
	"encoding/json"
	"fmt"
)

// checks if the CloudStorage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CloudStorage{}

// CloudStorage Message for cloud storage.
type CloudStorage struct {
	// Required. The type of cloud storage.
	Type                 CloudStorageTypeEnum   `json:"type"`
	S3                   *S3CloudStorage        `json:"s3,omitempty"`
	Gcs                  *GCSCloudStorage       `json:"gcs,omitempty"`
	AzureBlob            *AzureBlobCloudStorage `json:"azureBlob,omitempty"`
	Oss                  *OSSCloudStorage       `json:"oss,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CloudStorage CloudStorage

// NewCloudStorage instantiates a new CloudStorage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCloudStorage(type_ CloudStorageTypeEnum) *CloudStorage {
	this := CloudStorage{}
	this.Type = type_
	return &this
}

// NewCloudStorageWithDefaults instantiates a new CloudStorage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCloudStorageWithDefaults() *CloudStorage {
	this := CloudStorage{}
	return &this
}

// GetType returns the Type field value
func (o *CloudStorage) GetType() CloudStorageTypeEnum {
	if o == nil {
		var ret CloudStorageTypeEnum
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CloudStorage) GetTypeOk() (*CloudStorageTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CloudStorage) SetType(v CloudStorageTypeEnum) {
	o.Type = v
}

// GetS3 returns the S3 field value if set, zero value otherwise.
func (o *CloudStorage) GetS3() S3CloudStorage {
	if o == nil || IsNil(o.S3) {
		var ret S3CloudStorage
		return ret
	}
	return *o.S3
}

// GetS3Ok returns a tuple with the S3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudStorage) GetS3Ok() (*S3CloudStorage, bool) {
	if o == nil || IsNil(o.S3) {
		return nil, false
	}
	return o.S3, true
}

// HasS3 returns a boolean if a field has been set.
func (o *CloudStorage) HasS3() bool {
	if o != nil && !IsNil(o.S3) {
		return true
	}

	return false
}

// SetS3 gets a reference to the given S3CloudStorage and assigns it to the S3 field.
func (o *CloudStorage) SetS3(v S3CloudStorage) {
	o.S3 = &v
}

// GetGcs returns the Gcs field value if set, zero value otherwise.
func (o *CloudStorage) GetGcs() GCSCloudStorage {
	if o == nil || IsNil(o.Gcs) {
		var ret GCSCloudStorage
		return ret
	}
	return *o.Gcs
}

// GetGcsOk returns a tuple with the Gcs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudStorage) GetGcsOk() (*GCSCloudStorage, bool) {
	if o == nil || IsNil(o.Gcs) {
		return nil, false
	}
	return o.Gcs, true
}

// HasGcs returns a boolean if a field has been set.
func (o *CloudStorage) HasGcs() bool {
	if o != nil && !IsNil(o.Gcs) {
		return true
	}

	return false
}

// SetGcs gets a reference to the given GCSCloudStorage and assigns it to the Gcs field.
func (o *CloudStorage) SetGcs(v GCSCloudStorage) {
	o.Gcs = &v
}

// GetAzureBlob returns the AzureBlob field value if set, zero value otherwise.
func (o *CloudStorage) GetAzureBlob() AzureBlobCloudStorage {
	if o == nil || IsNil(o.AzureBlob) {
		var ret AzureBlobCloudStorage
		return ret
	}
	return *o.AzureBlob
}

// GetAzureBlobOk returns a tuple with the AzureBlob field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudStorage) GetAzureBlobOk() (*AzureBlobCloudStorage, bool) {
	if o == nil || IsNil(o.AzureBlob) {
		return nil, false
	}
	return o.AzureBlob, true
}

// HasAzureBlob returns a boolean if a field has been set.
func (o *CloudStorage) HasAzureBlob() bool {
	if o != nil && !IsNil(o.AzureBlob) {
		return true
	}

	return false
}

// SetAzureBlob gets a reference to the given AzureBlobCloudStorage and assigns it to the AzureBlob field.
func (o *CloudStorage) SetAzureBlob(v AzureBlobCloudStorage) {
	o.AzureBlob = &v
}

// GetOss returns the Oss field value if set, zero value otherwise.
func (o *CloudStorage) GetOss() OSSCloudStorage {
	if o == nil || IsNil(o.Oss) {
		var ret OSSCloudStorage
		return ret
	}
	return *o.Oss
}

// GetOssOk returns a tuple with the Oss field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudStorage) GetOssOk() (*OSSCloudStorage, bool) {
	if o == nil || IsNil(o.Oss) {
		return nil, false
	}
	return o.Oss, true
}

// HasOss returns a boolean if a field has been set.
func (o *CloudStorage) HasOss() bool {
	if o != nil && !IsNil(o.Oss) {
		return true
	}

	return false
}

// SetOss gets a reference to the given OSSCloudStorage and assigns it to the Oss field.
func (o *CloudStorage) SetOss(v OSSCloudStorage) {
	o.Oss = &v
}

func (o CloudStorage) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CloudStorage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.S3) {
		toSerialize["s3"] = o.S3
	}
	if !IsNil(o.Gcs) {
		toSerialize["gcs"] = o.Gcs
	}
	if !IsNil(o.AzureBlob) {
		toSerialize["azureBlob"] = o.AzureBlob
	}
	if !IsNil(o.Oss) {
		toSerialize["oss"] = o.Oss
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CloudStorage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCloudStorage := _CloudStorage{}

	err = json.Unmarshal(data, &varCloudStorage)

	if err != nil {
		return err
	}

	*o = CloudStorage(varCloudStorage)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "s3")
		delete(additionalProperties, "gcs")
		delete(additionalProperties, "azureBlob")
		delete(additionalProperties, "oss")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCloudStorage struct {
	value *CloudStorage
	isSet bool
}

func (v NullableCloudStorage) Get() *CloudStorage {
	return v.value
}

func (v *NullableCloudStorage) Set(val *CloudStorage) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudStorage) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudStorage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudStorage(val *CloudStorage) *NullableCloudStorage {
	return &NullableCloudStorage{value: val, isSet: true}
}

func (v NullableCloudStorage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudStorage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
