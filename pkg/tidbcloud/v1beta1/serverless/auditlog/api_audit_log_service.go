/*
TiDB Cloud Serverless Database Audit Logging Open API

TiDB Cloud Serverless Database Audit Logging Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditlog

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// AuditLogServiceAPIService AuditLogServiceAPI service
type AuditLogServiceAPIService service

type ApiAuditLogServiceCreateAuditLogFilterRuleRequest struct {
	ctx        context.Context
	ApiService *AuditLogServiceAPIService
	clusterId  string
	body       *AuditLogServiceCreateAuditLogFilterRuleBody
}

func (r ApiAuditLogServiceCreateAuditLogFilterRuleRequest) Body(body AuditLogServiceCreateAuditLogFilterRuleBody) ApiAuditLogServiceCreateAuditLogFilterRuleRequest {
	r.body = &body
	return r
}

func (r ApiAuditLogServiceCreateAuditLogFilterRuleRequest) Execute() (*AuditLogFilterRule, *http.Response, error) {
	return r.ApiService.AuditLogServiceCreateAuditLogFilterRuleExecute(r)
}

/*
AuditLogServiceCreateAuditLogFilterRule Create audit log filter rule.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param clusterId Required.
	@return ApiAuditLogServiceCreateAuditLogFilterRuleRequest
*/
func (a *AuditLogServiceAPIService) AuditLogServiceCreateAuditLogFilterRule(ctx context.Context, clusterId string) ApiAuditLogServiceCreateAuditLogFilterRuleRequest {
	return ApiAuditLogServiceCreateAuditLogFilterRuleRequest{
		ApiService: a,
		ctx:        ctx,
		clusterId:  clusterId,
	}
}

// Execute executes the request
//
//	@return AuditLogFilterRule
func (a *AuditLogServiceAPIService) AuditLogServiceCreateAuditLogFilterRuleExecute(r ApiAuditLogServiceCreateAuditLogFilterRuleRequest) (*AuditLogFilterRule, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AuditLogFilterRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditLogServiceAPIService.AuditLogServiceCreateAuditLogFilterRule")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1beta1/clusters/{clusterId}/auditlogs/filterRules"
	localVarPath = strings.Replace(localVarPath, "{"+"clusterId"+"}", url.PathEscape(parameterValueToString(r.clusterId, "clusterId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Status
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAuditLogServiceDeleteAuditLogFilterRuleRequest struct {
	ctx        context.Context
	ApiService *AuditLogServiceAPIService
	clusterId  string
	name       string
}

func (r ApiAuditLogServiceDeleteAuditLogFilterRuleRequest) Execute() (*AuditLogFilterRule, *http.Response, error) {
	return r.ApiService.AuditLogServiceDeleteAuditLogFilterRuleExecute(r)
}

/*
AuditLogServiceDeleteAuditLogFilterRule Delete audit log filter rule.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param clusterId Required.
	@param name Required. The name of the filter rule.
	@return ApiAuditLogServiceDeleteAuditLogFilterRuleRequest
*/
func (a *AuditLogServiceAPIService) AuditLogServiceDeleteAuditLogFilterRule(ctx context.Context, clusterId string, name string) ApiAuditLogServiceDeleteAuditLogFilterRuleRequest {
	return ApiAuditLogServiceDeleteAuditLogFilterRuleRequest{
		ApiService: a,
		ctx:        ctx,
		clusterId:  clusterId,
		name:       name,
	}
}

// Execute executes the request
//
//	@return AuditLogFilterRule
func (a *AuditLogServiceAPIService) AuditLogServiceDeleteAuditLogFilterRuleExecute(r ApiAuditLogServiceDeleteAuditLogFilterRuleRequest) (*AuditLogFilterRule, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AuditLogFilterRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditLogServiceAPIService.AuditLogServiceDeleteAuditLogFilterRule")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1beta1/clusters/{clusterId}/auditlogs/filterRules/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"clusterId"+"}", url.PathEscape(parameterValueToString(r.clusterId, "clusterId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Status
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAuditLogServiceDownloadAuditLogsRequest struct {
	ctx        context.Context
	ApiService *AuditLogServiceAPIService
	clusterId  string
	body       *AuditLogServiceDownloadAuditLogsBody
}

func (r ApiAuditLogServiceDownloadAuditLogsRequest) Body(body AuditLogServiceDownloadAuditLogsBody) ApiAuditLogServiceDownloadAuditLogsRequest {
	r.body = &body
	return r
}

func (r ApiAuditLogServiceDownloadAuditLogsRequest) Execute() (*DownloadAuditLogsResponse, *http.Response, error) {
	return r.ApiService.AuditLogServiceDownloadAuditLogsExecute(r)
}

/*
AuditLogServiceDownloadAuditLogs Generate audit logs download url

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param clusterId Required. The ID of the cluster.
	@return ApiAuditLogServiceDownloadAuditLogsRequest
*/
func (a *AuditLogServiceAPIService) AuditLogServiceDownloadAuditLogs(ctx context.Context, clusterId string) ApiAuditLogServiceDownloadAuditLogsRequest {
	return ApiAuditLogServiceDownloadAuditLogsRequest{
		ApiService: a,
		ctx:        ctx,
		clusterId:  clusterId,
	}
}

// Execute executes the request
//
//	@return DownloadAuditLogsResponse
func (a *AuditLogServiceAPIService) AuditLogServiceDownloadAuditLogsExecute(r ApiAuditLogServiceDownloadAuditLogsRequest) (*DownloadAuditLogsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DownloadAuditLogsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditLogServiceAPIService.AuditLogServiceDownloadAuditLogs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1beta1/clusters/{clusterId}/auditlogs:download"
	localVarPath = strings.Replace(localVarPath, "{"+"clusterId"+"}", url.PathEscape(parameterValueToString(r.clusterId, "clusterId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Status
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAuditLogServiceGetAuditLogFilterRuleRequest struct {
	ctx        context.Context
	ApiService *AuditLogServiceAPIService
	clusterId  string
	name       string
}

func (r ApiAuditLogServiceGetAuditLogFilterRuleRequest) Execute() (*AuditLogFilterRule, *http.Response, error) {
	return r.ApiService.AuditLogServiceGetAuditLogFilterRuleExecute(r)
}

/*
AuditLogServiceGetAuditLogFilterRule Get audit log filter rule.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param clusterId Required.
	@param name Required. The name of the filter rule.
	@return ApiAuditLogServiceGetAuditLogFilterRuleRequest
*/
func (a *AuditLogServiceAPIService) AuditLogServiceGetAuditLogFilterRule(ctx context.Context, clusterId string, name string) ApiAuditLogServiceGetAuditLogFilterRuleRequest {
	return ApiAuditLogServiceGetAuditLogFilterRuleRequest{
		ApiService: a,
		ctx:        ctx,
		clusterId:  clusterId,
		name:       name,
	}
}

// Execute executes the request
//
//	@return AuditLogFilterRule
func (a *AuditLogServiceAPIService) AuditLogServiceGetAuditLogFilterRuleExecute(r ApiAuditLogServiceGetAuditLogFilterRuleRequest) (*AuditLogFilterRule, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AuditLogFilterRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditLogServiceAPIService.AuditLogServiceGetAuditLogFilterRule")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1beta1/clusters/{clusterId}/auditlogs/filterRules/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"clusterId"+"}", url.PathEscape(parameterValueToString(r.clusterId, "clusterId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Status
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAuditLogServiceListAuditLogFilterRulesRequest struct {
	ctx        context.Context
	ApiService *AuditLogServiceAPIService
	clusterId  string
}

func (r ApiAuditLogServiceListAuditLogFilterRulesRequest) Execute() (*ListAuditLogFilterRulesResponse, *http.Response, error) {
	return r.ApiService.AuditLogServiceListAuditLogFilterRulesExecute(r)
}

/*
AuditLogServiceListAuditLogFilterRules List audit log filter rules.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param clusterId Required.
	@return ApiAuditLogServiceListAuditLogFilterRulesRequest
*/
func (a *AuditLogServiceAPIService) AuditLogServiceListAuditLogFilterRules(ctx context.Context, clusterId string) ApiAuditLogServiceListAuditLogFilterRulesRequest {
	return ApiAuditLogServiceListAuditLogFilterRulesRequest{
		ApiService: a,
		ctx:        ctx,
		clusterId:  clusterId,
	}
}

// Execute executes the request
//
//	@return ListAuditLogFilterRulesResponse
func (a *AuditLogServiceAPIService) AuditLogServiceListAuditLogFilterRulesExecute(r ApiAuditLogServiceListAuditLogFilterRulesRequest) (*ListAuditLogFilterRulesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListAuditLogFilterRulesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditLogServiceAPIService.AuditLogServiceListAuditLogFilterRules")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1beta1/clusters/{clusterId}/auditlogs/filterRules"
	localVarPath = strings.Replace(localVarPath, "{"+"clusterId"+"}", url.PathEscape(parameterValueToString(r.clusterId, "clusterId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Status
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAuditLogServiceListAuditLogsRequest struct {
	ctx        context.Context
	ApiService *AuditLogServiceAPIService
	clusterId  string
	date       *string
	pageSize   *int32
	pageToken  *string
}

// Optional. The UTC date of the audit logs in the format of &#x60;YYYY-MM-DD&#x60; (e.g. 2025-01-01).
func (r ApiAuditLogServiceListAuditLogsRequest) Date(date string) ApiAuditLogServiceListAuditLogsRequest {
	r.date = &date
	return r
}

// Optional. The maximum number to return, default is 100, and the maximum is 1000.
func (r ApiAuditLogServiceListAuditLogsRequest) PageSize(pageSize int32) ApiAuditLogServiceListAuditLogsRequest {
	r.pageSize = &pageSize
	return r
}

// Optional. The page token from the previous response for pagination.
func (r ApiAuditLogServiceListAuditLogsRequest) PageToken(pageToken string) ApiAuditLogServiceListAuditLogsRequest {
	r.pageToken = &pageToken
	return r
}

func (r ApiAuditLogServiceListAuditLogsRequest) Execute() (*ListAuditLogsResponse, *http.Response, error) {
	return r.ApiService.AuditLogServiceListAuditLogsExecute(r)
}

/*
AuditLogServiceListAuditLogs List database audit logs.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param clusterId Required. The ID of the cluster.
	@return ApiAuditLogServiceListAuditLogsRequest
*/
func (a *AuditLogServiceAPIService) AuditLogServiceListAuditLogs(ctx context.Context, clusterId string) ApiAuditLogServiceListAuditLogsRequest {
	return ApiAuditLogServiceListAuditLogsRequest{
		ApiService: a,
		ctx:        ctx,
		clusterId:  clusterId,
	}
}

// Execute executes the request
//
//	@return ListAuditLogsResponse
func (a *AuditLogServiceAPIService) AuditLogServiceListAuditLogsExecute(r ApiAuditLogServiceListAuditLogsRequest) (*ListAuditLogsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ListAuditLogsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditLogServiceAPIService.AuditLogServiceListAuditLogs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1beta1/clusters/{clusterId}/auditlogs"
	localVarPath = strings.Replace(localVarPath, "{"+"clusterId"+"}", url.PathEscape(parameterValueToString(r.clusterId, "clusterId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.date != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date", r.date, "", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "", "")
	}
	if r.pageToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageToken", r.pageToken, "", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Status
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAuditLogServiceUpdateAuditLogFilterRuleRequest struct {
	ctx        context.Context
	ApiService *AuditLogServiceAPIService
	clusterId  string
	name       string
	body       *AuditLogServiceUpdateAuditLogFilterRuleBody
}

func (r ApiAuditLogServiceUpdateAuditLogFilterRuleRequest) Body(body AuditLogServiceUpdateAuditLogFilterRuleBody) ApiAuditLogServiceUpdateAuditLogFilterRuleRequest {
	r.body = &body
	return r
}

func (r ApiAuditLogServiceUpdateAuditLogFilterRuleRequest) Execute() (*AuditLogFilterRule, *http.Response, error) {
	return r.ApiService.AuditLogServiceUpdateAuditLogFilterRuleExecute(r)
}

/*
AuditLogServiceUpdateAuditLogFilterRule Update audit log filter rule.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param clusterId Required.
	@param name Required. The name of the filter rule.
	@return ApiAuditLogServiceUpdateAuditLogFilterRuleRequest
*/
func (a *AuditLogServiceAPIService) AuditLogServiceUpdateAuditLogFilterRule(ctx context.Context, clusterId string, name string) ApiAuditLogServiceUpdateAuditLogFilterRuleRequest {
	return ApiAuditLogServiceUpdateAuditLogFilterRuleRequest{
		ApiService: a,
		ctx:        ctx,
		clusterId:  clusterId,
		name:       name,
	}
}

// Execute executes the request
//
//	@return AuditLogFilterRule
func (a *AuditLogServiceAPIService) AuditLogServiceUpdateAuditLogFilterRuleExecute(r ApiAuditLogServiceUpdateAuditLogFilterRuleRequest) (*AuditLogFilterRule, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AuditLogFilterRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditLogServiceAPIService.AuditLogServiceUpdateAuditLogFilterRule")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1beta1/clusters/{clusterId}/auditlogs/filterRules/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"clusterId"+"}", url.PathEscape(parameterValueToString(r.clusterId, "clusterId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", url.PathEscape(parameterValueToString(r.name, "name")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Status
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
