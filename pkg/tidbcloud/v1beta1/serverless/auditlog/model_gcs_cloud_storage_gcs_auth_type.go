/*
TiDB Cloud Starter and Essential Database Audit Logging Open API

TiDB Cloud Starter and Essential Database Audit Logging Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditlog

import (
	"encoding/json"
)

// GCSCloudStorageGCSAuthType  - SERVICE_ACCOUNT_KEY: The access method is service account key.
type GCSCloudStorageGCSAuthType string

// List of GCSCloudStorage.GCSAuthType
const (
	GCSCLOUDSTORAGEGCSAUTHTYPE_SERVICE_ACCOUNT_KEY GCSCloudStorageGCSAuthType = "SERVICE_ACCOUNT_KEY"
)

// All allowed values of GCSCloudStorageGCSAuthType enum
var AllowedGCSCloudStorageGCSAuthTypeEnumValues = []GCSCloudStorageGCSAuthType{
	"SERVICE_ACCOUNT_KEY",
}

func (v *GCSCloudStorageGCSAuthType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GCSCloudStorageGCSAuthType(value)
	for _, existing := range AllowedGCSCloudStorageGCSAuthTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = GCSCloudStorageGCSAuthType(value)
	return nil
}

// NewGCSCloudStorageGCSAuthTypeFromValue returns a pointer to a valid GCSCloudStorageGCSAuthType for the value passed as argument
func NewGCSCloudStorageGCSAuthTypeFromValue(v string) *GCSCloudStorageGCSAuthType {
	ev := GCSCloudStorageGCSAuthType(v)
	return &ev
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GCSCloudStorageGCSAuthType) IsValid() bool {
	for _, existing := range AllowedGCSCloudStorageGCSAuthTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GCSCloudStorage.GCSAuthType value
func (v GCSCloudStorageGCSAuthType) Ptr() *GCSCloudStorageGCSAuthType {
	return &v
}

type NullableGCSCloudStorageGCSAuthType struct {
	value *GCSCloudStorageGCSAuthType
	isSet bool
}

func (v NullableGCSCloudStorageGCSAuthType) Get() *GCSCloudStorageGCSAuthType {
	return v.value
}

func (v *NullableGCSCloudStorageGCSAuthType) Set(val *GCSCloudStorageGCSAuthType) {
	v.value = val
	v.isSet = true
}

func (v NullableGCSCloudStorageGCSAuthType) IsSet() bool {
	return v.isSet
}

func (v *NullableGCSCloudStorageGCSAuthType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGCSCloudStorageGCSAuthType(val *GCSCloudStorageGCSAuthType) *NullableGCSCloudStorageGCSAuthType {
	return &NullableGCSCloudStorageGCSAuthType{value: val, isSet: true}
}

func (v NullableGCSCloudStorageGCSAuthType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGCSCloudStorageGCSAuthType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
