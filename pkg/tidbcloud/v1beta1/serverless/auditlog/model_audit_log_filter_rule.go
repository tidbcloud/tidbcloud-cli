/*
TiDB Cloud Starter and Essential Database Audit Logging Open API

TiDB Cloud Starter and Essential Database Audit Logging Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package auditlog

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the AuditLogFilterRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuditLogFilterRule{}

// AuditLogFilterRule struct for AuditLogFilterRule
type AuditLogFilterRule struct {
	// The audit log filter rule ID.
	FilterRuleId *string `json:"filterRuleId,omitempty"`
	// The cluster ID.
	ClusterId *string `json:"clusterId,omitempty"`
	// Unique name of the filter rule within a cluster.
	DisplayName string   `json:"displayName"`
	Users       []string `json:"users"`
	// List of filters combined with an OR relationship. Set filters to [{}] will filter all logs.
	Filters []AuditLogFilter `json:"filters"`
	// Indicates whether the filter rule is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	// Timestamp when the filter rule was created.
	CreateTime *time.Time `json:"createTime,omitempty"`
	// Timestamp when the filter rule was updated.
	UpdateTime           NullableTime `json:"updateTime,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AuditLogFilterRule AuditLogFilterRule

// NewAuditLogFilterRule instantiates a new AuditLogFilterRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuditLogFilterRule(displayName string, users []string, filters []AuditLogFilter) *AuditLogFilterRule {
	this := AuditLogFilterRule{}
	this.DisplayName = displayName
	this.Users = users
	this.Filters = filters
	return &this
}

// NewAuditLogFilterRuleWithDefaults instantiates a new AuditLogFilterRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuditLogFilterRuleWithDefaults() *AuditLogFilterRule {
	this := AuditLogFilterRule{}
	return &this
}

// GetFilterRuleId returns the FilterRuleId field value if set, zero value otherwise.
func (o *AuditLogFilterRule) GetFilterRuleId() string {
	if o == nil || IsNil(o.FilterRuleId) {
		var ret string
		return ret
	}
	return *o.FilterRuleId
}

// GetFilterRuleIdOk returns a tuple with the FilterRuleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogFilterRule) GetFilterRuleIdOk() (*string, bool) {
	if o == nil || IsNil(o.FilterRuleId) {
		return nil, false
	}
	return o.FilterRuleId, true
}

// HasFilterRuleId returns a boolean if a field has been set.
func (o *AuditLogFilterRule) HasFilterRuleId() bool {
	if o != nil && !IsNil(o.FilterRuleId) {
		return true
	}

	return false
}

// SetFilterRuleId gets a reference to the given string and assigns it to the FilterRuleId field.
func (o *AuditLogFilterRule) SetFilterRuleId(v string) {
	o.FilterRuleId = &v
}

// GetClusterId returns the ClusterId field value if set, zero value otherwise.
func (o *AuditLogFilterRule) GetClusterId() string {
	if o == nil || IsNil(o.ClusterId) {
		var ret string
		return ret
	}
	return *o.ClusterId
}

// GetClusterIdOk returns a tuple with the ClusterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogFilterRule) GetClusterIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClusterId) {
		return nil, false
	}
	return o.ClusterId, true
}

// HasClusterId returns a boolean if a field has been set.
func (o *AuditLogFilterRule) HasClusterId() bool {
	if o != nil && !IsNil(o.ClusterId) {
		return true
	}

	return false
}

// SetClusterId gets a reference to the given string and assigns it to the ClusterId field.
func (o *AuditLogFilterRule) SetClusterId(v string) {
	o.ClusterId = &v
}

// GetDisplayName returns the DisplayName field value
func (o *AuditLogFilterRule) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *AuditLogFilterRule) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *AuditLogFilterRule) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetUsers returns the Users field value
func (o *AuditLogFilterRule) GetUsers() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Users
}

// GetUsersOk returns a tuple with the Users field value
// and a boolean to check if the value has been set.
func (o *AuditLogFilterRule) GetUsersOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Users, true
}

// SetUsers sets field value
func (o *AuditLogFilterRule) SetUsers(v []string) {
	o.Users = v
}

// GetFilters returns the Filters field value
func (o *AuditLogFilterRule) GetFilters() []AuditLogFilter {
	if o == nil {
		var ret []AuditLogFilter
		return ret
	}

	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value
// and a boolean to check if the value has been set.
func (o *AuditLogFilterRule) GetFiltersOk() ([]AuditLogFilter, bool) {
	if o == nil {
		return nil, false
	}
	return o.Filters, true
}

// SetFilters sets field value
func (o *AuditLogFilterRule) SetFilters(v []AuditLogFilter) {
	o.Filters = v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *AuditLogFilterRule) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogFilterRule) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *AuditLogFilterRule) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *AuditLogFilterRule) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetCreateTime returns the CreateTime field value if set, zero value otherwise.
func (o *AuditLogFilterRule) GetCreateTime() time.Time {
	if o == nil || IsNil(o.CreateTime) {
		var ret time.Time
		return ret
	}
	return *o.CreateTime
}

// GetCreateTimeOk returns a tuple with the CreateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogFilterRule) GetCreateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreateTime) {
		return nil, false
	}
	return o.CreateTime, true
}

// HasCreateTime returns a boolean if a field has been set.
func (o *AuditLogFilterRule) HasCreateTime() bool {
	if o != nil && !IsNil(o.CreateTime) {
		return true
	}

	return false
}

// SetCreateTime gets a reference to the given time.Time and assigns it to the CreateTime field.
func (o *AuditLogFilterRule) SetCreateTime(v time.Time) {
	o.CreateTime = &v
}

// GetUpdateTime returns the UpdateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AuditLogFilterRule) GetUpdateTime() time.Time {
	if o == nil || IsNil(o.UpdateTime.Get()) {
		var ret time.Time
		return ret
	}
	return *o.UpdateTime.Get()
}

// GetUpdateTimeOk returns a tuple with the UpdateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuditLogFilterRule) GetUpdateTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdateTime.Get(), o.UpdateTime.IsSet()
}

// HasUpdateTime returns a boolean if a field has been set.
func (o *AuditLogFilterRule) HasUpdateTime() bool {
	if o != nil && o.UpdateTime.IsSet() {
		return true
	}

	return false
}

// SetUpdateTime gets a reference to the given NullableTime and assigns it to the UpdateTime field.
func (o *AuditLogFilterRule) SetUpdateTime(v time.Time) {
	o.UpdateTime.Set(&v)
}

// SetUpdateTimeNil sets the value for UpdateTime to be an explicit nil
func (o *AuditLogFilterRule) SetUpdateTimeNil() {
	o.UpdateTime.Set(nil)
}

// UnsetUpdateTime ensures that no value is present for UpdateTime, not even an explicit nil
func (o *AuditLogFilterRule) UnsetUpdateTime() {
	o.UpdateTime.Unset()
}

func (o AuditLogFilterRule) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuditLogFilterRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FilterRuleId) {
		toSerialize["filterRuleId"] = o.FilterRuleId
	}
	if !IsNil(o.ClusterId) {
		toSerialize["clusterId"] = o.ClusterId
	}
	toSerialize["displayName"] = o.DisplayName
	toSerialize["users"] = o.Users
	toSerialize["filters"] = o.Filters
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	if !IsNil(o.CreateTime) {
		toSerialize["createTime"] = o.CreateTime
	}
	if o.UpdateTime.IsSet() {
		toSerialize["updateTime"] = o.UpdateTime.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AuditLogFilterRule) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"displayName",
		"users",
		"filters",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAuditLogFilterRule := _AuditLogFilterRule{}

	err = json.Unmarshal(data, &varAuditLogFilterRule)

	if err != nil {
		return err
	}

	*o = AuditLogFilterRule(varAuditLogFilterRule)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "filterRuleId")
		delete(additionalProperties, "clusterId")
		delete(additionalProperties, "displayName")
		delete(additionalProperties, "users")
		delete(additionalProperties, "filters")
		delete(additionalProperties, "disabled")
		delete(additionalProperties, "createTime")
		delete(additionalProperties, "updateTime")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAuditLogFilterRule struct {
	value *AuditLogFilterRule
	isSet bool
}

func (v NullableAuditLogFilterRule) Get() *AuditLogFilterRule {
	return v.value
}

func (v *NullableAuditLogFilterRule) Set(val *AuditLogFilterRule) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditLogFilterRule) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditLogFilterRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditLogFilterRule(val *AuditLogFilterRule) *NullableAuditLogFilterRule {
	return &NullableAuditLogFilterRule{value: val, isSet: true}
}

func (v NullableAuditLogFilterRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditLogFilterRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
