/*
TiDB Cloud Serverless Open API

Testing BranchServiceAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package branch

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID/branch"
)

func Test_branch_BranchServiceAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test BranchServiceAPIService BranchServiceCreateBranch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterId string

		resp, httpRes, err := apiClient.BranchServiceAPI.BranchServiceCreateBranch(context.Background(), clusterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BranchServiceAPIService BranchServiceDeleteBranch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterId string
		var branchId string

		resp, httpRes, err := apiClient.BranchServiceAPI.BranchServiceDeleteBranch(context.Background(), clusterId, branchId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BranchServiceAPIService BranchServiceGetBranch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterId string
		var branchId string

		resp, httpRes, err := apiClient.BranchServiceAPI.BranchServiceGetBranch(context.Background(), clusterId, branchId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BranchServiceAPIService BranchServiceListBranches", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterId string

		resp, httpRes, err := apiClient.BranchServiceAPI.BranchServiceListBranches(context.Background(), clusterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
