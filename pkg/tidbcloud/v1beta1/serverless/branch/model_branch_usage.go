/*
TiDB Cloud Serverless Open API

TiDB Cloud Serverless Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package branch

import (
	"encoding/json"
)

// checks if the BranchUsage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BranchUsage{}

// BranchUsage Message for usage metrics for this cluster.
type BranchUsage struct {
	// Output Only. The latest value of Request Unit Metric for this cluster.
	RequestUnit *string `json:"requestUnit,omitempty"`
	// Output Only. The latest value of Row Storage Metric for this cluster.
	RowStorage *float64 `json:"rowStorage,omitempty"`
	// Output Only. The latest value of Columnar Storage Metric for this cluster.
	ColumnarStorage      *float64 `json:"columnarStorage,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _BranchUsage BranchUsage

// NewBranchUsage instantiates a new BranchUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBranchUsage() *BranchUsage {
	this := BranchUsage{}
	return &this
}

// NewBranchUsageWithDefaults instantiates a new BranchUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBranchUsageWithDefaults() *BranchUsage {
	this := BranchUsage{}
	return &this
}

// GetRequestUnit returns the RequestUnit field value if set, zero value otherwise.
func (o *BranchUsage) GetRequestUnit() string {
	if o == nil || IsNil(o.RequestUnit) {
		var ret string
		return ret
	}
	return *o.RequestUnit
}

// GetRequestUnitOk returns a tuple with the RequestUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BranchUsage) GetRequestUnitOk() (*string, bool) {
	if o == nil || IsNil(o.RequestUnit) {
		return nil, false
	}
	return o.RequestUnit, true
}

// HasRequestUnit returns a boolean if a field has been set.
func (o *BranchUsage) HasRequestUnit() bool {
	if o != nil && !IsNil(o.RequestUnit) {
		return true
	}

	return false
}

// SetRequestUnit gets a reference to the given string and assigns it to the RequestUnit field.
func (o *BranchUsage) SetRequestUnit(v string) {
	o.RequestUnit = &v
}

// GetRowStorage returns the RowStorage field value if set, zero value otherwise.
func (o *BranchUsage) GetRowStorage() float64 {
	if o == nil || IsNil(o.RowStorage) {
		var ret float64
		return ret
	}
	return *o.RowStorage
}

// GetRowStorageOk returns a tuple with the RowStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BranchUsage) GetRowStorageOk() (*float64, bool) {
	if o == nil || IsNil(o.RowStorage) {
		return nil, false
	}
	return o.RowStorage, true
}

// HasRowStorage returns a boolean if a field has been set.
func (o *BranchUsage) HasRowStorage() bool {
	if o != nil && !IsNil(o.RowStorage) {
		return true
	}

	return false
}

// SetRowStorage gets a reference to the given float64 and assigns it to the RowStorage field.
func (o *BranchUsage) SetRowStorage(v float64) {
	o.RowStorage = &v
}

// GetColumnarStorage returns the ColumnarStorage field value if set, zero value otherwise.
func (o *BranchUsage) GetColumnarStorage() float64 {
	if o == nil || IsNil(o.ColumnarStorage) {
		var ret float64
		return ret
	}
	return *o.ColumnarStorage
}

// GetColumnarStorageOk returns a tuple with the ColumnarStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BranchUsage) GetColumnarStorageOk() (*float64, bool) {
	if o == nil || IsNil(o.ColumnarStorage) {
		return nil, false
	}
	return o.ColumnarStorage, true
}

// HasColumnarStorage returns a boolean if a field has been set.
func (o *BranchUsage) HasColumnarStorage() bool {
	if o != nil && !IsNil(o.ColumnarStorage) {
		return true
	}

	return false
}

// SetColumnarStorage gets a reference to the given float64 and assigns it to the ColumnarStorage field.
func (o *BranchUsage) SetColumnarStorage(v float64) {
	o.ColumnarStorage = &v
}

func (o BranchUsage) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BranchUsage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RequestUnit) {
		toSerialize["requestUnit"] = o.RequestUnit
	}
	if !IsNil(o.RowStorage) {
		toSerialize["rowStorage"] = o.RowStorage
	}
	if !IsNil(o.ColumnarStorage) {
		toSerialize["columnarStorage"] = o.ColumnarStorage
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BranchUsage) UnmarshalJSON(data []byte) (err error) {
	varBranchUsage := _BranchUsage{}

	err = json.Unmarshal(data, &varBranchUsage)

	if err != nil {
		return err
	}

	*o = BranchUsage(varBranchUsage)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "requestUnit")
		delete(additionalProperties, "rowStorage")
		delete(additionalProperties, "columnarStorage")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBranchUsage struct {
	value *BranchUsage
	isSet bool
}

func (v NullableBranchUsage) Get() *BranchUsage {
	return v.value
}

func (v *NullableBranchUsage) Set(val *BranchUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableBranchUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableBranchUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBranchUsage(val *BranchUsage) *NullableBranchUsage {
	return &NullableBranchUsage{value: val, isSet: true}
}

func (v NullableBranchUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBranchUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
