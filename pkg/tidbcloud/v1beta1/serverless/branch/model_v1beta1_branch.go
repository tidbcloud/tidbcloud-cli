/*
TiDB Cloud Serverless Open API

TiDB Cloud Serverless Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package branch

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the V1beta1Branch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1beta1Branch{}

// V1beta1Branch struct for V1beta1Branch
type V1beta1Branch struct {
	// Output Only. The name of the resource.
	Name *string `json:"name,omitempty"`
	// Output only. The system-generated ID of the resource.
	BranchId *string `json:"branchId,omitempty"`
	// Required. User-settable and human-readable display name for the branch.
	DisplayName string `json:"displayName"`
	// Output only. The cluster ID of this branch.
	ClusterId *string `json:"clusterId,omitempty"`
	// Optional. The parent ID of this branch.
	ParentId *string `json:"parentId,omitempty"`
	// Output only. The creator of the branch.
	CreatedBy *string `json:"createdBy,omitempty"`
	// Output only. The state of this branch.
	State *V1beta1BranchState `json:"state,omitempty"`
	// Optional. The endpoints of this branch.
	Endpoints *BranchEndpoints `json:"endpoints,omitempty"`
	// Output only. User name prefix of this branch. For each TiDB Serverless branch, TiDB Cloud generates a unique prefix to distinguish it from other branches. Whenever you use or set a database user name, you must include the prefix in the user name.
	UserPrefix NullableString `json:"userPrefix,omitempty"`
	// Output only. Usage metrics of this branch. Only display in FULL view.
	Usage *BranchUsage `json:"usage,omitempty"`
	CreateTime *time.Time `json:"createTime,omitempty"`
	UpdateTime *time.Time `json:"updateTime,omitempty"`
	// Optional. The annotations of this branch..
	Annotations *map[string]string `json:"annotations,omitempty"`
	// Output only. The parent display name of this branch.
	ParentDisplayName *string `json:"parentDisplayName,omitempty"`
}

type _V1beta1Branch V1beta1Branch

// NewV1beta1Branch instantiates a new V1beta1Branch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1beta1Branch(displayName string) *V1beta1Branch {
	this := V1beta1Branch{}
	this.DisplayName = displayName
	return &this
}

// NewV1beta1BranchWithDefaults instantiates a new V1beta1Branch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1beta1BranchWithDefaults() *V1beta1Branch {
	this := V1beta1Branch{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *V1beta1Branch) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1beta1Branch) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *V1beta1Branch) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *V1beta1Branch) SetName(v string) {
	o.Name = &v
}

// GetBranchId returns the BranchId field value if set, zero value otherwise.
func (o *V1beta1Branch) GetBranchId() string {
	if o == nil || IsNil(o.BranchId) {
		var ret string
		return ret
	}
	return *o.BranchId
}

// GetBranchIdOk returns a tuple with the BranchId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1beta1Branch) GetBranchIdOk() (*string, bool) {
	if o == nil || IsNil(o.BranchId) {
		return nil, false
	}
	return o.BranchId, true
}

// HasBranchId returns a boolean if a field has been set.
func (o *V1beta1Branch) HasBranchId() bool {
	if o != nil && !IsNil(o.BranchId) {
		return true
	}

	return false
}

// SetBranchId gets a reference to the given string and assigns it to the BranchId field.
func (o *V1beta1Branch) SetBranchId(v string) {
	o.BranchId = &v
}

// GetDisplayName returns the DisplayName field value
func (o *V1beta1Branch) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *V1beta1Branch) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *V1beta1Branch) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetClusterId returns the ClusterId field value if set, zero value otherwise.
func (o *V1beta1Branch) GetClusterId() string {
	if o == nil || IsNil(o.ClusterId) {
		var ret string
		return ret
	}
	return *o.ClusterId
}

// GetClusterIdOk returns a tuple with the ClusterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1beta1Branch) GetClusterIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClusterId) {
		return nil, false
	}
	return o.ClusterId, true
}

// HasClusterId returns a boolean if a field has been set.
func (o *V1beta1Branch) HasClusterId() bool {
	if o != nil && !IsNil(o.ClusterId) {
		return true
	}

	return false
}

// SetClusterId gets a reference to the given string and assigns it to the ClusterId field.
func (o *V1beta1Branch) SetClusterId(v string) {
	o.ClusterId = &v
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *V1beta1Branch) GetParentId() string {
	if o == nil || IsNil(o.ParentId) {
		var ret string
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1beta1Branch) GetParentIdOk() (*string, bool) {
	if o == nil || IsNil(o.ParentId) {
		return nil, false
	}
	return o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *V1beta1Branch) HasParentId() bool {
	if o != nil && !IsNil(o.ParentId) {
		return true
	}

	return false
}

// SetParentId gets a reference to the given string and assigns it to the ParentId field.
func (o *V1beta1Branch) SetParentId(v string) {
	o.ParentId = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *V1beta1Branch) GetCreatedBy() string {
	if o == nil || IsNil(o.CreatedBy) {
		var ret string
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1beta1Branch) GetCreatedByOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *V1beta1Branch) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given string and assigns it to the CreatedBy field.
func (o *V1beta1Branch) SetCreatedBy(v string) {
	o.CreatedBy = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *V1beta1Branch) GetState() V1beta1BranchState {
	if o == nil || IsNil(o.State) {
		var ret V1beta1BranchState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1beta1Branch) GetStateOk() (*V1beta1BranchState, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *V1beta1Branch) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given V1beta1BranchState and assigns it to the State field.
func (o *V1beta1Branch) SetState(v V1beta1BranchState) {
	o.State = &v
}

// GetEndpoints returns the Endpoints field value if set, zero value otherwise.
func (o *V1beta1Branch) GetEndpoints() BranchEndpoints {
	if o == nil || IsNil(o.Endpoints) {
		var ret BranchEndpoints
		return ret
	}
	return *o.Endpoints
}

// GetEndpointsOk returns a tuple with the Endpoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1beta1Branch) GetEndpointsOk() (*BranchEndpoints, bool) {
	if o == nil || IsNil(o.Endpoints) {
		return nil, false
	}
	return o.Endpoints, true
}

// HasEndpoints returns a boolean if a field has been set.
func (o *V1beta1Branch) HasEndpoints() bool {
	if o != nil && !IsNil(o.Endpoints) {
		return true
	}

	return false
}

// SetEndpoints gets a reference to the given BranchEndpoints and assigns it to the Endpoints field.
func (o *V1beta1Branch) SetEndpoints(v BranchEndpoints) {
	o.Endpoints = &v
}

// GetUserPrefix returns the UserPrefix field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *V1beta1Branch) GetUserPrefix() string {
	if o == nil || IsNil(o.UserPrefix.Get()) {
		var ret string
		return ret
	}
	return *o.UserPrefix.Get()
}

// GetUserPrefixOk returns a tuple with the UserPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *V1beta1Branch) GetUserPrefixOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserPrefix.Get(), o.UserPrefix.IsSet()
}

// HasUserPrefix returns a boolean if a field has been set.
func (o *V1beta1Branch) HasUserPrefix() bool {
	if o != nil && o.UserPrefix.IsSet() {
		return true
	}

	return false
}

// SetUserPrefix gets a reference to the given NullableString and assigns it to the UserPrefix field.
func (o *V1beta1Branch) SetUserPrefix(v string) {
	o.UserPrefix.Set(&v)
}
// SetUserPrefixNil sets the value for UserPrefix to be an explicit nil
func (o *V1beta1Branch) SetUserPrefixNil() {
	o.UserPrefix.Set(nil)
}

// UnsetUserPrefix ensures that no value is present for UserPrefix, not even an explicit nil
func (o *V1beta1Branch) UnsetUserPrefix() {
	o.UserPrefix.Unset()
}

// GetUsage returns the Usage field value if set, zero value otherwise.
func (o *V1beta1Branch) GetUsage() BranchUsage {
	if o == nil || IsNil(o.Usage) {
		var ret BranchUsage
		return ret
	}
	return *o.Usage
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1beta1Branch) GetUsageOk() (*BranchUsage, bool) {
	if o == nil || IsNil(o.Usage) {
		return nil, false
	}
	return o.Usage, true
}

// HasUsage returns a boolean if a field has been set.
func (o *V1beta1Branch) HasUsage() bool {
	if o != nil && !IsNil(o.Usage) {
		return true
	}

	return false
}

// SetUsage gets a reference to the given BranchUsage and assigns it to the Usage field.
func (o *V1beta1Branch) SetUsage(v BranchUsage) {
	o.Usage = &v
}

// GetCreateTime returns the CreateTime field value if set, zero value otherwise.
func (o *V1beta1Branch) GetCreateTime() time.Time {
	if o == nil || IsNil(o.CreateTime) {
		var ret time.Time
		return ret
	}
	return *o.CreateTime
}

// GetCreateTimeOk returns a tuple with the CreateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1beta1Branch) GetCreateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreateTime) {
		return nil, false
	}
	return o.CreateTime, true
}

// HasCreateTime returns a boolean if a field has been set.
func (o *V1beta1Branch) HasCreateTime() bool {
	if o != nil && !IsNil(o.CreateTime) {
		return true
	}

	return false
}

// SetCreateTime gets a reference to the given time.Time and assigns it to the CreateTime field.
func (o *V1beta1Branch) SetCreateTime(v time.Time) {
	o.CreateTime = &v
}

// GetUpdateTime returns the UpdateTime field value if set, zero value otherwise.
func (o *V1beta1Branch) GetUpdateTime() time.Time {
	if o == nil || IsNil(o.UpdateTime) {
		var ret time.Time
		return ret
	}
	return *o.UpdateTime
}

// GetUpdateTimeOk returns a tuple with the UpdateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1beta1Branch) GetUpdateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdateTime) {
		return nil, false
	}
	return o.UpdateTime, true
}

// HasUpdateTime returns a boolean if a field has been set.
func (o *V1beta1Branch) HasUpdateTime() bool {
	if o != nil && !IsNil(o.UpdateTime) {
		return true
	}

	return false
}

// SetUpdateTime gets a reference to the given time.Time and assigns it to the UpdateTime field.
func (o *V1beta1Branch) SetUpdateTime(v time.Time) {
	o.UpdateTime = &v
}

// GetAnnotations returns the Annotations field value if set, zero value otherwise.
func (o *V1beta1Branch) GetAnnotations() map[string]string {
	if o == nil || IsNil(o.Annotations) {
		var ret map[string]string
		return ret
	}
	return *o.Annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1beta1Branch) GetAnnotationsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Annotations) {
		return nil, false
	}
	return o.Annotations, true
}

// HasAnnotations returns a boolean if a field has been set.
func (o *V1beta1Branch) HasAnnotations() bool {
	if o != nil && !IsNil(o.Annotations) {
		return true
	}

	return false
}

// SetAnnotations gets a reference to the given map[string]string and assigns it to the Annotations field.
func (o *V1beta1Branch) SetAnnotations(v map[string]string) {
	o.Annotations = &v
}

// GetParentDisplayName returns the ParentDisplayName field value if set, zero value otherwise.
func (o *V1beta1Branch) GetParentDisplayName() string {
	if o == nil || IsNil(o.ParentDisplayName) {
		var ret string
		return ret
	}
	return *o.ParentDisplayName
}

// GetParentDisplayNameOk returns a tuple with the ParentDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1beta1Branch) GetParentDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.ParentDisplayName) {
		return nil, false
	}
	return o.ParentDisplayName, true
}

// HasParentDisplayName returns a boolean if a field has been set.
func (o *V1beta1Branch) HasParentDisplayName() bool {
	if o != nil && !IsNil(o.ParentDisplayName) {
		return true
	}

	return false
}

// SetParentDisplayName gets a reference to the given string and assigns it to the ParentDisplayName field.
func (o *V1beta1Branch) SetParentDisplayName(v string) {
	o.ParentDisplayName = &v
}

func (o V1beta1Branch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1beta1Branch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.BranchId) {
		toSerialize["branchId"] = o.BranchId
	}
	toSerialize["displayName"] = o.DisplayName
	if !IsNil(o.ClusterId) {
		toSerialize["clusterId"] = o.ClusterId
	}
	if !IsNil(o.ParentId) {
		toSerialize["parentId"] = o.ParentId
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Endpoints) {
		toSerialize["endpoints"] = o.Endpoints
	}
	if o.UserPrefix.IsSet() {
		toSerialize["userPrefix"] = o.UserPrefix.Get()
	}
	if !IsNil(o.Usage) {
		toSerialize["usage"] = o.Usage
	}
	if !IsNil(o.CreateTime) {
		toSerialize["createTime"] = o.CreateTime
	}
	if !IsNil(o.UpdateTime) {
		toSerialize["updateTime"] = o.UpdateTime
	}
	if !IsNil(o.Annotations) {
		toSerialize["annotations"] = o.Annotations
	}
	if !IsNil(o.ParentDisplayName) {
		toSerialize["parentDisplayName"] = o.ParentDisplayName
	}
	return toSerialize, nil
}

func (o *V1beta1Branch) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"displayName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1beta1Branch := _V1beta1Branch{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1beta1Branch)

	if err != nil {
		return err
	}

	*o = V1beta1Branch(varV1beta1Branch)

	return err
}

type NullableV1beta1Branch struct {
	value *V1beta1Branch
	isSet bool
}

func (v NullableV1beta1Branch) Get() *V1beta1Branch {
	return v.value
}

func (v *NullableV1beta1Branch) Set(val *V1beta1Branch) {
	v.value = val
	v.isSet = true
}

func (v NullableV1beta1Branch) IsSet() bool {
	return v.isSet
}

func (v *NullableV1beta1Branch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1beta1Branch(val *V1beta1Branch) *NullableV1beta1Branch {
	return &NullableV1beta1Branch{value: val, isSet: true}
}

func (v NullableV1beta1Branch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1beta1Branch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


