/*
TiDB Cloud Starter and Essential API

TiDB Cloud Starter and Essential API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package branch

import (
	"encoding/json"
)

// checks if the BranchServiceUpdateSqlUserBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BranchServiceUpdateSqlUserBody{}

// BranchServiceUpdateSqlUserBody struct for BranchServiceUpdateSqlUserBody
type BranchServiceUpdateSqlUserBody struct {
	// The password of the sql user. It must be between 8 and 64 characters long and can contain letters, numbers, and special characters.
	Password             *string `json:"password,omitempty" validate:"regexp=^.{8,64}$"`
	AdditionalProperties map[string]interface{}
}

type _BranchServiceUpdateSqlUserBody BranchServiceUpdateSqlUserBody

// NewBranchServiceUpdateSqlUserBody instantiates a new BranchServiceUpdateSqlUserBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBranchServiceUpdateSqlUserBody() *BranchServiceUpdateSqlUserBody {
	this := BranchServiceUpdateSqlUserBody{}
	return &this
}

// NewBranchServiceUpdateSqlUserBodyWithDefaults instantiates a new BranchServiceUpdateSqlUserBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBranchServiceUpdateSqlUserBodyWithDefaults() *BranchServiceUpdateSqlUserBody {
	this := BranchServiceUpdateSqlUserBody{}
	return &this
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *BranchServiceUpdateSqlUserBody) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BranchServiceUpdateSqlUserBody) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *BranchServiceUpdateSqlUserBody) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *BranchServiceUpdateSqlUserBody) SetPassword(v string) {
	o.Password = &v
}

func (o BranchServiceUpdateSqlUserBody) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BranchServiceUpdateSqlUserBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BranchServiceUpdateSqlUserBody) UnmarshalJSON(data []byte) (err error) {
	varBranchServiceUpdateSqlUserBody := _BranchServiceUpdateSqlUserBody{}

	err = json.Unmarshal(data, &varBranchServiceUpdateSqlUserBody)

	if err != nil {
		return err
	}

	*o = BranchServiceUpdateSqlUserBody(varBranchServiceUpdateSqlUserBody)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "password")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBranchServiceUpdateSqlUserBody struct {
	value *BranchServiceUpdateSqlUserBody
	isSet bool
}

func (v NullableBranchServiceUpdateSqlUserBody) Get() *BranchServiceUpdateSqlUserBody {
	return v.value
}

func (v *NullableBranchServiceUpdateSqlUserBody) Set(val *BranchServiceUpdateSqlUserBody) {
	v.value = val
	v.isSet = true
}

func (v NullableBranchServiceUpdateSqlUserBody) IsSet() bool {
	return v.isSet
}

func (v *NullableBranchServiceUpdateSqlUserBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBranchServiceUpdateSqlUserBody(val *BranchServiceUpdateSqlUserBody) *NullableBranchServiceUpdateSqlUserBody {
	return &NullableBranchServiceUpdateSqlUserBody{value: val, isSet: true}
}

func (v NullableBranchServiceUpdateSqlUserBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBranchServiceUpdateSqlUserBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
