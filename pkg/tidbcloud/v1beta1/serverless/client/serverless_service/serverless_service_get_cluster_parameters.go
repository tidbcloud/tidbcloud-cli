// Code generated by go-swagger; DO NOT EDIT.

package serverless_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewServerlessServiceGetClusterParams creates a new ServerlessServiceGetClusterParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewServerlessServiceGetClusterParams() *ServerlessServiceGetClusterParams {
	return &ServerlessServiceGetClusterParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewServerlessServiceGetClusterParamsWithTimeout creates a new ServerlessServiceGetClusterParams object
// with the ability to set a timeout on a request.
func NewServerlessServiceGetClusterParamsWithTimeout(timeout time.Duration) *ServerlessServiceGetClusterParams {
	return &ServerlessServiceGetClusterParams{
		timeout: timeout,
	}
}

// NewServerlessServiceGetClusterParamsWithContext creates a new ServerlessServiceGetClusterParams object
// with the ability to set a context for a request.
func NewServerlessServiceGetClusterParamsWithContext(ctx context.Context) *ServerlessServiceGetClusterParams {
	return &ServerlessServiceGetClusterParams{
		Context: ctx,
	}
}

// NewServerlessServiceGetClusterParamsWithHTTPClient creates a new ServerlessServiceGetClusterParams object
// with the ability to set a custom HTTPClient for a request.
func NewServerlessServiceGetClusterParamsWithHTTPClient(client *http.Client) *ServerlessServiceGetClusterParams {
	return &ServerlessServiceGetClusterParams{
		HTTPClient: client,
	}
}

/*
ServerlessServiceGetClusterParams contains all the parameters to send to the API endpoint

	for the serverless service get cluster operation.

	Typically these are written to a http.Request.
*/
type ServerlessServiceGetClusterParams struct {

	/* ClusterID.

	   Required. The ID of the cluster to be retrieved.
	*/
	ClusterID string

	/* View.

	    Optional. The level of detail to return for the cluster.

	- CLUSTER_VIEW_UNSPECIFIED: The server default is used if unspecified.
	- BASIC: Only basic information about the cluster is returned.
	- FULL: All details about the cluster are returned.

	    Default: "CLUSTER_VIEW_UNSPECIFIED"
	*/
	View *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the serverless service get cluster params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ServerlessServiceGetClusterParams) WithDefaults() *ServerlessServiceGetClusterParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the serverless service get cluster params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ServerlessServiceGetClusterParams) SetDefaults() {
	var (
		viewDefault = string("CLUSTER_VIEW_UNSPECIFIED")
	)

	val := ServerlessServiceGetClusterParams{
		View: &viewDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the serverless service get cluster params
func (o *ServerlessServiceGetClusterParams) WithTimeout(timeout time.Duration) *ServerlessServiceGetClusterParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the serverless service get cluster params
func (o *ServerlessServiceGetClusterParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the serverless service get cluster params
func (o *ServerlessServiceGetClusterParams) WithContext(ctx context.Context) *ServerlessServiceGetClusterParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the serverless service get cluster params
func (o *ServerlessServiceGetClusterParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the serverless service get cluster params
func (o *ServerlessServiceGetClusterParams) WithHTTPClient(client *http.Client) *ServerlessServiceGetClusterParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the serverless service get cluster params
func (o *ServerlessServiceGetClusterParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClusterID adds the clusterID to the serverless service get cluster params
func (o *ServerlessServiceGetClusterParams) WithClusterID(clusterID string) *ServerlessServiceGetClusterParams {
	o.SetClusterID(clusterID)
	return o
}

// SetClusterID adds the clusterId to the serverless service get cluster params
func (o *ServerlessServiceGetClusterParams) SetClusterID(clusterID string) {
	o.ClusterID = clusterID
}

// WithView adds the view to the serverless service get cluster params
func (o *ServerlessServiceGetClusterParams) WithView(view *string) *ServerlessServiceGetClusterParams {
	o.SetView(view)
	return o
}

// SetView adds the view to the serverless service get cluster params
func (o *ServerlessServiceGetClusterParams) SetView(view *string) {
	o.View = view
}

// WriteToRequest writes these params to a swagger request
func (o *ServerlessServiceGetClusterParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param clusterId
	if err := r.SetPathParam("clusterId", o.ClusterID); err != nil {
		return err
	}

	if o.View != nil {

		// query param view
		var qrView string

		if o.View != nil {
			qrView = *o.View
		}
		qView := qrView
		if qView != "" {

			if err := r.SetQueryParam("view", qView); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
