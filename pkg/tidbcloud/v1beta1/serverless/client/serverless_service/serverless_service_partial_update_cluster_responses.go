// Code generated by go-swagger; DO NOT EDIT.

package serverless_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"tidbcloud-cli/pkg/tidbcloud/v1beta1/serverless/models"
)

// ServerlessServicePartialUpdateClusterReader is a Reader for the ServerlessServicePartialUpdateCluster structure.
type ServerlessServicePartialUpdateClusterReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ServerlessServicePartialUpdateClusterReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewServerlessServicePartialUpdateClusterOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewServerlessServicePartialUpdateClusterDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewServerlessServicePartialUpdateClusterOK creates a ServerlessServicePartialUpdateClusterOK with default headers values
func NewServerlessServicePartialUpdateClusterOK() *ServerlessServicePartialUpdateClusterOK {
	return &ServerlessServicePartialUpdateClusterOK{}
}

/*
ServerlessServicePartialUpdateClusterOK describes a response with status code 200, with default header values.

A successful response.
*/
type ServerlessServicePartialUpdateClusterOK struct {
	Payload *models.TidbCloudOpenApiserverlessv1beta1Cluster
}

// IsSuccess returns true when this serverless service partial update cluster o k response has a 2xx status code
func (o *ServerlessServicePartialUpdateClusterOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this serverless service partial update cluster o k response has a 3xx status code
func (o *ServerlessServicePartialUpdateClusterOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this serverless service partial update cluster o k response has a 4xx status code
func (o *ServerlessServicePartialUpdateClusterOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this serverless service partial update cluster o k response has a 5xx status code
func (o *ServerlessServicePartialUpdateClusterOK) IsServerError() bool {
	return false
}

// IsCode returns true when this serverless service partial update cluster o k response a status code equal to that given
func (o *ServerlessServicePartialUpdateClusterOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the serverless service partial update cluster o k response
func (o *ServerlessServicePartialUpdateClusterOK) Code() int {
	return 200
}

func (o *ServerlessServicePartialUpdateClusterOK) Error() string {
	return fmt.Sprintf("[PATCH /clusters/{cluster.clusterId}][%d] serverlessServicePartialUpdateClusterOK  %+v", 200, o.Payload)
}

func (o *ServerlessServicePartialUpdateClusterOK) String() string {
	return fmt.Sprintf("[PATCH /clusters/{cluster.clusterId}][%d] serverlessServicePartialUpdateClusterOK  %+v", 200, o.Payload)
}

func (o *ServerlessServicePartialUpdateClusterOK) GetPayload() *models.TidbCloudOpenApiserverlessv1beta1Cluster {
	return o.Payload
}

func (o *ServerlessServicePartialUpdateClusterOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TidbCloudOpenApiserverlessv1beta1Cluster)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServerlessServicePartialUpdateClusterDefault creates a ServerlessServicePartialUpdateClusterDefault with default headers values
func NewServerlessServicePartialUpdateClusterDefault(code int) *ServerlessServicePartialUpdateClusterDefault {
	return &ServerlessServicePartialUpdateClusterDefault{
		_statusCode: code,
	}
}

/*
ServerlessServicePartialUpdateClusterDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type ServerlessServicePartialUpdateClusterDefault struct {
	_statusCode int

	Payload *models.GooglerpcStatus
}

// IsSuccess returns true when this serverless service partial update cluster default response has a 2xx status code
func (o *ServerlessServicePartialUpdateClusterDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this serverless service partial update cluster default response has a 3xx status code
func (o *ServerlessServicePartialUpdateClusterDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this serverless service partial update cluster default response has a 4xx status code
func (o *ServerlessServicePartialUpdateClusterDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this serverless service partial update cluster default response has a 5xx status code
func (o *ServerlessServicePartialUpdateClusterDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this serverless service partial update cluster default response a status code equal to that given
func (o *ServerlessServicePartialUpdateClusterDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the serverless service partial update cluster default response
func (o *ServerlessServicePartialUpdateClusterDefault) Code() int {
	return o._statusCode
}

func (o *ServerlessServicePartialUpdateClusterDefault) Error() string {
	return fmt.Sprintf("[PATCH /clusters/{cluster.clusterId}][%d] ServerlessService_PartialUpdateCluster default  %+v", o._statusCode, o.Payload)
}

func (o *ServerlessServicePartialUpdateClusterDefault) String() string {
	return fmt.Sprintf("[PATCH /clusters/{cluster.clusterId}][%d] ServerlessService_PartialUpdateCluster default  %+v", o._statusCode, o.Payload)
}

func (o *ServerlessServicePartialUpdateClusterDefault) GetPayload() *models.GooglerpcStatus {
	return o.Payload
}

func (o *ServerlessServicePartialUpdateClusterDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GooglerpcStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
ServerlessServicePartialUpdateClusterBody Message for requesting a partial update on a TiDB Serverless cluster.
swagger:model ServerlessServicePartialUpdateClusterBody
*/
type ServerlessServicePartialUpdateClusterBody struct {

	// cluster
	Cluster *ServerlessServicePartialUpdateClusterParamsBodyCluster `json:"cluster,omitempty"`

	// Required. The update mask indicating which fields are to be updated.
	// Required: true
	UpdateMask *string `json:"updateMask"`
}

// Validate validates this serverless service partial update cluster body
func (o *ServerlessServicePartialUpdateClusterBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdateMask(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ServerlessServicePartialUpdateClusterBody) validateCluster(formats strfmt.Registry) error {
	if swag.IsZero(o.Cluster) { // not required
		return nil
	}

	if o.Cluster != nil {
		if err := o.Cluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "cluster")
			}
			return err
		}
	}

	return nil
}

func (o *ServerlessServicePartialUpdateClusterBody) validateUpdateMask(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"updateMask", "body", o.UpdateMask); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this serverless service partial update cluster body based on the context it is used
func (o *ServerlessServicePartialUpdateClusterBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCluster(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ServerlessServicePartialUpdateClusterBody) contextValidateCluster(ctx context.Context, formats strfmt.Registry) error {

	if o.Cluster != nil {

		if swag.IsZero(o.Cluster) { // not required
			return nil
		}

		if err := o.Cluster.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "cluster")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "cluster")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ServerlessServicePartialUpdateClusterBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServerlessServicePartialUpdateClusterBody) UnmarshalBinary(b []byte) error {
	var res ServerlessServicePartialUpdateClusterBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ServerlessServicePartialUpdateClusterParamsBodyCluster Required. The cluster to be updated.
//
// Required. The cluster to be updated.
swagger:model ServerlessServicePartialUpdateClusterParamsBodyCluster
*/
type ServerlessServicePartialUpdateClusterParamsBodyCluster struct {

	// Optional. The annotations for the cluster.
	Annotations map[string]string `json:"annotations,omitempty"`

	// Optional. Automated backup policy to set on the cluster.
	AutomatedBackupPolicy *models.V1beta1ClusterAutomatedBackupPolicy `json:"automatedBackupPolicy,omitempty"`

	// Output_only. Timestamp when the cluster was created.
	// Read Only: true
	// Format: date-time
	CreateTime strfmt.DateTime `json:"createTime,omitempty"`

	// Output_only. The email of the creator of the cluster.
	// Read Only: true
	CreatedBy string `json:"createdBy,omitempty"`

	// Required. User friendly display name of the cluster.
	DisplayName string `json:"displayName,omitempty"`

	// Optional. Encryption settings for the cluster.
	EncryptionConfig *models.V1beta1ClusterEncryptionConfig `json:"encryptionConfig,omitempty"`

	// Optional. The endpoints for connecting to the cluster.
	Endpoints *models.V1beta1ClusterEndpoints `json:"endpoints,omitempty"`

	// Optional. The labels for the cluster.
	Labels map[string]string `json:"labels,omitempty"`

	// Output_only. The unique name of the cluster.
	// Read Only: true
	Name string `json:"name,omitempty"`

	// Required. Region where the cluster will be created.
	Region *models.TidbCloudOpenApiserverlessv1beta1Region `json:"region,omitempty"`

	// Optional. The spending limit for the cluster.
	SpendingLimit *models.ClusterSpendingLimit `json:"spendingLimit,omitempty"`

	// Output_only. The current state of the cluster.
	// Read Only: true
	State *models.TidbCloudOpenApiserverlessv1beta1ClusterState `json:"state,omitempty"`

	// Output_only. Timestamp when the cluster was last updated.
	// Read Only: true
	// Format: date-time
	UpdateTime strfmt.DateTime `json:"updateTime,omitempty"`

	// Output_only. Usage details of the cluster.
	// Read Only: true
	Usage *models.ClusterUsage `json:"usage,omitempty"`

	// Output_only. The unique prefix in SQL user name.
	// Read Only: true
	UserPrefix string `json:"userPrefix,omitempty"`

	// Output_only. The TiDB version of the cluster.
	// Read Only: true
	Version string `json:"version,omitempty"`
}

// Validate validates this serverless service partial update cluster params body cluster
func (o *ServerlessServicePartialUpdateClusterParamsBodyCluster) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAutomatedBackupPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEncryptionConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateEndpoints(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSpendingLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUsage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ServerlessServicePartialUpdateClusterParamsBodyCluster) validateAutomatedBackupPolicy(formats strfmt.Registry) error {
	if swag.IsZero(o.AutomatedBackupPolicy) { // not required
		return nil
	}

	if o.AutomatedBackupPolicy != nil {
		if err := o.AutomatedBackupPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "cluster" + "." + "automatedBackupPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "cluster" + "." + "automatedBackupPolicy")
			}
			return err
		}
	}

	return nil
}

func (o *ServerlessServicePartialUpdateClusterParamsBodyCluster) validateCreateTime(formats strfmt.Registry) error {
	if swag.IsZero(o.CreateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("body"+"."+"cluster"+"."+"createTime", "body", "date-time", o.CreateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *ServerlessServicePartialUpdateClusterParamsBodyCluster) validateEncryptionConfig(formats strfmt.Registry) error {
	if swag.IsZero(o.EncryptionConfig) { // not required
		return nil
	}

	if o.EncryptionConfig != nil {
		if err := o.EncryptionConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "cluster" + "." + "encryptionConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "cluster" + "." + "encryptionConfig")
			}
			return err
		}
	}

	return nil
}

func (o *ServerlessServicePartialUpdateClusterParamsBodyCluster) validateEndpoints(formats strfmt.Registry) error {
	if swag.IsZero(o.Endpoints) { // not required
		return nil
	}

	if o.Endpoints != nil {
		if err := o.Endpoints.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "cluster" + "." + "endpoints")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "cluster" + "." + "endpoints")
			}
			return err
		}
	}

	return nil
}

func (o *ServerlessServicePartialUpdateClusterParamsBodyCluster) validateRegion(formats strfmt.Registry) error {
	if swag.IsZero(o.Region) { // not required
		return nil
	}

	if o.Region != nil {
		if err := o.Region.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "cluster" + "." + "region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "cluster" + "." + "region")
			}
			return err
		}
	}

	return nil
}

func (o *ServerlessServicePartialUpdateClusterParamsBodyCluster) validateSpendingLimit(formats strfmt.Registry) error {
	if swag.IsZero(o.SpendingLimit) { // not required
		return nil
	}

	if o.SpendingLimit != nil {
		if err := o.SpendingLimit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "cluster" + "." + "spendingLimit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "cluster" + "." + "spendingLimit")
			}
			return err
		}
	}

	return nil
}

func (o *ServerlessServicePartialUpdateClusterParamsBodyCluster) validateState(formats strfmt.Registry) error {
	if swag.IsZero(o.State) { // not required
		return nil
	}

	if o.State != nil {
		if err := o.State.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "cluster" + "." + "state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "cluster" + "." + "state")
			}
			return err
		}
	}

	return nil
}

func (o *ServerlessServicePartialUpdateClusterParamsBodyCluster) validateUpdateTime(formats strfmt.Registry) error {
	if swag.IsZero(o.UpdateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("body"+"."+"cluster"+"."+"updateTime", "body", "date-time", o.UpdateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *ServerlessServicePartialUpdateClusterParamsBodyCluster) validateUsage(formats strfmt.Registry) error {
	if swag.IsZero(o.Usage) { // not required
		return nil
	}

	if o.Usage != nil {
		if err := o.Usage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "cluster" + "." + "usage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "cluster" + "." + "usage")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this serverless service partial update cluster params body cluster based on the context it is used
func (o *ServerlessServicePartialUpdateClusterParamsBodyCluster) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateAutomatedBackupPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateCreateTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateCreatedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateEncryptionConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateEndpoints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateRegion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSpendingLimit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateUpdateTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateUsage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateUserPrefix(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ServerlessServicePartialUpdateClusterParamsBodyCluster) contextValidateAutomatedBackupPolicy(ctx context.Context, formats strfmt.Registry) error {

	if o.AutomatedBackupPolicy != nil {

		if swag.IsZero(o.AutomatedBackupPolicy) { // not required
			return nil
		}

		if err := o.AutomatedBackupPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "cluster" + "." + "automatedBackupPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "cluster" + "." + "automatedBackupPolicy")
			}
			return err
		}
	}

	return nil
}

func (o *ServerlessServicePartialUpdateClusterParamsBodyCluster) contextValidateCreateTime(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "body"+"."+"cluster"+"."+"createTime", "body", strfmt.DateTime(o.CreateTime)); err != nil {
		return err
	}

	return nil
}

func (o *ServerlessServicePartialUpdateClusterParamsBodyCluster) contextValidateCreatedBy(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "body"+"."+"cluster"+"."+"createdBy", "body", string(o.CreatedBy)); err != nil {
		return err
	}

	return nil
}

func (o *ServerlessServicePartialUpdateClusterParamsBodyCluster) contextValidateEncryptionConfig(ctx context.Context, formats strfmt.Registry) error {

	if o.EncryptionConfig != nil {

		if swag.IsZero(o.EncryptionConfig) { // not required
			return nil
		}

		if err := o.EncryptionConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "cluster" + "." + "encryptionConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "cluster" + "." + "encryptionConfig")
			}
			return err
		}
	}

	return nil
}

func (o *ServerlessServicePartialUpdateClusterParamsBodyCluster) contextValidateEndpoints(ctx context.Context, formats strfmt.Registry) error {

	if o.Endpoints != nil {

		if swag.IsZero(o.Endpoints) { // not required
			return nil
		}

		if err := o.Endpoints.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "cluster" + "." + "endpoints")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "cluster" + "." + "endpoints")
			}
			return err
		}
	}

	return nil
}

func (o *ServerlessServicePartialUpdateClusterParamsBodyCluster) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "body"+"."+"cluster"+"."+"name", "body", string(o.Name)); err != nil {
		return err
	}

	return nil
}

func (o *ServerlessServicePartialUpdateClusterParamsBodyCluster) contextValidateRegion(ctx context.Context, formats strfmt.Registry) error {

	if o.Region != nil {

		if swag.IsZero(o.Region) { // not required
			return nil
		}

		if err := o.Region.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "cluster" + "." + "region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "cluster" + "." + "region")
			}
			return err
		}
	}

	return nil
}

func (o *ServerlessServicePartialUpdateClusterParamsBodyCluster) contextValidateSpendingLimit(ctx context.Context, formats strfmt.Registry) error {

	if o.SpendingLimit != nil {

		if swag.IsZero(o.SpendingLimit) { // not required
			return nil
		}

		if err := o.SpendingLimit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "cluster" + "." + "spendingLimit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "cluster" + "." + "spendingLimit")
			}
			return err
		}
	}

	return nil
}

func (o *ServerlessServicePartialUpdateClusterParamsBodyCluster) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if o.State != nil {

		if swag.IsZero(o.State) { // not required
			return nil
		}

		if err := o.State.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "cluster" + "." + "state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "cluster" + "." + "state")
			}
			return err
		}
	}

	return nil
}

func (o *ServerlessServicePartialUpdateClusterParamsBodyCluster) contextValidateUpdateTime(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "body"+"."+"cluster"+"."+"updateTime", "body", strfmt.DateTime(o.UpdateTime)); err != nil {
		return err
	}

	return nil
}

func (o *ServerlessServicePartialUpdateClusterParamsBodyCluster) contextValidateUsage(ctx context.Context, formats strfmt.Registry) error {

	if o.Usage != nil {

		if swag.IsZero(o.Usage) { // not required
			return nil
		}

		if err := o.Usage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "cluster" + "." + "usage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "cluster" + "." + "usage")
			}
			return err
		}
	}

	return nil
}

func (o *ServerlessServicePartialUpdateClusterParamsBodyCluster) contextValidateUserPrefix(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "body"+"."+"cluster"+"."+"userPrefix", "body", string(o.UserPrefix)); err != nil {
		return err
	}

	return nil
}

func (o *ServerlessServicePartialUpdateClusterParamsBodyCluster) contextValidateVersion(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "body"+"."+"cluster"+"."+"version", "body", string(o.Version)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ServerlessServicePartialUpdateClusterParamsBodyCluster) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ServerlessServicePartialUpdateClusterParamsBodyCluster) UnmarshalBinary(b []byte) error {
	var res ServerlessServicePartialUpdateClusterParamsBodyCluster
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
