/*
TiDB Cloud Serverless Open API

TiDB Cloud Serverless Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package imp

import (
	"encoding/json"
	"fmt"
)

// checks if the ImportOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImportOptions{}

// ImportOptions struct for ImportOptions
type ImportOptions struct {
	// The exported file type.
	FileType ImportFileTypeEnum `json:"fileType"`
	// Optional. The CSV format.
	CsvFormat            *CSVFormat `json:"csvFormat,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ImportOptions ImportOptions

// NewImportOptions instantiates a new ImportOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportOptions(fileType ImportFileTypeEnum) *ImportOptions {
	this := ImportOptions{}
	this.FileType = fileType
	return &this
}

// NewImportOptionsWithDefaults instantiates a new ImportOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportOptionsWithDefaults() *ImportOptions {
	this := ImportOptions{}
	return &this
}

// GetFileType returns the FileType field value
func (o *ImportOptions) GetFileType() ImportFileTypeEnum {
	if o == nil {
		var ret ImportFileTypeEnum
		return ret
	}

	return o.FileType
}

// GetFileTypeOk returns a tuple with the FileType field value
// and a boolean to check if the value has been set.
func (o *ImportOptions) GetFileTypeOk() (*ImportFileTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileType, true
}

// SetFileType sets field value
func (o *ImportOptions) SetFileType(v ImportFileTypeEnum) {
	o.FileType = v
}

// GetCsvFormat returns the CsvFormat field value if set, zero value otherwise.
func (o *ImportOptions) GetCsvFormat() CSVFormat {
	if o == nil || IsNil(o.CsvFormat) {
		var ret CSVFormat
		return ret
	}
	return *o.CsvFormat
}

// GetCsvFormatOk returns a tuple with the CsvFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportOptions) GetCsvFormatOk() (*CSVFormat, bool) {
	if o == nil || IsNil(o.CsvFormat) {
		return nil, false
	}
	return o.CsvFormat, true
}

// HasCsvFormat returns a boolean if a field has been set.
func (o *ImportOptions) HasCsvFormat() bool {
	if o != nil && !IsNil(o.CsvFormat) {
		return true
	}

	return false
}

// SetCsvFormat gets a reference to the given CSVFormat and assigns it to the CsvFormat field.
func (o *ImportOptions) SetCsvFormat(v CSVFormat) {
	o.CsvFormat = &v
}

func (o ImportOptions) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImportOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fileType"] = o.FileType
	if !IsNil(o.CsvFormat) {
		toSerialize["csvFormat"] = o.CsvFormat
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ImportOptions) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fileType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varImportOptions := _ImportOptions{}

	err = json.Unmarshal(data, &varImportOptions)

	if err != nil {
		return err
	}

	*o = ImportOptions(varImportOptions)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "fileType")
		delete(additionalProperties, "csvFormat")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableImportOptions struct {
	value *ImportOptions
	isSet bool
}

func (v NullableImportOptions) Get() *ImportOptions {
	return v.value
}

func (v *NullableImportOptions) Set(val *ImportOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableImportOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableImportOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportOptions(val *ImportOptions) *NullableImportOptions {
	return &NullableImportOptions{value: val, isSet: true}
}

func (v NullableImportOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
