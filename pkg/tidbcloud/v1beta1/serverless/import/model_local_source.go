/*
TiDB Cloud Serverless Open API

TiDB Cloud Serverless Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package imp

import (
	"encoding/json"
	"fmt"
)

// checks if the LocalSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LocalSource{}

// LocalSource struct for LocalSource
type LocalSource struct {
	// The upload id of import source file.
	UploadId string `json:"uploadId"`
	// The target database of import.
	TargetDatabase string `json:"targetDatabase"`
	// The target table of import.
	TargetTable string `json:"targetTable"`
	// The file name of import source file.
	FileName             *string `json:"fileName,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LocalSource LocalSource

// NewLocalSource instantiates a new LocalSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocalSource(uploadId string, targetDatabase string, targetTable string) *LocalSource {
	this := LocalSource{}
	this.UploadId = uploadId
	this.TargetDatabase = targetDatabase
	this.TargetTable = targetTable
	return &this
}

// NewLocalSourceWithDefaults instantiates a new LocalSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocalSourceWithDefaults() *LocalSource {
	this := LocalSource{}
	return &this
}

// GetUploadId returns the UploadId field value
func (o *LocalSource) GetUploadId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UploadId
}

// GetUploadIdOk returns a tuple with the UploadId field value
// and a boolean to check if the value has been set.
func (o *LocalSource) GetUploadIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UploadId, true
}

// SetUploadId sets field value
func (o *LocalSource) SetUploadId(v string) {
	o.UploadId = v
}

// GetTargetDatabase returns the TargetDatabase field value
func (o *LocalSource) GetTargetDatabase() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetDatabase
}

// GetTargetDatabaseOk returns a tuple with the TargetDatabase field value
// and a boolean to check if the value has been set.
func (o *LocalSource) GetTargetDatabaseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetDatabase, true
}

// SetTargetDatabase sets field value
func (o *LocalSource) SetTargetDatabase(v string) {
	o.TargetDatabase = v
}

// GetTargetTable returns the TargetTable field value
func (o *LocalSource) GetTargetTable() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetTable
}

// GetTargetTableOk returns a tuple with the TargetTable field value
// and a boolean to check if the value has been set.
func (o *LocalSource) GetTargetTableOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetTable, true
}

// SetTargetTable sets field value
func (o *LocalSource) SetTargetTable(v string) {
	o.TargetTable = v
}

// GetFileName returns the FileName field value if set, zero value otherwise.
func (o *LocalSource) GetFileName() string {
	if o == nil || IsNil(o.FileName) {
		var ret string
		return ret
	}
	return *o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalSource) GetFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.FileName) {
		return nil, false
	}
	return o.FileName, true
}

// HasFileName returns a boolean if a field has been set.
func (o *LocalSource) HasFileName() bool {
	if o != nil && !IsNil(o.FileName) {
		return true
	}

	return false
}

// SetFileName gets a reference to the given string and assigns it to the FileName field.
func (o *LocalSource) SetFileName(v string) {
	o.FileName = &v
}

func (o LocalSource) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LocalSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["uploadId"] = o.UploadId
	toSerialize["targetDatabase"] = o.TargetDatabase
	toSerialize["targetTable"] = o.TargetTable
	if !IsNil(o.FileName) {
		toSerialize["fileName"] = o.FileName
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LocalSource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"uploadId",
		"targetDatabase",
		"targetTable",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLocalSource := _LocalSource{}

	err = json.Unmarshal(data, &varLocalSource)

	if err != nil {
		return err
	}

	*o = LocalSource(varLocalSource)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "uploadId")
		delete(additionalProperties, "targetDatabase")
		delete(additionalProperties, "targetTable")
		delete(additionalProperties, "fileName")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLocalSource struct {
	value *LocalSource
	isSet bool
}

func (v NullableLocalSource) Get() *LocalSource {
	return v.value
}

func (v *NullableLocalSource) Set(val *LocalSource) {
	v.value = val
	v.isSet = true
}

func (v NullableLocalSource) IsSet() bool {
	return v.isSet
}

func (v *NullableLocalSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocalSource(val *LocalSource) *NullableLocalSource {
	return &NullableLocalSource{value: val, isSet: true}
}

func (v NullableLocalSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocalSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
