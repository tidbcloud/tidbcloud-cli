/*
TiDB Cloud Serverless CDC Open API

TiDB Cloud Serverless CDC Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdc

import (
	"encoding/json"
)

// checks if the PartitionDispatcherConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PartitionDispatcherConfig{}

// PartitionDispatcherConfig struct for PartitionDispatcherConfig
type PartitionDispatcherConfig struct {
	PartitionType        *PartitionDispatcherEnum `json:"partitionType,omitempty"`
	Matcher              []string                 `json:"matcher,omitempty"`
	IndexName            *string                  `json:"indexName,omitempty"`
	Columns              []string                 `json:"columns,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PartitionDispatcherConfig PartitionDispatcherConfig

// NewPartitionDispatcherConfig instantiates a new PartitionDispatcherConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPartitionDispatcherConfig() *PartitionDispatcherConfig {
	this := PartitionDispatcherConfig{}
	return &this
}

// NewPartitionDispatcherConfigWithDefaults instantiates a new PartitionDispatcherConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPartitionDispatcherConfigWithDefaults() *PartitionDispatcherConfig {
	this := PartitionDispatcherConfig{}
	return &this
}

// GetPartitionType returns the PartitionType field value if set, zero value otherwise.
func (o *PartitionDispatcherConfig) GetPartitionType() PartitionDispatcherEnum {
	if o == nil || IsNil(o.PartitionType) {
		var ret PartitionDispatcherEnum
		return ret
	}
	return *o.PartitionType
}

// GetPartitionTypeOk returns a tuple with the PartitionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionDispatcherConfig) GetPartitionTypeOk() (*PartitionDispatcherEnum, bool) {
	if o == nil || IsNil(o.PartitionType) {
		return nil, false
	}
	return o.PartitionType, true
}

// HasPartitionType returns a boolean if a field has been set.
func (o *PartitionDispatcherConfig) HasPartitionType() bool {
	if o != nil && !IsNil(o.PartitionType) {
		return true
	}

	return false
}

// SetPartitionType gets a reference to the given PartitionDispatcherEnum and assigns it to the PartitionType field.
func (o *PartitionDispatcherConfig) SetPartitionType(v PartitionDispatcherEnum) {
	o.PartitionType = &v
}

// GetMatcher returns the Matcher field value if set, zero value otherwise.
func (o *PartitionDispatcherConfig) GetMatcher() []string {
	if o == nil || IsNil(o.Matcher) {
		var ret []string
		return ret
	}
	return o.Matcher
}

// GetMatcherOk returns a tuple with the Matcher field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionDispatcherConfig) GetMatcherOk() ([]string, bool) {
	if o == nil || IsNil(o.Matcher) {
		return nil, false
	}
	return o.Matcher, true
}

// HasMatcher returns a boolean if a field has been set.
func (o *PartitionDispatcherConfig) HasMatcher() bool {
	if o != nil && !IsNil(o.Matcher) {
		return true
	}

	return false
}

// SetMatcher gets a reference to the given []string and assigns it to the Matcher field.
func (o *PartitionDispatcherConfig) SetMatcher(v []string) {
	o.Matcher = v
}

// GetIndexName returns the IndexName field value if set, zero value otherwise.
func (o *PartitionDispatcherConfig) GetIndexName() string {
	if o == nil || IsNil(o.IndexName) {
		var ret string
		return ret
	}
	return *o.IndexName
}

// GetIndexNameOk returns a tuple with the IndexName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionDispatcherConfig) GetIndexNameOk() (*string, bool) {
	if o == nil || IsNil(o.IndexName) {
		return nil, false
	}
	return o.IndexName, true
}

// HasIndexName returns a boolean if a field has been set.
func (o *PartitionDispatcherConfig) HasIndexName() bool {
	if o != nil && !IsNil(o.IndexName) {
		return true
	}

	return false
}

// SetIndexName gets a reference to the given string and assigns it to the IndexName field.
func (o *PartitionDispatcherConfig) SetIndexName(v string) {
	o.IndexName = &v
}

// GetColumns returns the Columns field value if set, zero value otherwise.
func (o *PartitionDispatcherConfig) GetColumns() []string {
	if o == nil || IsNil(o.Columns) {
		var ret []string
		return ret
	}
	return o.Columns
}

// GetColumnsOk returns a tuple with the Columns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PartitionDispatcherConfig) GetColumnsOk() ([]string, bool) {
	if o == nil || IsNil(o.Columns) {
		return nil, false
	}
	return o.Columns, true
}

// HasColumns returns a boolean if a field has been set.
func (o *PartitionDispatcherConfig) HasColumns() bool {
	if o != nil && !IsNil(o.Columns) {
		return true
	}

	return false
}

// SetColumns gets a reference to the given []string and assigns it to the Columns field.
func (o *PartitionDispatcherConfig) SetColumns(v []string) {
	o.Columns = v
}

func (o PartitionDispatcherConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PartitionDispatcherConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PartitionType) {
		toSerialize["partitionType"] = o.PartitionType
	}
	if !IsNil(o.Matcher) {
		toSerialize["matcher"] = o.Matcher
	}
	if !IsNil(o.IndexName) {
		toSerialize["indexName"] = o.IndexName
	}
	if !IsNil(o.Columns) {
		toSerialize["columns"] = o.Columns
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PartitionDispatcherConfig) UnmarshalJSON(data []byte) (err error) {
	varPartitionDispatcherConfig := _PartitionDispatcherConfig{}

	err = json.Unmarshal(data, &varPartitionDispatcherConfig)

	if err != nil {
		return err
	}

	*o = PartitionDispatcherConfig(varPartitionDispatcherConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "partitionType")
		delete(additionalProperties, "matcher")
		delete(additionalProperties, "indexName")
		delete(additionalProperties, "columns")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePartitionDispatcherConfig struct {
	value *PartitionDispatcherConfig
	isSet bool
}

func (v NullablePartitionDispatcherConfig) Get() *PartitionDispatcherConfig {
	return v.value
}

func (v *NullablePartitionDispatcherConfig) Set(val *PartitionDispatcherConfig) {
	v.value = val
	v.isSet = true
}

func (v NullablePartitionDispatcherConfig) IsSet() bool {
	return v.isSet
}

func (v *NullablePartitionDispatcherConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePartitionDispatcherConfig(val *PartitionDispatcherConfig) *NullablePartitionDispatcherConfig {
	return &NullablePartitionDispatcherConfig{value: val, isSet: true}
}

func (v NullablePartitionDispatcherConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePartitionDispatcherConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
