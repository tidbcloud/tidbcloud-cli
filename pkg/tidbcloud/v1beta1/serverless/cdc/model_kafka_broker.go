/*
TiDB Cloud Serverless CDC Open API

TiDB Cloud Serverless CDC Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdc

import (
	"encoding/json"
)

// checks if the KafkaBroker type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KafkaBroker{}

// KafkaBroker struct for KafkaBroker
type KafkaBroker struct {
	KafkaVersion         *KafkaVersionEnum         `json:"kafkaVersion,omitempty"`
	Compression          *KafkaCompressionTypeEnum `json:"compression,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _KafkaBroker KafkaBroker

// NewKafkaBroker instantiates a new KafkaBroker object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKafkaBroker() *KafkaBroker {
	this := KafkaBroker{}
	return &this
}

// NewKafkaBrokerWithDefaults instantiates a new KafkaBroker object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKafkaBrokerWithDefaults() *KafkaBroker {
	this := KafkaBroker{}
	return &this
}

// GetKafkaVersion returns the KafkaVersion field value if set, zero value otherwise.
func (o *KafkaBroker) GetKafkaVersion() KafkaVersionEnum {
	if o == nil || IsNil(o.KafkaVersion) {
		var ret KafkaVersionEnum
		return ret
	}
	return *o.KafkaVersion
}

// GetKafkaVersionOk returns a tuple with the KafkaVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaBroker) GetKafkaVersionOk() (*KafkaVersionEnum, bool) {
	if o == nil || IsNil(o.KafkaVersion) {
		return nil, false
	}
	return o.KafkaVersion, true
}

// HasKafkaVersion returns a boolean if a field has been set.
func (o *KafkaBroker) HasKafkaVersion() bool {
	if o != nil && !IsNil(o.KafkaVersion) {
		return true
	}

	return false
}

// SetKafkaVersion gets a reference to the given KafkaVersionEnum and assigns it to the KafkaVersion field.
func (o *KafkaBroker) SetKafkaVersion(v KafkaVersionEnum) {
	o.KafkaVersion = &v
}

// GetCompression returns the Compression field value if set, zero value otherwise.
func (o *KafkaBroker) GetCompression() KafkaCompressionTypeEnum {
	if o == nil || IsNil(o.Compression) {
		var ret KafkaCompressionTypeEnum
		return ret
	}
	return *o.Compression
}

// GetCompressionOk returns a tuple with the Compression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaBroker) GetCompressionOk() (*KafkaCompressionTypeEnum, bool) {
	if o == nil || IsNil(o.Compression) {
		return nil, false
	}
	return o.Compression, true
}

// HasCompression returns a boolean if a field has been set.
func (o *KafkaBroker) HasCompression() bool {
	if o != nil && !IsNil(o.Compression) {
		return true
	}

	return false
}

// SetCompression gets a reference to the given KafkaCompressionTypeEnum and assigns it to the Compression field.
func (o *KafkaBroker) SetCompression(v KafkaCompressionTypeEnum) {
	o.Compression = &v
}

func (o KafkaBroker) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KafkaBroker) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.KafkaVersion) {
		toSerialize["kafkaVersion"] = o.KafkaVersion
	}
	if !IsNil(o.Compression) {
		toSerialize["compression"] = o.Compression
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *KafkaBroker) UnmarshalJSON(data []byte) (err error) {
	varKafkaBroker := _KafkaBroker{}

	err = json.Unmarshal(data, &varKafkaBroker)

	if err != nil {
		return err
	}

	*o = KafkaBroker(varKafkaBroker)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "kafkaVersion")
		delete(additionalProperties, "compression")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableKafkaBroker struct {
	value *KafkaBroker
	isSet bool
}

func (v NullableKafkaBroker) Get() *KafkaBroker {
	return v.value
}

func (v *NullableKafkaBroker) Set(val *KafkaBroker) {
	v.value = val
	v.isSet = true
}

func (v NullableKafkaBroker) IsSet() bool {
	return v.isSet
}

func (v *NullableKafkaBroker) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKafkaBroker(val *KafkaBroker) *NullableKafkaBroker {
	return &NullableKafkaBroker{value: val, isSet: true}
}

func (v NullableKafkaBroker) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKafkaBroker) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
