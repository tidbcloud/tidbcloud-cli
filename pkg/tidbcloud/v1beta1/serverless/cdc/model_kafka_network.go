/*
TiDB Cloud Serverless CDC Open API

TiDB Cloud Serverless CDC Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdc

import (
	"encoding/json"
)

// checks if the KafkaNetwork type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KafkaNetwork{}

// KafkaNetwork struct for KafkaNetwork
type KafkaNetwork struct {
	NetworkType            *KafkaNetworkTypeEnum `json:"networkType,omitempty"`
	PrivateLinkServiceName *string               `json:"privateLinkServiceName,omitempty"`
	PublicEndpoints        *string               `json:"publicEndpoints,omitempty"`
	AdditionalProperties   map[string]interface{}
}

type _KafkaNetwork KafkaNetwork

// NewKafkaNetwork instantiates a new KafkaNetwork object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKafkaNetwork() *KafkaNetwork {
	this := KafkaNetwork{}
	return &this
}

// NewKafkaNetworkWithDefaults instantiates a new KafkaNetwork object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKafkaNetworkWithDefaults() *KafkaNetwork {
	this := KafkaNetwork{}
	return &this
}

// GetNetworkType returns the NetworkType field value if set, zero value otherwise.
func (o *KafkaNetwork) GetNetworkType() KafkaNetworkTypeEnum {
	if o == nil || IsNil(o.NetworkType) {
		var ret KafkaNetworkTypeEnum
		return ret
	}
	return *o.NetworkType
}

// GetNetworkTypeOk returns a tuple with the NetworkType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaNetwork) GetNetworkTypeOk() (*KafkaNetworkTypeEnum, bool) {
	if o == nil || IsNil(o.NetworkType) {
		return nil, false
	}
	return o.NetworkType, true
}

// HasNetworkType returns a boolean if a field has been set.
func (o *KafkaNetwork) HasNetworkType() bool {
	if o != nil && !IsNil(o.NetworkType) {
		return true
	}

	return false
}

// SetNetworkType gets a reference to the given KafkaNetworkTypeEnum and assigns it to the NetworkType field.
func (o *KafkaNetwork) SetNetworkType(v KafkaNetworkTypeEnum) {
	o.NetworkType = &v
}

// GetPrivateLinkServiceName returns the PrivateLinkServiceName field value if set, zero value otherwise.
func (o *KafkaNetwork) GetPrivateLinkServiceName() string {
	if o == nil || IsNil(o.PrivateLinkServiceName) {
		var ret string
		return ret
	}
	return *o.PrivateLinkServiceName
}

// GetPrivateLinkServiceNameOk returns a tuple with the PrivateLinkServiceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaNetwork) GetPrivateLinkServiceNameOk() (*string, bool) {
	if o == nil || IsNil(o.PrivateLinkServiceName) {
		return nil, false
	}
	return o.PrivateLinkServiceName, true
}

// HasPrivateLinkServiceName returns a boolean if a field has been set.
func (o *KafkaNetwork) HasPrivateLinkServiceName() bool {
	if o != nil && !IsNil(o.PrivateLinkServiceName) {
		return true
	}

	return false
}

// SetPrivateLinkServiceName gets a reference to the given string and assigns it to the PrivateLinkServiceName field.
func (o *KafkaNetwork) SetPrivateLinkServiceName(v string) {
	o.PrivateLinkServiceName = &v
}

// GetPublicEndpoints returns the PublicEndpoints field value if set, zero value otherwise.
func (o *KafkaNetwork) GetPublicEndpoints() string {
	if o == nil || IsNil(o.PublicEndpoints) {
		var ret string
		return ret
	}
	return *o.PublicEndpoints
}

// GetPublicEndpointsOk returns a tuple with the PublicEndpoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaNetwork) GetPublicEndpointsOk() (*string, bool) {
	if o == nil || IsNil(o.PublicEndpoints) {
		return nil, false
	}
	return o.PublicEndpoints, true
}

// HasPublicEndpoints returns a boolean if a field has been set.
func (o *KafkaNetwork) HasPublicEndpoints() bool {
	if o != nil && !IsNil(o.PublicEndpoints) {
		return true
	}

	return false
}

// SetPublicEndpoints gets a reference to the given string and assigns it to the PublicEndpoints field.
func (o *KafkaNetwork) SetPublicEndpoints(v string) {
	o.PublicEndpoints = &v
}

func (o KafkaNetwork) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KafkaNetwork) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NetworkType) {
		toSerialize["networkType"] = o.NetworkType
	}
	if !IsNil(o.PrivateLinkServiceName) {
		toSerialize["privateLinkServiceName"] = o.PrivateLinkServiceName
	}
	if !IsNil(o.PublicEndpoints) {
		toSerialize["publicEndpoints"] = o.PublicEndpoints
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *KafkaNetwork) UnmarshalJSON(data []byte) (err error) {
	varKafkaNetwork := _KafkaNetwork{}

	err = json.Unmarshal(data, &varKafkaNetwork)

	if err != nil {
		return err
	}

	*o = KafkaNetwork(varKafkaNetwork)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "networkType")
		delete(additionalProperties, "privateLinkServiceName")
		delete(additionalProperties, "publicEndpoints")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableKafkaNetwork struct {
	value *KafkaNetwork
	isSet bool
}

func (v NullableKafkaNetwork) Get() *KafkaNetwork {
	return v.value
}

func (v *NullableKafkaNetwork) Set(val *KafkaNetwork) {
	v.value = val
	v.isSet = true
}

func (v NullableKafkaNetwork) IsSet() bool {
	return v.isSet
}

func (v *NullableKafkaNetwork) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKafkaNetwork(val *KafkaNetwork) *NullableKafkaNetwork {
	return &NullableKafkaNetwork{value: val, isSet: true}
}

func (v NullableKafkaNetwork) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKafkaNetwork) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
