/*
TiDB Cloud Serverless CDC Open API

TiDB Cloud Serverless CDC Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdc

import (
	"encoding/json"
	"fmt"
)

// checks if the SinkInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SinkInfo{}

// SinkInfo struct for SinkInfo
type SinkInfo struct {
	// Required. The type of the sink.
	Type ChangefeedTypeEnum `json:"type"`
	// Optional. The Kafka sink information.
	Kafka *Kafka `json:"kafka,omitempty"`
	// Optional. The MySQL sink information.
	Mysql                *MySQL `json:"mysql,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SinkInfo SinkInfo

// NewSinkInfo instantiates a new SinkInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSinkInfo(type_ ChangefeedTypeEnum) *SinkInfo {
	this := SinkInfo{}
	this.Type = type_
	return &this
}

// NewSinkInfoWithDefaults instantiates a new SinkInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSinkInfoWithDefaults() *SinkInfo {
	this := SinkInfo{}
	return &this
}

// GetType returns the Type field value
func (o *SinkInfo) GetType() ChangefeedTypeEnum {
	if o == nil {
		var ret ChangefeedTypeEnum
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SinkInfo) GetTypeOk() (*ChangefeedTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SinkInfo) SetType(v ChangefeedTypeEnum) {
	o.Type = v
}

// GetKafka returns the Kafka field value if set, zero value otherwise.
func (o *SinkInfo) GetKafka() Kafka {
	if o == nil || IsNil(o.Kafka) {
		var ret Kafka
		return ret
	}
	return *o.Kafka
}

// GetKafkaOk returns a tuple with the Kafka field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SinkInfo) GetKafkaOk() (*Kafka, bool) {
	if o == nil || IsNil(o.Kafka) {
		return nil, false
	}
	return o.Kafka, true
}

// HasKafka returns a boolean if a field has been set.
func (o *SinkInfo) HasKafka() bool {
	if o != nil && !IsNil(o.Kafka) {
		return true
	}

	return false
}

// SetKafka gets a reference to the given Kafka and assigns it to the Kafka field.
func (o *SinkInfo) SetKafka(v Kafka) {
	o.Kafka = &v
}

// GetMysql returns the Mysql field value if set, zero value otherwise.
func (o *SinkInfo) GetMysql() MySQL {
	if o == nil || IsNil(o.Mysql) {
		var ret MySQL
		return ret
	}
	return *o.Mysql
}

// GetMysqlOk returns a tuple with the Mysql field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SinkInfo) GetMysqlOk() (*MySQL, bool) {
	if o == nil || IsNil(o.Mysql) {
		return nil, false
	}
	return o.Mysql, true
}

// HasMysql returns a boolean if a field has been set.
func (o *SinkInfo) HasMysql() bool {
	if o != nil && !IsNil(o.Mysql) {
		return true
	}

	return false
}

// SetMysql gets a reference to the given MySQL and assigns it to the Mysql field.
func (o *SinkInfo) SetMysql(v MySQL) {
	o.Mysql = &v
}

func (o SinkInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SinkInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.Kafka) {
		toSerialize["kafka"] = o.Kafka
	}
	if !IsNil(o.Mysql) {
		toSerialize["mysql"] = o.Mysql
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SinkInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSinkInfo := _SinkInfo{}

	err = json.Unmarshal(data, &varSinkInfo)

	if err != nil {
		return err
	}

	*o = SinkInfo(varSinkInfo)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "kafka")
		delete(additionalProperties, "mysql")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSinkInfo struct {
	value *SinkInfo
	isSet bool
}

func (v NullableSinkInfo) Get() *SinkInfo {
	return v.value
}

func (v *NullableSinkInfo) Set(val *SinkInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableSinkInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableSinkInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSinkInfo(val *SinkInfo) *NullableSinkInfo {
	return &NullableSinkInfo{value: val, isSet: true}
}

func (v NullableSinkInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSinkInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
