/*
TiDB Cloud Serverless CDC Open API

TiDB Cloud Serverless CDC Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdc

import (
	"encoding/json"
)

// KafkaCompressionTypeEnum the model 'KafkaCompressionTypeEnum'
type KafkaCompressionTypeEnum string

// List of KafkaCompressionType.Enum
const (
	KAFKACOMPRESSIONTYPEENUM_NONE   KafkaCompressionTypeEnum = "NONE"
	KAFKACOMPRESSIONTYPEENUM_GZIP   KafkaCompressionTypeEnum = "GZIP"
	KAFKACOMPRESSIONTYPEENUM_SNAPPY KafkaCompressionTypeEnum = "SNAPPY"
	KAFKACOMPRESSIONTYPEENUM_LZ4    KafkaCompressionTypeEnum = "LZ4"
	KAFKACOMPRESSIONTYPEENUM_ZSTD   KafkaCompressionTypeEnum = "ZSTD"
)

// All allowed values of KafkaCompressionTypeEnum enum
var AllowedKafkaCompressionTypeEnumEnumValues = []KafkaCompressionTypeEnum{
	"NONE",
	"GZIP",
	"SNAPPY",
	"LZ4",
	"ZSTD",
}

func (v *KafkaCompressionTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := KafkaCompressionTypeEnum(value)
	for _, existing := range AllowedKafkaCompressionTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = KafkaCompressionTypeEnum(value)
	return nil
}

// NewKafkaCompressionTypeEnumFromValue returns a pointer to a valid KafkaCompressionTypeEnum for the value passed as argument
func NewKafkaCompressionTypeEnumFromValue(v string) *KafkaCompressionTypeEnum {
	ev := KafkaCompressionTypeEnum(v)
	return &ev
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v KafkaCompressionTypeEnum) IsValid() bool {
	for _, existing := range AllowedKafkaCompressionTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to KafkaCompressionType.Enum value
func (v KafkaCompressionTypeEnum) Ptr() *KafkaCompressionTypeEnum {
	return &v
}

type NullableKafkaCompressionTypeEnum struct {
	value *KafkaCompressionTypeEnum
	isSet bool
}

func (v NullableKafkaCompressionTypeEnum) Get() *KafkaCompressionTypeEnum {
	return v.value
}

func (v *NullableKafkaCompressionTypeEnum) Set(val *KafkaCompressionTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableKafkaCompressionTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableKafkaCompressionTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKafkaCompressionTypeEnum(val *KafkaCompressionTypeEnum) *NullableKafkaCompressionTypeEnum {
	return &NullableKafkaCompressionTypeEnum{value: val, isSet: true}
}

func (v NullableKafkaCompressionTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKafkaCompressionTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
