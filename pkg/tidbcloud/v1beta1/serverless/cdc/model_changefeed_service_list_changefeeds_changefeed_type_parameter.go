/*
TiDB Cloud Serverless CDC Open API

TiDB Cloud Serverless CDC Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdc

import (
	"encoding/json"
)

// ChangefeedServiceListChangefeedsChangefeedTypeParameter the model 'ChangefeedServiceListChangefeedsChangefeedTypeParameter'
type ChangefeedServiceListChangefeedsChangefeedTypeParameter string

// List of ChangefeedService_ListChangefeeds_changefeedType_parameter
const (
	CHANGEFEEDSERVICELISTCHANGEFEEDSCHANGEFEEDTYPEPARAMETER_KAFKA ChangefeedServiceListChangefeedsChangefeedTypeParameter = "KAFKA"
	CHANGEFEEDSERVICELISTCHANGEFEEDSCHANGEFEEDTYPEPARAMETER_MYSQL ChangefeedServiceListChangefeedsChangefeedTypeParameter = "MYSQL"
)

// All allowed values of ChangefeedServiceListChangefeedsChangefeedTypeParameter enum
var AllowedChangefeedServiceListChangefeedsChangefeedTypeParameterEnumValues = []ChangefeedServiceListChangefeedsChangefeedTypeParameter{
	"KAFKA",
	"MYSQL",
}

func (v *ChangefeedServiceListChangefeedsChangefeedTypeParameter) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ChangefeedServiceListChangefeedsChangefeedTypeParameter(value)
	for _, existing := range AllowedChangefeedServiceListChangefeedsChangefeedTypeParameterEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = ChangefeedServiceListChangefeedsChangefeedTypeParameter(value)
	return nil
}

// NewChangefeedServiceListChangefeedsChangefeedTypeParameterFromValue returns a pointer to a valid ChangefeedServiceListChangefeedsChangefeedTypeParameter for the value passed as argument
func NewChangefeedServiceListChangefeedsChangefeedTypeParameterFromValue(v string) *ChangefeedServiceListChangefeedsChangefeedTypeParameter {
	ev := ChangefeedServiceListChangefeedsChangefeedTypeParameter(v)
	return &ev
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ChangefeedServiceListChangefeedsChangefeedTypeParameter) IsValid() bool {
	for _, existing := range AllowedChangefeedServiceListChangefeedsChangefeedTypeParameterEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ChangefeedService_ListChangefeeds_changefeedType_parameter value
func (v ChangefeedServiceListChangefeedsChangefeedTypeParameter) Ptr() *ChangefeedServiceListChangefeedsChangefeedTypeParameter {
	return &v
}

type NullableChangefeedServiceListChangefeedsChangefeedTypeParameter struct {
	value *ChangefeedServiceListChangefeedsChangefeedTypeParameter
	isSet bool
}

func (v NullableChangefeedServiceListChangefeedsChangefeedTypeParameter) Get() *ChangefeedServiceListChangefeedsChangefeedTypeParameter {
	return v.value
}

func (v *NullableChangefeedServiceListChangefeedsChangefeedTypeParameter) Set(val *ChangefeedServiceListChangefeedsChangefeedTypeParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableChangefeedServiceListChangefeedsChangefeedTypeParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableChangefeedServiceListChangefeedsChangefeedTypeParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangefeedServiceListChangefeedsChangefeedTypeParameter(val *ChangefeedServiceListChangefeedsChangefeedTypeParameter) *NullableChangefeedServiceListChangefeedsChangefeedTypeParameter {
	return &NullableChangefeedServiceListChangefeedsChangefeedTypeParameter{value: val, isSet: true}
}

func (v NullableChangefeedServiceListChangefeedsChangefeedTypeParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangefeedServiceListChangefeedsChangefeedTypeParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
