/*
TiDB Cloud Serverless CDC Open API

TiDB Cloud Serverless CDC Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdc

import (
	"encoding/json"
)

// checks if the CDCFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CDCFilter{}

// CDCFilter struct for CDCFilter
type CDCFilter struct {
	FilterRule           []string          `json:"filterRule,omitempty"`
	Mode                 *TableModeEnum    `json:"mode,omitempty"`
	EventFilterRule      []EventFilterRule `json:"eventFilterRule,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CDCFilter CDCFilter

// NewCDCFilter instantiates a new CDCFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCDCFilter() *CDCFilter {
	this := CDCFilter{}
	return &this
}

// NewCDCFilterWithDefaults instantiates a new CDCFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCDCFilterWithDefaults() *CDCFilter {
	this := CDCFilter{}
	return &this
}

// GetFilterRule returns the FilterRule field value if set, zero value otherwise.
func (o *CDCFilter) GetFilterRule() []string {
	if o == nil || IsNil(o.FilterRule) {
		var ret []string
		return ret
	}
	return o.FilterRule
}

// GetFilterRuleOk returns a tuple with the FilterRule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CDCFilter) GetFilterRuleOk() ([]string, bool) {
	if o == nil || IsNil(o.FilterRule) {
		return nil, false
	}
	return o.FilterRule, true
}

// HasFilterRule returns a boolean if a field has been set.
func (o *CDCFilter) HasFilterRule() bool {
	if o != nil && !IsNil(o.FilterRule) {
		return true
	}

	return false
}

// SetFilterRule gets a reference to the given []string and assigns it to the FilterRule field.
func (o *CDCFilter) SetFilterRule(v []string) {
	o.FilterRule = v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *CDCFilter) GetMode() TableModeEnum {
	if o == nil || IsNil(o.Mode) {
		var ret TableModeEnum
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CDCFilter) GetModeOk() (*TableModeEnum, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *CDCFilter) HasMode() bool {
	if o != nil && !IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given TableModeEnum and assigns it to the Mode field.
func (o *CDCFilter) SetMode(v TableModeEnum) {
	o.Mode = &v
}

// GetEventFilterRule returns the EventFilterRule field value if set, zero value otherwise.
func (o *CDCFilter) GetEventFilterRule() []EventFilterRule {
	if o == nil || IsNil(o.EventFilterRule) {
		var ret []EventFilterRule
		return ret
	}
	return o.EventFilterRule
}

// GetEventFilterRuleOk returns a tuple with the EventFilterRule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CDCFilter) GetEventFilterRuleOk() ([]EventFilterRule, bool) {
	if o == nil || IsNil(o.EventFilterRule) {
		return nil, false
	}
	return o.EventFilterRule, true
}

// HasEventFilterRule returns a boolean if a field has been set.
func (o *CDCFilter) HasEventFilterRule() bool {
	if o != nil && !IsNil(o.EventFilterRule) {
		return true
	}

	return false
}

// SetEventFilterRule gets a reference to the given []EventFilterRule and assigns it to the EventFilterRule field.
func (o *CDCFilter) SetEventFilterRule(v []EventFilterRule) {
	o.EventFilterRule = v
}

func (o CDCFilter) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CDCFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FilterRule) {
		toSerialize["filterRule"] = o.FilterRule
	}
	if !IsNil(o.Mode) {
		toSerialize["mode"] = o.Mode
	}
	if !IsNil(o.EventFilterRule) {
		toSerialize["eventFilterRule"] = o.EventFilterRule
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CDCFilter) UnmarshalJSON(data []byte) (err error) {
	varCDCFilter := _CDCFilter{}

	err = json.Unmarshal(data, &varCDCFilter)

	if err != nil {
		return err
	}

	*o = CDCFilter(varCDCFilter)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "filterRule")
		delete(additionalProperties, "mode")
		delete(additionalProperties, "eventFilterRule")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCDCFilter struct {
	value *CDCFilter
	isSet bool
}

func (v NullableCDCFilter) Get() *CDCFilter {
	return v.value
}

func (v *NullableCDCFilter) Set(val *CDCFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableCDCFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableCDCFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCDCFilter(val *CDCFilter) *NullableCDCFilter {
	return &NullableCDCFilter{value: val, isSet: true}
}

func (v NullableCDCFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCDCFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
