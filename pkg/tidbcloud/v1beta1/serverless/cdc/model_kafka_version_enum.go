/*
TiDB Cloud Serverless CDC Open API

TiDB Cloud Serverless CDC Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdc

import (
	"encoding/json"
)

// KafkaVersionEnum  - VERSION_2XX: Kafka 2.x.x version.  - VERSION_3XX: Kafka 3.x.x version.
type KafkaVersionEnum string

// List of KafkaVersion.Enum
const (
	KAFKAVERSIONENUM_VERSION_2_XX KafkaVersionEnum = "VERSION_2XX"
	KAFKAVERSIONENUM_VERSION_3_XX KafkaVersionEnum = "VERSION_3XX"
)

// All allowed values of KafkaVersionEnum enum
var AllowedKafkaVersionEnumEnumValues = []KafkaVersionEnum{
	"VERSION_2XX",
	"VERSION_3XX",
}

func (v *KafkaVersionEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := KafkaVersionEnum(value)
	for _, existing := range AllowedKafkaVersionEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = KafkaVersionEnum(value)
	return nil
}

// NewKafkaVersionEnumFromValue returns a pointer to a valid KafkaVersionEnum for the value passed as argument
func NewKafkaVersionEnumFromValue(v string) *KafkaVersionEnum {
	ev := KafkaVersionEnum(v)
	return &ev
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v KafkaVersionEnum) IsValid() bool {
	for _, existing := range AllowedKafkaVersionEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to KafkaVersion.Enum value
func (v KafkaVersionEnum) Ptr() *KafkaVersionEnum {
	return &v
}

type NullableKafkaVersionEnum struct {
	value *KafkaVersionEnum
	isSet bool
}

func (v NullableKafkaVersionEnum) Get() *KafkaVersionEnum {
	return v.value
}

func (v *NullableKafkaVersionEnum) Set(val *KafkaVersionEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableKafkaVersionEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableKafkaVersionEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKafkaVersionEnum(val *KafkaVersionEnum) *NullableKafkaVersionEnum {
	return &NullableKafkaVersionEnum{value: val, isSet: true}
}

func (v NullableKafkaVersionEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKafkaVersionEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
