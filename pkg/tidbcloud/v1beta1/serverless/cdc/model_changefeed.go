/*
TiDB Cloud Serverless CDC Open API

TiDB Cloud Serverless CDC Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdc

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Changefeed type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Changefeed{}

// Changefeed struct for Changefeed
type Changefeed struct {
	// Required. The ID of the cluster.
	ClusterId string `json:"clusterId"`
	// Output_only. The ID of the changefeed.
	ChangefeedId *string `json:"changefeedId,omitempty"`
	// Output_only. The state of the changefeed.  Optional. The name of the changefeed.
	State *CDCStateEnum `json:"state,omitempty"`
	// Optional. The name of the changefeed.
	DisplayName *string `json:"displayName,omitempty"`
	// Required. The sink of the changefeed.
	Sink SinkInfo `json:"sink"`
	// Required. The filter of the changefeed.
	Filter CDCFilter `json:"filter"`
	// Required. The start position of the changefeed.
	StartPosition StartPosition `json:"startPosition"`
	// Output_only. The current checkpoint for the changefeed.
	Checkpoint *CDCCheckpoint `json:"checkpoint,omitempty"`
	// Output_only. The error message.
	Error *string `json:"error,omitempty"`
	// Output_only. Timestamp when the changefeed was created.
	CreateTime *time.Time `json:"createTime,omitempty"`
	// Output_only. Timestamp when the changefeed was updated.
	UpdateTime           NullableTime `json:"updateTime,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Changefeed Changefeed

// NewChangefeed instantiates a new Changefeed object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangefeed(clusterId string, sink SinkInfo, filter CDCFilter, startPosition StartPosition) *Changefeed {
	this := Changefeed{}
	this.ClusterId = clusterId
	this.Sink = sink
	this.Filter = filter
	this.StartPosition = startPosition
	return &this
}

// NewChangefeedWithDefaults instantiates a new Changefeed object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangefeedWithDefaults() *Changefeed {
	this := Changefeed{}
	return &this
}

// GetClusterId returns the ClusterId field value
func (o *Changefeed) GetClusterId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClusterId
}

// GetClusterIdOk returns a tuple with the ClusterId field value
// and a boolean to check if the value has been set.
func (o *Changefeed) GetClusterIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClusterId, true
}

// SetClusterId sets field value
func (o *Changefeed) SetClusterId(v string) {
	o.ClusterId = v
}

// GetChangefeedId returns the ChangefeedId field value if set, zero value otherwise.
func (o *Changefeed) GetChangefeedId() string {
	if o == nil || IsNil(o.ChangefeedId) {
		var ret string
		return ret
	}
	return *o.ChangefeedId
}

// GetChangefeedIdOk returns a tuple with the ChangefeedId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Changefeed) GetChangefeedIdOk() (*string, bool) {
	if o == nil || IsNil(o.ChangefeedId) {
		return nil, false
	}
	return o.ChangefeedId, true
}

// HasChangefeedId returns a boolean if a field has been set.
func (o *Changefeed) HasChangefeedId() bool {
	if o != nil && !IsNil(o.ChangefeedId) {
		return true
	}

	return false
}

// SetChangefeedId gets a reference to the given string and assigns it to the ChangefeedId field.
func (o *Changefeed) SetChangefeedId(v string) {
	o.ChangefeedId = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *Changefeed) GetState() CDCStateEnum {
	if o == nil || IsNil(o.State) {
		var ret CDCStateEnum
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Changefeed) GetStateOk() (*CDCStateEnum, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *Changefeed) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given CDCStateEnum and assigns it to the State field.
func (o *Changefeed) SetState(v CDCStateEnum) {
	o.State = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *Changefeed) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Changefeed) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *Changefeed) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *Changefeed) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetSink returns the Sink field value
func (o *Changefeed) GetSink() SinkInfo {
	if o == nil {
		var ret SinkInfo
		return ret
	}

	return o.Sink
}

// GetSinkOk returns a tuple with the Sink field value
// and a boolean to check if the value has been set.
func (o *Changefeed) GetSinkOk() (*SinkInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sink, true
}

// SetSink sets field value
func (o *Changefeed) SetSink(v SinkInfo) {
	o.Sink = v
}

// GetFilter returns the Filter field value
func (o *Changefeed) GetFilter() CDCFilter {
	if o == nil {
		var ret CDCFilter
		return ret
	}

	return o.Filter
}

// GetFilterOk returns a tuple with the Filter field value
// and a boolean to check if the value has been set.
func (o *Changefeed) GetFilterOk() (*CDCFilter, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Filter, true
}

// SetFilter sets field value
func (o *Changefeed) SetFilter(v CDCFilter) {
	o.Filter = v
}

// GetStartPosition returns the StartPosition field value
func (o *Changefeed) GetStartPosition() StartPosition {
	if o == nil {
		var ret StartPosition
		return ret
	}

	return o.StartPosition
}

// GetStartPositionOk returns a tuple with the StartPosition field value
// and a boolean to check if the value has been set.
func (o *Changefeed) GetStartPositionOk() (*StartPosition, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartPosition, true
}

// SetStartPosition sets field value
func (o *Changefeed) SetStartPosition(v StartPosition) {
	o.StartPosition = v
}

// GetCheckpoint returns the Checkpoint field value if set, zero value otherwise.
func (o *Changefeed) GetCheckpoint() CDCCheckpoint {
	if o == nil || IsNil(o.Checkpoint) {
		var ret CDCCheckpoint
		return ret
	}
	return *o.Checkpoint
}

// GetCheckpointOk returns a tuple with the Checkpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Changefeed) GetCheckpointOk() (*CDCCheckpoint, bool) {
	if o == nil || IsNil(o.Checkpoint) {
		return nil, false
	}
	return o.Checkpoint, true
}

// HasCheckpoint returns a boolean if a field has been set.
func (o *Changefeed) HasCheckpoint() bool {
	if o != nil && !IsNil(o.Checkpoint) {
		return true
	}

	return false
}

// SetCheckpoint gets a reference to the given CDCCheckpoint and assigns it to the Checkpoint field.
func (o *Changefeed) SetCheckpoint(v CDCCheckpoint) {
	o.Checkpoint = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *Changefeed) GetError() string {
	if o == nil || IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Changefeed) GetErrorOk() (*string, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *Changefeed) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *Changefeed) SetError(v string) {
	o.Error = &v
}

// GetCreateTime returns the CreateTime field value if set, zero value otherwise.
func (o *Changefeed) GetCreateTime() time.Time {
	if o == nil || IsNil(o.CreateTime) {
		var ret time.Time
		return ret
	}
	return *o.CreateTime
}

// GetCreateTimeOk returns a tuple with the CreateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Changefeed) GetCreateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreateTime) {
		return nil, false
	}
	return o.CreateTime, true
}

// HasCreateTime returns a boolean if a field has been set.
func (o *Changefeed) HasCreateTime() bool {
	if o != nil && !IsNil(o.CreateTime) {
		return true
	}

	return false
}

// SetCreateTime gets a reference to the given time.Time and assigns it to the CreateTime field.
func (o *Changefeed) SetCreateTime(v time.Time) {
	o.CreateTime = &v
}

// GetUpdateTime returns the UpdateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Changefeed) GetUpdateTime() time.Time {
	if o == nil || IsNil(o.UpdateTime.Get()) {
		var ret time.Time
		return ret
	}
	return *o.UpdateTime.Get()
}

// GetUpdateTimeOk returns a tuple with the UpdateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Changefeed) GetUpdateTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdateTime.Get(), o.UpdateTime.IsSet()
}

// HasUpdateTime returns a boolean if a field has been set.
func (o *Changefeed) HasUpdateTime() bool {
	if o != nil && o.UpdateTime.IsSet() {
		return true
	}

	return false
}

// SetUpdateTime gets a reference to the given NullableTime and assigns it to the UpdateTime field.
func (o *Changefeed) SetUpdateTime(v time.Time) {
	o.UpdateTime.Set(&v)
}

// SetUpdateTimeNil sets the value for UpdateTime to be an explicit nil
func (o *Changefeed) SetUpdateTimeNil() {
	o.UpdateTime.Set(nil)
}

// UnsetUpdateTime ensures that no value is present for UpdateTime, not even an explicit nil
func (o *Changefeed) UnsetUpdateTime() {
	o.UpdateTime.Unset()
}

func (o Changefeed) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Changefeed) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["clusterId"] = o.ClusterId
	if !IsNil(o.ChangefeedId) {
		toSerialize["changefeedId"] = o.ChangefeedId
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	toSerialize["sink"] = o.Sink
	toSerialize["filter"] = o.Filter
	toSerialize["startPosition"] = o.StartPosition
	if !IsNil(o.Checkpoint) {
		toSerialize["checkpoint"] = o.Checkpoint
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.CreateTime) {
		toSerialize["createTime"] = o.CreateTime
	}
	if o.UpdateTime.IsSet() {
		toSerialize["updateTime"] = o.UpdateTime.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Changefeed) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"clusterId",
		"sink",
		"filter",
		"startPosition",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChangefeed := _Changefeed{}

	err = json.Unmarshal(data, &varChangefeed)

	if err != nil {
		return err
	}

	*o = Changefeed(varChangefeed)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "clusterId")
		delete(additionalProperties, "changefeedId")
		delete(additionalProperties, "state")
		delete(additionalProperties, "displayName")
		delete(additionalProperties, "sink")
		delete(additionalProperties, "filter")
		delete(additionalProperties, "startPosition")
		delete(additionalProperties, "checkpoint")
		delete(additionalProperties, "error")
		delete(additionalProperties, "createTime")
		delete(additionalProperties, "updateTime")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableChangefeed struct {
	value *Changefeed
	isSet bool
}

func (v NullableChangefeed) Get() *Changefeed {
	return v.value
}

func (v *NullableChangefeed) Set(val *Changefeed) {
	v.value = val
	v.isSet = true
}

func (v NullableChangefeed) IsSet() bool {
	return v.isSet
}

func (v *NullableChangefeed) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangefeed(val *Changefeed) *NullableChangefeed {
	return &NullableChangefeed{value: val, isSet: true}
}

func (v NullableChangefeed) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangefeed) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
