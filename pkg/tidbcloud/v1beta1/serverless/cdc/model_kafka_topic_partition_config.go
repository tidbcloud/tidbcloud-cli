/*
TiDB Cloud Serverless CDC Open API

TiDB Cloud Serverless CDC Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdc

import (
	"encoding/json"
)

// checks if the KafkaTopicPartitionConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KafkaTopicPartitionConfig{}

// KafkaTopicPartitionConfig struct for KafkaTopicPartitionConfig
type KafkaTopicPartitionConfig struct {
	DispatchType         *TopicDispatchTypeEnum           `json:"dispatchType,omitempty"`
	DefaultTopic         *string                          `json:"defaultTopic,omitempty"`
	TopicPrefix          *string                          `json:"topicPrefix,omitempty"`
	Separator            *string                          `json:"separator,omitempty"`
	TopicSuffix          *string                          `json:"topicSuffix,omitempty"`
	ReplicationFactor    *int64                           `json:"replicationFactor,omitempty"`
	PartitionNum         *int64                           `json:"partitionNum,omitempty"`
	PartitionDispatchers []KafkaPartitionDispatcherConfig `json:"partitionDispatchers,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _KafkaTopicPartitionConfig KafkaTopicPartitionConfig

// NewKafkaTopicPartitionConfig instantiates a new KafkaTopicPartitionConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKafkaTopicPartitionConfig() *KafkaTopicPartitionConfig {
	this := KafkaTopicPartitionConfig{}
	return &this
}

// NewKafkaTopicPartitionConfigWithDefaults instantiates a new KafkaTopicPartitionConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKafkaTopicPartitionConfigWithDefaults() *KafkaTopicPartitionConfig {
	this := KafkaTopicPartitionConfig{}
	return &this
}

// GetDispatchType returns the DispatchType field value if set, zero value otherwise.
func (o *KafkaTopicPartitionConfig) GetDispatchType() TopicDispatchTypeEnum {
	if o == nil || IsNil(o.DispatchType) {
		var ret TopicDispatchTypeEnum
		return ret
	}
	return *o.DispatchType
}

// GetDispatchTypeOk returns a tuple with the DispatchType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaTopicPartitionConfig) GetDispatchTypeOk() (*TopicDispatchTypeEnum, bool) {
	if o == nil || IsNil(o.DispatchType) {
		return nil, false
	}
	return o.DispatchType, true
}

// HasDispatchType returns a boolean if a field has been set.
func (o *KafkaTopicPartitionConfig) HasDispatchType() bool {
	if o != nil && !IsNil(o.DispatchType) {
		return true
	}

	return false
}

// SetDispatchType gets a reference to the given TopicDispatchTypeEnum and assigns it to the DispatchType field.
func (o *KafkaTopicPartitionConfig) SetDispatchType(v TopicDispatchTypeEnum) {
	o.DispatchType = &v
}

// GetDefaultTopic returns the DefaultTopic field value if set, zero value otherwise.
func (o *KafkaTopicPartitionConfig) GetDefaultTopic() string {
	if o == nil || IsNil(o.DefaultTopic) {
		var ret string
		return ret
	}
	return *o.DefaultTopic
}

// GetDefaultTopicOk returns a tuple with the DefaultTopic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaTopicPartitionConfig) GetDefaultTopicOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultTopic) {
		return nil, false
	}
	return o.DefaultTopic, true
}

// HasDefaultTopic returns a boolean if a field has been set.
func (o *KafkaTopicPartitionConfig) HasDefaultTopic() bool {
	if o != nil && !IsNil(o.DefaultTopic) {
		return true
	}

	return false
}

// SetDefaultTopic gets a reference to the given string and assigns it to the DefaultTopic field.
func (o *KafkaTopicPartitionConfig) SetDefaultTopic(v string) {
	o.DefaultTopic = &v
}

// GetTopicPrefix returns the TopicPrefix field value if set, zero value otherwise.
func (o *KafkaTopicPartitionConfig) GetTopicPrefix() string {
	if o == nil || IsNil(o.TopicPrefix) {
		var ret string
		return ret
	}
	return *o.TopicPrefix
}

// GetTopicPrefixOk returns a tuple with the TopicPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaTopicPartitionConfig) GetTopicPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.TopicPrefix) {
		return nil, false
	}
	return o.TopicPrefix, true
}

// HasTopicPrefix returns a boolean if a field has been set.
func (o *KafkaTopicPartitionConfig) HasTopicPrefix() bool {
	if o != nil && !IsNil(o.TopicPrefix) {
		return true
	}

	return false
}

// SetTopicPrefix gets a reference to the given string and assigns it to the TopicPrefix field.
func (o *KafkaTopicPartitionConfig) SetTopicPrefix(v string) {
	o.TopicPrefix = &v
}

// GetSeparator returns the Separator field value if set, zero value otherwise.
func (o *KafkaTopicPartitionConfig) GetSeparator() string {
	if o == nil || IsNil(o.Separator) {
		var ret string
		return ret
	}
	return *o.Separator
}

// GetSeparatorOk returns a tuple with the Separator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaTopicPartitionConfig) GetSeparatorOk() (*string, bool) {
	if o == nil || IsNil(o.Separator) {
		return nil, false
	}
	return o.Separator, true
}

// HasSeparator returns a boolean if a field has been set.
func (o *KafkaTopicPartitionConfig) HasSeparator() bool {
	if o != nil && !IsNil(o.Separator) {
		return true
	}

	return false
}

// SetSeparator gets a reference to the given string and assigns it to the Separator field.
func (o *KafkaTopicPartitionConfig) SetSeparator(v string) {
	o.Separator = &v
}

// GetTopicSuffix returns the TopicSuffix field value if set, zero value otherwise.
func (o *KafkaTopicPartitionConfig) GetTopicSuffix() string {
	if o == nil || IsNil(o.TopicSuffix) {
		var ret string
		return ret
	}
	return *o.TopicSuffix
}

// GetTopicSuffixOk returns a tuple with the TopicSuffix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaTopicPartitionConfig) GetTopicSuffixOk() (*string, bool) {
	if o == nil || IsNil(o.TopicSuffix) {
		return nil, false
	}
	return o.TopicSuffix, true
}

// HasTopicSuffix returns a boolean if a field has been set.
func (o *KafkaTopicPartitionConfig) HasTopicSuffix() bool {
	if o != nil && !IsNil(o.TopicSuffix) {
		return true
	}

	return false
}

// SetTopicSuffix gets a reference to the given string and assigns it to the TopicSuffix field.
func (o *KafkaTopicPartitionConfig) SetTopicSuffix(v string) {
	o.TopicSuffix = &v
}

// GetReplicationFactor returns the ReplicationFactor field value if set, zero value otherwise.
func (o *KafkaTopicPartitionConfig) GetReplicationFactor() int64 {
	if o == nil || IsNil(o.ReplicationFactor) {
		var ret int64
		return ret
	}
	return *o.ReplicationFactor
}

// GetReplicationFactorOk returns a tuple with the ReplicationFactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaTopicPartitionConfig) GetReplicationFactorOk() (*int64, bool) {
	if o == nil || IsNil(o.ReplicationFactor) {
		return nil, false
	}
	return o.ReplicationFactor, true
}

// HasReplicationFactor returns a boolean if a field has been set.
func (o *KafkaTopicPartitionConfig) HasReplicationFactor() bool {
	if o != nil && !IsNil(o.ReplicationFactor) {
		return true
	}

	return false
}

// SetReplicationFactor gets a reference to the given int64 and assigns it to the ReplicationFactor field.
func (o *KafkaTopicPartitionConfig) SetReplicationFactor(v int64) {
	o.ReplicationFactor = &v
}

// GetPartitionNum returns the PartitionNum field value if set, zero value otherwise.
func (o *KafkaTopicPartitionConfig) GetPartitionNum() int64 {
	if o == nil || IsNil(o.PartitionNum) {
		var ret int64
		return ret
	}
	return *o.PartitionNum
}

// GetPartitionNumOk returns a tuple with the PartitionNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaTopicPartitionConfig) GetPartitionNumOk() (*int64, bool) {
	if o == nil || IsNil(o.PartitionNum) {
		return nil, false
	}
	return o.PartitionNum, true
}

// HasPartitionNum returns a boolean if a field has been set.
func (o *KafkaTopicPartitionConfig) HasPartitionNum() bool {
	if o != nil && !IsNil(o.PartitionNum) {
		return true
	}

	return false
}

// SetPartitionNum gets a reference to the given int64 and assigns it to the PartitionNum field.
func (o *KafkaTopicPartitionConfig) SetPartitionNum(v int64) {
	o.PartitionNum = &v
}

// GetPartitionDispatchers returns the PartitionDispatchers field value if set, zero value otherwise.
func (o *KafkaTopicPartitionConfig) GetPartitionDispatchers() []KafkaPartitionDispatcherConfig {
	if o == nil || IsNil(o.PartitionDispatchers) {
		var ret []KafkaPartitionDispatcherConfig
		return ret
	}
	return o.PartitionDispatchers
}

// GetPartitionDispatchersOk returns a tuple with the PartitionDispatchers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaTopicPartitionConfig) GetPartitionDispatchersOk() ([]KafkaPartitionDispatcherConfig, bool) {
	if o == nil || IsNil(o.PartitionDispatchers) {
		return nil, false
	}
	return o.PartitionDispatchers, true
}

// HasPartitionDispatchers returns a boolean if a field has been set.
func (o *KafkaTopicPartitionConfig) HasPartitionDispatchers() bool {
	if o != nil && !IsNil(o.PartitionDispatchers) {
		return true
	}

	return false
}

// SetPartitionDispatchers gets a reference to the given []KafkaPartitionDispatcherConfig and assigns it to the PartitionDispatchers field.
func (o *KafkaTopicPartitionConfig) SetPartitionDispatchers(v []KafkaPartitionDispatcherConfig) {
	o.PartitionDispatchers = v
}

func (o KafkaTopicPartitionConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KafkaTopicPartitionConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DispatchType) {
		toSerialize["dispatchType"] = o.DispatchType
	}
	if !IsNil(o.DefaultTopic) {
		toSerialize["defaultTopic"] = o.DefaultTopic
	}
	if !IsNil(o.TopicPrefix) {
		toSerialize["topicPrefix"] = o.TopicPrefix
	}
	if !IsNil(o.Separator) {
		toSerialize["separator"] = o.Separator
	}
	if !IsNil(o.TopicSuffix) {
		toSerialize["topicSuffix"] = o.TopicSuffix
	}
	if !IsNil(o.ReplicationFactor) {
		toSerialize["replicationFactor"] = o.ReplicationFactor
	}
	if !IsNil(o.PartitionNum) {
		toSerialize["partitionNum"] = o.PartitionNum
	}
	if !IsNil(o.PartitionDispatchers) {
		toSerialize["partitionDispatchers"] = o.PartitionDispatchers
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *KafkaTopicPartitionConfig) UnmarshalJSON(data []byte) (err error) {
	varKafkaTopicPartitionConfig := _KafkaTopicPartitionConfig{}

	err = json.Unmarshal(data, &varKafkaTopicPartitionConfig)

	if err != nil {
		return err
	}

	*o = KafkaTopicPartitionConfig(varKafkaTopicPartitionConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "dispatchType")
		delete(additionalProperties, "defaultTopic")
		delete(additionalProperties, "topicPrefix")
		delete(additionalProperties, "separator")
		delete(additionalProperties, "topicSuffix")
		delete(additionalProperties, "replicationFactor")
		delete(additionalProperties, "partitionNum")
		delete(additionalProperties, "partitionDispatchers")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableKafkaTopicPartitionConfig struct {
	value *KafkaTopicPartitionConfig
	isSet bool
}

func (v NullableKafkaTopicPartitionConfig) Get() *KafkaTopicPartitionConfig {
	return v.value
}

func (v *NullableKafkaTopicPartitionConfig) Set(val *KafkaTopicPartitionConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableKafkaTopicPartitionConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableKafkaTopicPartitionConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKafkaTopicPartitionConfig(val *KafkaTopicPartitionConfig) *NullableKafkaTopicPartitionConfig {
	return &NullableKafkaTopicPartitionConfig{value: val, isSet: true}
}

func (v NullableKafkaTopicPartitionConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKafkaTopicPartitionConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
