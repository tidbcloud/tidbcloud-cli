/*
TiDB Cloud Serverless CDC Open API

TiDB Cloud Serverless CDC Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdc

import (
	"encoding/json"
)

// ChangefeedTypeEnum  - KAFKA: Kafka changefeed type.  - MYSQL: MySQL changefeed type.
type ChangefeedTypeEnum string

// List of ChangefeedType.Enum
const (
	CHANGEFEEDTYPEENUM_KAFKA ChangefeedTypeEnum = "KAFKA"
	CHANGEFEEDTYPEENUM_MYSQL ChangefeedTypeEnum = "MYSQL"
)

// All allowed values of ChangefeedTypeEnum enum
var AllowedChangefeedTypeEnumEnumValues = []ChangefeedTypeEnum{
	"KAFKA",
	"MYSQL",
}

func (v *ChangefeedTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ChangefeedTypeEnum(value)
	for _, existing := range AllowedChangefeedTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = ChangefeedTypeEnum(value)
	return nil
}

// NewChangefeedTypeEnumFromValue returns a pointer to a valid ChangefeedTypeEnum for the value passed as argument
func NewChangefeedTypeEnumFromValue(v string) *ChangefeedTypeEnum {
	ev := ChangefeedTypeEnum(v)
	return &ev
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ChangefeedTypeEnum) IsValid() bool {
	for _, existing := range AllowedChangefeedTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ChangefeedType.Enum value
func (v ChangefeedTypeEnum) Ptr() *ChangefeedTypeEnum {
	return &v
}

type NullableChangefeedTypeEnum struct {
	value *ChangefeedTypeEnum
	isSet bool
}

func (v NullableChangefeedTypeEnum) Get() *ChangefeedTypeEnum {
	return v.value
}

func (v *NullableChangefeedTypeEnum) Set(val *ChangefeedTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableChangefeedTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableChangefeedTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangefeedTypeEnum(val *ChangefeedTypeEnum) *NullableChangefeedTypeEnum {
	return &NullableChangefeedTypeEnum{value: val, isSet: true}
}

func (v NullableChangefeedTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangefeedTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
