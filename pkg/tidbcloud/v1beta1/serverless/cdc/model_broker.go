/*
TiDB Cloud Serverless CDC Open API

TiDB Cloud Serverless CDC Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdc

import (
	"encoding/json"
)

// checks if the Broker type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Broker{}

// Broker struct for Broker
type Broker struct {
	KafkaVersion         *KafkaVersionEnum         `json:"kafkaVersion,omitempty"`
	BrokerEndpoints      *string                   `json:"brokerEndpoints,omitempty"`
	TlsEnable            *bool                     `json:"tlsEnable,omitempty"`
	Compression          *KafkaCompressionTypeEnum `json:"compression,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Broker Broker

// NewBroker instantiates a new Broker object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBroker() *Broker {
	this := Broker{}
	return &this
}

// NewBrokerWithDefaults instantiates a new Broker object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBrokerWithDefaults() *Broker {
	this := Broker{}
	return &this
}

// GetKafkaVersion returns the KafkaVersion field value if set, zero value otherwise.
func (o *Broker) GetKafkaVersion() KafkaVersionEnum {
	if o == nil || IsNil(o.KafkaVersion) {
		var ret KafkaVersionEnum
		return ret
	}
	return *o.KafkaVersion
}

// GetKafkaVersionOk returns a tuple with the KafkaVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Broker) GetKafkaVersionOk() (*KafkaVersionEnum, bool) {
	if o == nil || IsNil(o.KafkaVersion) {
		return nil, false
	}
	return o.KafkaVersion, true
}

// HasKafkaVersion returns a boolean if a field has been set.
func (o *Broker) HasKafkaVersion() bool {
	if o != nil && !IsNil(o.KafkaVersion) {
		return true
	}

	return false
}

// SetKafkaVersion gets a reference to the given KafkaVersionEnum and assigns it to the KafkaVersion field.
func (o *Broker) SetKafkaVersion(v KafkaVersionEnum) {
	o.KafkaVersion = &v
}

// GetBrokerEndpoints returns the BrokerEndpoints field value if set, zero value otherwise.
func (o *Broker) GetBrokerEndpoints() string {
	if o == nil || IsNil(o.BrokerEndpoints) {
		var ret string
		return ret
	}
	return *o.BrokerEndpoints
}

// GetBrokerEndpointsOk returns a tuple with the BrokerEndpoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Broker) GetBrokerEndpointsOk() (*string, bool) {
	if o == nil || IsNil(o.BrokerEndpoints) {
		return nil, false
	}
	return o.BrokerEndpoints, true
}

// HasBrokerEndpoints returns a boolean if a field has been set.
func (o *Broker) HasBrokerEndpoints() bool {
	if o != nil && !IsNil(o.BrokerEndpoints) {
		return true
	}

	return false
}

// SetBrokerEndpoints gets a reference to the given string and assigns it to the BrokerEndpoints field.
func (o *Broker) SetBrokerEndpoints(v string) {
	o.BrokerEndpoints = &v
}

// GetTlsEnable returns the TlsEnable field value if set, zero value otherwise.
func (o *Broker) GetTlsEnable() bool {
	if o == nil || IsNil(o.TlsEnable) {
		var ret bool
		return ret
	}
	return *o.TlsEnable
}

// GetTlsEnableOk returns a tuple with the TlsEnable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Broker) GetTlsEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.TlsEnable) {
		return nil, false
	}
	return o.TlsEnable, true
}

// HasTlsEnable returns a boolean if a field has been set.
func (o *Broker) HasTlsEnable() bool {
	if o != nil && !IsNil(o.TlsEnable) {
		return true
	}

	return false
}

// SetTlsEnable gets a reference to the given bool and assigns it to the TlsEnable field.
func (o *Broker) SetTlsEnable(v bool) {
	o.TlsEnable = &v
}

// GetCompression returns the Compression field value if set, zero value otherwise.
func (o *Broker) GetCompression() KafkaCompressionTypeEnum {
	if o == nil || IsNil(o.Compression) {
		var ret KafkaCompressionTypeEnum
		return ret
	}
	return *o.Compression
}

// GetCompressionOk returns a tuple with the Compression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Broker) GetCompressionOk() (*KafkaCompressionTypeEnum, bool) {
	if o == nil || IsNil(o.Compression) {
		return nil, false
	}
	return o.Compression, true
}

// HasCompression returns a boolean if a field has been set.
func (o *Broker) HasCompression() bool {
	if o != nil && !IsNil(o.Compression) {
		return true
	}

	return false
}

// SetCompression gets a reference to the given KafkaCompressionTypeEnum and assigns it to the Compression field.
func (o *Broker) SetCompression(v KafkaCompressionTypeEnum) {
	o.Compression = &v
}

func (o Broker) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Broker) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.KafkaVersion) {
		toSerialize["kafkaVersion"] = o.KafkaVersion
	}
	if !IsNil(o.BrokerEndpoints) {
		toSerialize["brokerEndpoints"] = o.BrokerEndpoints
	}
	if !IsNil(o.TlsEnable) {
		toSerialize["tlsEnable"] = o.TlsEnable
	}
	if !IsNil(o.Compression) {
		toSerialize["compression"] = o.Compression
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Broker) UnmarshalJSON(data []byte) (err error) {
	varBroker := _Broker{}

	err = json.Unmarshal(data, &varBroker)

	if err != nil {
		return err
	}

	*o = Broker(varBroker)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "kafkaVersion")
		delete(additionalProperties, "brokerEndpoints")
		delete(additionalProperties, "tlsEnable")
		delete(additionalProperties, "compression")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBroker struct {
	value *Broker
	isSet bool
}

func (v NullableBroker) Get() *Broker {
	return v.value
}

func (v *NullableBroker) Set(val *Broker) {
	v.value = val
	v.isSet = true
}

func (v NullableBroker) IsSet() bool {
	return v.isSet
}

func (v *NullableBroker) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBroker(val *Broker) *NullableBroker {
	return &NullableBroker{value: val, isSet: true}
}

func (v NullableBroker) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBroker) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
