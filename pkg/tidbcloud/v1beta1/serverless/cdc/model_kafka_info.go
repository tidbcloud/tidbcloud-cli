/*
TiDB Cloud Serverless CDC Open API

TiDB Cloud Serverless CDC Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdc

import (
	"encoding/json"
)

// checks if the KafkaInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KafkaInfo{}

// KafkaInfo struct for KafkaInfo
type KafkaInfo struct {
	NetworkInfo          *NetworkInfo          `json:"networkInfo,omitempty"`
	Broker               *Broker               `json:"broker,omitempty"`
	Authentication       *Authentication       `json:"authentication,omitempty"`
	DataFormat           *DataFormat           `json:"dataFormat,omitempty"`
	TopicPartitionConfig *TopicPartitionConfig `json:"topicPartitionConfig,omitempty"`
	ColumnSelectors      []ColumnSelector      `json:"columnSelectors,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _KafkaInfo KafkaInfo

// NewKafkaInfo instantiates a new KafkaInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKafkaInfo() *KafkaInfo {
	this := KafkaInfo{}
	return &this
}

// NewKafkaInfoWithDefaults instantiates a new KafkaInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKafkaInfoWithDefaults() *KafkaInfo {
	this := KafkaInfo{}
	return &this
}

// GetNetworkInfo returns the NetworkInfo field value if set, zero value otherwise.
func (o *KafkaInfo) GetNetworkInfo() NetworkInfo {
	if o == nil || IsNil(o.NetworkInfo) {
		var ret NetworkInfo
		return ret
	}
	return *o.NetworkInfo
}

// GetNetworkInfoOk returns a tuple with the NetworkInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaInfo) GetNetworkInfoOk() (*NetworkInfo, bool) {
	if o == nil || IsNil(o.NetworkInfo) {
		return nil, false
	}
	return o.NetworkInfo, true
}

// HasNetworkInfo returns a boolean if a field has been set.
func (o *KafkaInfo) HasNetworkInfo() bool {
	if o != nil && !IsNil(o.NetworkInfo) {
		return true
	}

	return false
}

// SetNetworkInfo gets a reference to the given NetworkInfo and assigns it to the NetworkInfo field.
func (o *KafkaInfo) SetNetworkInfo(v NetworkInfo) {
	o.NetworkInfo = &v
}

// GetBroker returns the Broker field value if set, zero value otherwise.
func (o *KafkaInfo) GetBroker() Broker {
	if o == nil || IsNil(o.Broker) {
		var ret Broker
		return ret
	}
	return *o.Broker
}

// GetBrokerOk returns a tuple with the Broker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaInfo) GetBrokerOk() (*Broker, bool) {
	if o == nil || IsNil(o.Broker) {
		return nil, false
	}
	return o.Broker, true
}

// HasBroker returns a boolean if a field has been set.
func (o *KafkaInfo) HasBroker() bool {
	if o != nil && !IsNil(o.Broker) {
		return true
	}

	return false
}

// SetBroker gets a reference to the given Broker and assigns it to the Broker field.
func (o *KafkaInfo) SetBroker(v Broker) {
	o.Broker = &v
}

// GetAuthentication returns the Authentication field value if set, zero value otherwise.
func (o *KafkaInfo) GetAuthentication() Authentication {
	if o == nil || IsNil(o.Authentication) {
		var ret Authentication
		return ret
	}
	return *o.Authentication
}

// GetAuthenticationOk returns a tuple with the Authentication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaInfo) GetAuthenticationOk() (*Authentication, bool) {
	if o == nil || IsNil(o.Authentication) {
		return nil, false
	}
	return o.Authentication, true
}

// HasAuthentication returns a boolean if a field has been set.
func (o *KafkaInfo) HasAuthentication() bool {
	if o != nil && !IsNil(o.Authentication) {
		return true
	}

	return false
}

// SetAuthentication gets a reference to the given Authentication and assigns it to the Authentication field.
func (o *KafkaInfo) SetAuthentication(v Authentication) {
	o.Authentication = &v
}

// GetDataFormat returns the DataFormat field value if set, zero value otherwise.
func (o *KafkaInfo) GetDataFormat() DataFormat {
	if o == nil || IsNil(o.DataFormat) {
		var ret DataFormat
		return ret
	}
	return *o.DataFormat
}

// GetDataFormatOk returns a tuple with the DataFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaInfo) GetDataFormatOk() (*DataFormat, bool) {
	if o == nil || IsNil(o.DataFormat) {
		return nil, false
	}
	return o.DataFormat, true
}

// HasDataFormat returns a boolean if a field has been set.
func (o *KafkaInfo) HasDataFormat() bool {
	if o != nil && !IsNil(o.DataFormat) {
		return true
	}

	return false
}

// SetDataFormat gets a reference to the given DataFormat and assigns it to the DataFormat field.
func (o *KafkaInfo) SetDataFormat(v DataFormat) {
	o.DataFormat = &v
}

// GetTopicPartitionConfig returns the TopicPartitionConfig field value if set, zero value otherwise.
func (o *KafkaInfo) GetTopicPartitionConfig() TopicPartitionConfig {
	if o == nil || IsNil(o.TopicPartitionConfig) {
		var ret TopicPartitionConfig
		return ret
	}
	return *o.TopicPartitionConfig
}

// GetTopicPartitionConfigOk returns a tuple with the TopicPartitionConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaInfo) GetTopicPartitionConfigOk() (*TopicPartitionConfig, bool) {
	if o == nil || IsNil(o.TopicPartitionConfig) {
		return nil, false
	}
	return o.TopicPartitionConfig, true
}

// HasTopicPartitionConfig returns a boolean if a field has been set.
func (o *KafkaInfo) HasTopicPartitionConfig() bool {
	if o != nil && !IsNil(o.TopicPartitionConfig) {
		return true
	}

	return false
}

// SetTopicPartitionConfig gets a reference to the given TopicPartitionConfig and assigns it to the TopicPartitionConfig field.
func (o *KafkaInfo) SetTopicPartitionConfig(v TopicPartitionConfig) {
	o.TopicPartitionConfig = &v
}

// GetColumnSelectors returns the ColumnSelectors field value if set, zero value otherwise.
func (o *KafkaInfo) GetColumnSelectors() []ColumnSelector {
	if o == nil || IsNil(o.ColumnSelectors) {
		var ret []ColumnSelector
		return ret
	}
	return o.ColumnSelectors
}

// GetColumnSelectorsOk returns a tuple with the ColumnSelectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaInfo) GetColumnSelectorsOk() ([]ColumnSelector, bool) {
	if o == nil || IsNil(o.ColumnSelectors) {
		return nil, false
	}
	return o.ColumnSelectors, true
}

// HasColumnSelectors returns a boolean if a field has been set.
func (o *KafkaInfo) HasColumnSelectors() bool {
	if o != nil && !IsNil(o.ColumnSelectors) {
		return true
	}

	return false
}

// SetColumnSelectors gets a reference to the given []ColumnSelector and assigns it to the ColumnSelectors field.
func (o *KafkaInfo) SetColumnSelectors(v []ColumnSelector) {
	o.ColumnSelectors = v
}

func (o KafkaInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KafkaInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NetworkInfo) {
		toSerialize["networkInfo"] = o.NetworkInfo
	}
	if !IsNil(o.Broker) {
		toSerialize["broker"] = o.Broker
	}
	if !IsNil(o.Authentication) {
		toSerialize["authentication"] = o.Authentication
	}
	if !IsNil(o.DataFormat) {
		toSerialize["dataFormat"] = o.DataFormat
	}
	if !IsNil(o.TopicPartitionConfig) {
		toSerialize["topicPartitionConfig"] = o.TopicPartitionConfig
	}
	if !IsNil(o.ColumnSelectors) {
		toSerialize["columnSelectors"] = o.ColumnSelectors
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *KafkaInfo) UnmarshalJSON(data []byte) (err error) {
	varKafkaInfo := _KafkaInfo{}

	err = json.Unmarshal(data, &varKafkaInfo)

	if err != nil {
		return err
	}

	*o = KafkaInfo(varKafkaInfo)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "networkInfo")
		delete(additionalProperties, "broker")
		delete(additionalProperties, "authentication")
		delete(additionalProperties, "dataFormat")
		delete(additionalProperties, "topicPartitionConfig")
		delete(additionalProperties, "columnSelectors")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableKafkaInfo struct {
	value *KafkaInfo
	isSet bool
}

func (v NullableKafkaInfo) Get() *KafkaInfo {
	return v.value
}

func (v *NullableKafkaInfo) Set(val *KafkaInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableKafkaInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableKafkaInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKafkaInfo(val *KafkaInfo) *NullableKafkaInfo {
	return &NullableKafkaInfo{value: val, isSet: true}
}

func (v NullableKafkaInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKafkaInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
