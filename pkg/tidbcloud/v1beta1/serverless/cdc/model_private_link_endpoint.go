/*
TiDB Cloud Serverless CDC Open API

TiDB Cloud Serverless CDC Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdc

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the PrivateLinkEndpoint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrivateLinkEndpoint{}

// PrivateLinkEndpoint struct for PrivateLinkEndpoint
type PrivateLinkEndpoint struct {
	// Output_only  The ID of the private link endpoint.
	EndpointId *string `json:"endpointId,omitempty"`
	// Required. The ID of the cluster.
	ClusterId string `json:"clusterId"`
	// Required. The private link service name.
	PrivateLinkServiceName string `json:"privateLinkServiceName"`
	// Required. The type of the sink.
	ChangefeedType ChangefeedTypeEnum `json:"changefeedType"`
	// Output_only. The state of the private link.
	State *PrivateLinkEndpointStateEnum `json:"state,omitempty"`
	// Optional. Kafka private link endpoint information.
	Kafka *KafkaEndpoint `json:"kafka,omitempty"`
	// Output_only. The message.
	Message *string `json:"message,omitempty"`
	// Output_only. The message.
	EndpointUrl *string `json:"endpointUrl,omitempty"`
	// Output_only. Timestamp when the private link endpoint was created.
	CreateTime *time.Time `json:"createTime,omitempty"`
	// Output_only. Timestamp when the private link endpoint was updated.
	UpdateTime           NullableTime `json:"updateTime,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PrivateLinkEndpoint PrivateLinkEndpoint

// NewPrivateLinkEndpoint instantiates a new PrivateLinkEndpoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrivateLinkEndpoint(clusterId string, privateLinkServiceName string, changefeedType ChangefeedTypeEnum) *PrivateLinkEndpoint {
	this := PrivateLinkEndpoint{}
	this.ClusterId = clusterId
	this.PrivateLinkServiceName = privateLinkServiceName
	this.ChangefeedType = changefeedType
	return &this
}

// NewPrivateLinkEndpointWithDefaults instantiates a new PrivateLinkEndpoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrivateLinkEndpointWithDefaults() *PrivateLinkEndpoint {
	this := PrivateLinkEndpoint{}
	return &this
}

// GetEndpointId returns the EndpointId field value if set, zero value otherwise.
func (o *PrivateLinkEndpoint) GetEndpointId() string {
	if o == nil || IsNil(o.EndpointId) {
		var ret string
		return ret
	}
	return *o.EndpointId
}

// GetEndpointIdOk returns a tuple with the EndpointId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivateLinkEndpoint) GetEndpointIdOk() (*string, bool) {
	if o == nil || IsNil(o.EndpointId) {
		return nil, false
	}
	return o.EndpointId, true
}

// HasEndpointId returns a boolean if a field has been set.
func (o *PrivateLinkEndpoint) HasEndpointId() bool {
	if o != nil && !IsNil(o.EndpointId) {
		return true
	}

	return false
}

// SetEndpointId gets a reference to the given string and assigns it to the EndpointId field.
func (o *PrivateLinkEndpoint) SetEndpointId(v string) {
	o.EndpointId = &v
}

// GetClusterId returns the ClusterId field value
func (o *PrivateLinkEndpoint) GetClusterId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClusterId
}

// GetClusterIdOk returns a tuple with the ClusterId field value
// and a boolean to check if the value has been set.
func (o *PrivateLinkEndpoint) GetClusterIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClusterId, true
}

// SetClusterId sets field value
func (o *PrivateLinkEndpoint) SetClusterId(v string) {
	o.ClusterId = v
}

// GetPrivateLinkServiceName returns the PrivateLinkServiceName field value
func (o *PrivateLinkEndpoint) GetPrivateLinkServiceName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PrivateLinkServiceName
}

// GetPrivateLinkServiceNameOk returns a tuple with the PrivateLinkServiceName field value
// and a boolean to check if the value has been set.
func (o *PrivateLinkEndpoint) GetPrivateLinkServiceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrivateLinkServiceName, true
}

// SetPrivateLinkServiceName sets field value
func (o *PrivateLinkEndpoint) SetPrivateLinkServiceName(v string) {
	o.PrivateLinkServiceName = v
}

// GetChangefeedType returns the ChangefeedType field value
func (o *PrivateLinkEndpoint) GetChangefeedType() ChangefeedTypeEnum {
	if o == nil {
		var ret ChangefeedTypeEnum
		return ret
	}

	return o.ChangefeedType
}

// GetChangefeedTypeOk returns a tuple with the ChangefeedType field value
// and a boolean to check if the value has been set.
func (o *PrivateLinkEndpoint) GetChangefeedTypeOk() (*ChangefeedTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChangefeedType, true
}

// SetChangefeedType sets field value
func (o *PrivateLinkEndpoint) SetChangefeedType(v ChangefeedTypeEnum) {
	o.ChangefeedType = v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *PrivateLinkEndpoint) GetState() PrivateLinkEndpointStateEnum {
	if o == nil || IsNil(o.State) {
		var ret PrivateLinkEndpointStateEnum
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivateLinkEndpoint) GetStateOk() (*PrivateLinkEndpointStateEnum, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *PrivateLinkEndpoint) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given PrivateLinkEndpointStateEnum and assigns it to the State field.
func (o *PrivateLinkEndpoint) SetState(v PrivateLinkEndpointStateEnum) {
	o.State = &v
}

// GetKafka returns the Kafka field value if set, zero value otherwise.
func (o *PrivateLinkEndpoint) GetKafka() KafkaEndpoint {
	if o == nil || IsNil(o.Kafka) {
		var ret KafkaEndpoint
		return ret
	}
	return *o.Kafka
}

// GetKafkaOk returns a tuple with the Kafka field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivateLinkEndpoint) GetKafkaOk() (*KafkaEndpoint, bool) {
	if o == nil || IsNil(o.Kafka) {
		return nil, false
	}
	return o.Kafka, true
}

// HasKafka returns a boolean if a field has been set.
func (o *PrivateLinkEndpoint) HasKafka() bool {
	if o != nil && !IsNil(o.Kafka) {
		return true
	}

	return false
}

// SetKafka gets a reference to the given KafkaEndpoint and assigns it to the Kafka field.
func (o *PrivateLinkEndpoint) SetKafka(v KafkaEndpoint) {
	o.Kafka = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *PrivateLinkEndpoint) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivateLinkEndpoint) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *PrivateLinkEndpoint) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *PrivateLinkEndpoint) SetMessage(v string) {
	o.Message = &v
}

// GetEndpointUrl returns the EndpointUrl field value if set, zero value otherwise.
func (o *PrivateLinkEndpoint) GetEndpointUrl() string {
	if o == nil || IsNil(o.EndpointUrl) {
		var ret string
		return ret
	}
	return *o.EndpointUrl
}

// GetEndpointUrlOk returns a tuple with the EndpointUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivateLinkEndpoint) GetEndpointUrlOk() (*string, bool) {
	if o == nil || IsNil(o.EndpointUrl) {
		return nil, false
	}
	return o.EndpointUrl, true
}

// HasEndpointUrl returns a boolean if a field has been set.
func (o *PrivateLinkEndpoint) HasEndpointUrl() bool {
	if o != nil && !IsNil(o.EndpointUrl) {
		return true
	}

	return false
}

// SetEndpointUrl gets a reference to the given string and assigns it to the EndpointUrl field.
func (o *PrivateLinkEndpoint) SetEndpointUrl(v string) {
	o.EndpointUrl = &v
}

// GetCreateTime returns the CreateTime field value if set, zero value otherwise.
func (o *PrivateLinkEndpoint) GetCreateTime() time.Time {
	if o == nil || IsNil(o.CreateTime) {
		var ret time.Time
		return ret
	}
	return *o.CreateTime
}

// GetCreateTimeOk returns a tuple with the CreateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivateLinkEndpoint) GetCreateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreateTime) {
		return nil, false
	}
	return o.CreateTime, true
}

// HasCreateTime returns a boolean if a field has been set.
func (o *PrivateLinkEndpoint) HasCreateTime() bool {
	if o != nil && !IsNil(o.CreateTime) {
		return true
	}

	return false
}

// SetCreateTime gets a reference to the given time.Time and assigns it to the CreateTime field.
func (o *PrivateLinkEndpoint) SetCreateTime(v time.Time) {
	o.CreateTime = &v
}

// GetUpdateTime returns the UpdateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PrivateLinkEndpoint) GetUpdateTime() time.Time {
	if o == nil || IsNil(o.UpdateTime.Get()) {
		var ret time.Time
		return ret
	}
	return *o.UpdateTime.Get()
}

// GetUpdateTimeOk returns a tuple with the UpdateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PrivateLinkEndpoint) GetUpdateTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdateTime.Get(), o.UpdateTime.IsSet()
}

// HasUpdateTime returns a boolean if a field has been set.
func (o *PrivateLinkEndpoint) HasUpdateTime() bool {
	if o != nil && o.UpdateTime.IsSet() {
		return true
	}

	return false
}

// SetUpdateTime gets a reference to the given NullableTime and assigns it to the UpdateTime field.
func (o *PrivateLinkEndpoint) SetUpdateTime(v time.Time) {
	o.UpdateTime.Set(&v)
}

// SetUpdateTimeNil sets the value for UpdateTime to be an explicit nil
func (o *PrivateLinkEndpoint) SetUpdateTimeNil() {
	o.UpdateTime.Set(nil)
}

// UnsetUpdateTime ensures that no value is present for UpdateTime, not even an explicit nil
func (o *PrivateLinkEndpoint) UnsetUpdateTime() {
	o.UpdateTime.Unset()
}

func (o PrivateLinkEndpoint) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrivateLinkEndpoint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EndpointId) {
		toSerialize["endpointId"] = o.EndpointId
	}
	toSerialize["clusterId"] = o.ClusterId
	toSerialize["privateLinkServiceName"] = o.PrivateLinkServiceName
	toSerialize["changefeedType"] = o.ChangefeedType
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Kafka) {
		toSerialize["kafka"] = o.Kafka
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.EndpointUrl) {
		toSerialize["endpointUrl"] = o.EndpointUrl
	}
	if !IsNil(o.CreateTime) {
		toSerialize["createTime"] = o.CreateTime
	}
	if o.UpdateTime.IsSet() {
		toSerialize["updateTime"] = o.UpdateTime.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PrivateLinkEndpoint) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"clusterId",
		"privateLinkServiceName",
		"changefeedType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPrivateLinkEndpoint := _PrivateLinkEndpoint{}

	err = json.Unmarshal(data, &varPrivateLinkEndpoint)

	if err != nil {
		return err
	}

	*o = PrivateLinkEndpoint(varPrivateLinkEndpoint)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "endpointId")
		delete(additionalProperties, "clusterId")
		delete(additionalProperties, "privateLinkServiceName")
		delete(additionalProperties, "changefeedType")
		delete(additionalProperties, "state")
		delete(additionalProperties, "kafka")
		delete(additionalProperties, "message")
		delete(additionalProperties, "endpointUrl")
		delete(additionalProperties, "createTime")
		delete(additionalProperties, "updateTime")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePrivateLinkEndpoint struct {
	value *PrivateLinkEndpoint
	isSet bool
}

func (v NullablePrivateLinkEndpoint) Get() *PrivateLinkEndpoint {
	return v.value
}

func (v *NullablePrivateLinkEndpoint) Set(val *PrivateLinkEndpoint) {
	v.value = val
	v.isSet = true
}

func (v NullablePrivateLinkEndpoint) IsSet() bool {
	return v.isSet
}

func (v *NullablePrivateLinkEndpoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrivateLinkEndpoint(val *PrivateLinkEndpoint) *NullablePrivateLinkEndpoint {
	return &NullablePrivateLinkEndpoint{value: val, isSet: true}
}

func (v NullablePrivateLinkEndpoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrivateLinkEndpoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
