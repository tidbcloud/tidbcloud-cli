/*
TiDB Cloud Serverless CDC Open API

TiDB Cloud Serverless CDC Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdc

import (
	"encoding/json"
)

// PrivateLinkEndpointStateEnum  - PENDING_ACCEPTANCE: The private link endpoint is pending acceptance.  - PENDING: The private link endpoint is pending.  - AVAILABLE: The private link endpoint is available.  - REJECTED: The private link endpoint is rejected.  - EXPIRED: The private link endpoint is Expired.  - FAILED: The private link endpoint is failed.  - PARTIAL: The private link endpoint is partial.  - DELETING: The private link endpoint is deleting.
type PrivateLinkEndpointStateEnum string

// List of PrivateLinkEndpointState.Enum
const (
	PRIVATELINKENDPOINTSTATEENUM_PENDING_ACCEPTANCE PrivateLinkEndpointStateEnum = "PENDING_ACCEPTANCE"
	PRIVATELINKENDPOINTSTATEENUM_PENDING            PrivateLinkEndpointStateEnum = "PENDING"
	PRIVATELINKENDPOINTSTATEENUM_AVAILABLE          PrivateLinkEndpointStateEnum = "AVAILABLE"
	PRIVATELINKENDPOINTSTATEENUM_REJECTED           PrivateLinkEndpointStateEnum = "REJECTED"
	PRIVATELINKENDPOINTSTATEENUM_EXPIRED            PrivateLinkEndpointStateEnum = "EXPIRED"
	PRIVATELINKENDPOINTSTATEENUM_FAILED             PrivateLinkEndpointStateEnum = "FAILED"
	PRIVATELINKENDPOINTSTATEENUM_PARTIAL            PrivateLinkEndpointStateEnum = "PARTIAL"
	PRIVATELINKENDPOINTSTATEENUM_DELETING           PrivateLinkEndpointStateEnum = "DELETING"
)

// All allowed values of PrivateLinkEndpointStateEnum enum
var AllowedPrivateLinkEndpointStateEnumEnumValues = []PrivateLinkEndpointStateEnum{
	"PENDING_ACCEPTANCE",
	"PENDING",
	"AVAILABLE",
	"REJECTED",
	"EXPIRED",
	"FAILED",
	"PARTIAL",
	"DELETING",
}

func (v *PrivateLinkEndpointStateEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PrivateLinkEndpointStateEnum(value)
	for _, existing := range AllowedPrivateLinkEndpointStateEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = PrivateLinkEndpointStateEnum(value)
	return nil
}

// NewPrivateLinkEndpointStateEnumFromValue returns a pointer to a valid PrivateLinkEndpointStateEnum for the value passed as argument
func NewPrivateLinkEndpointStateEnumFromValue(v string) *PrivateLinkEndpointStateEnum {
	ev := PrivateLinkEndpointStateEnum(v)
	return &ev
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PrivateLinkEndpointStateEnum) IsValid() bool {
	for _, existing := range AllowedPrivateLinkEndpointStateEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PrivateLinkEndpointState.Enum value
func (v PrivateLinkEndpointStateEnum) Ptr() *PrivateLinkEndpointStateEnum {
	return &v
}

type NullablePrivateLinkEndpointStateEnum struct {
	value *PrivateLinkEndpointStateEnum
	isSet bool
}

func (v NullablePrivateLinkEndpointStateEnum) Get() *PrivateLinkEndpointStateEnum {
	return v.value
}

func (v *NullablePrivateLinkEndpointStateEnum) Set(val *PrivateLinkEndpointStateEnum) {
	v.value = val
	v.isSet = true
}

func (v NullablePrivateLinkEndpointStateEnum) IsSet() bool {
	return v.isSet
}

func (v *NullablePrivateLinkEndpointStateEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrivateLinkEndpointStateEnum(val *PrivateLinkEndpointStateEnum) *NullablePrivateLinkEndpointStateEnum {
	return &NullablePrivateLinkEndpointStateEnum{value: val, isSet: true}
}

func (v NullablePrivateLinkEndpointStateEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrivateLinkEndpointStateEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
