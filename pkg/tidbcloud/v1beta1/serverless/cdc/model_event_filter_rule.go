/*
TiDB Cloud Serverless CDC Open API

TiDB Cloud Serverless CDC Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdc

import (
	"encoding/json"
)

// checks if the EventFilterRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventFilterRule{}

// EventFilterRule struct for EventFilterRule
type EventFilterRule struct {
	Matcher              []string `json:"matcher,omitempty"`
	IgnoreEvent          []string `json:"ignoreEvent,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EventFilterRule EventFilterRule

// NewEventFilterRule instantiates a new EventFilterRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventFilterRule() *EventFilterRule {
	this := EventFilterRule{}
	return &this
}

// NewEventFilterRuleWithDefaults instantiates a new EventFilterRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventFilterRuleWithDefaults() *EventFilterRule {
	this := EventFilterRule{}
	return &this
}

// GetMatcher returns the Matcher field value if set, zero value otherwise.
func (o *EventFilterRule) GetMatcher() []string {
	if o == nil || IsNil(o.Matcher) {
		var ret []string
		return ret
	}
	return o.Matcher
}

// GetMatcherOk returns a tuple with the Matcher field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventFilterRule) GetMatcherOk() ([]string, bool) {
	if o == nil || IsNil(o.Matcher) {
		return nil, false
	}
	return o.Matcher, true
}

// HasMatcher returns a boolean if a field has been set.
func (o *EventFilterRule) HasMatcher() bool {
	if o != nil && !IsNil(o.Matcher) {
		return true
	}

	return false
}

// SetMatcher gets a reference to the given []string and assigns it to the Matcher field.
func (o *EventFilterRule) SetMatcher(v []string) {
	o.Matcher = v
}

// GetIgnoreEvent returns the IgnoreEvent field value if set, zero value otherwise.
func (o *EventFilterRule) GetIgnoreEvent() []string {
	if o == nil || IsNil(o.IgnoreEvent) {
		var ret []string
		return ret
	}
	return o.IgnoreEvent
}

// GetIgnoreEventOk returns a tuple with the IgnoreEvent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventFilterRule) GetIgnoreEventOk() ([]string, bool) {
	if o == nil || IsNil(o.IgnoreEvent) {
		return nil, false
	}
	return o.IgnoreEvent, true
}

// HasIgnoreEvent returns a boolean if a field has been set.
func (o *EventFilterRule) HasIgnoreEvent() bool {
	if o != nil && !IsNil(o.IgnoreEvent) {
		return true
	}

	return false
}

// SetIgnoreEvent gets a reference to the given []string and assigns it to the IgnoreEvent field.
func (o *EventFilterRule) SetIgnoreEvent(v []string) {
	o.IgnoreEvent = v
}

func (o EventFilterRule) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventFilterRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Matcher) {
		toSerialize["matcher"] = o.Matcher
	}
	if !IsNil(o.IgnoreEvent) {
		toSerialize["ignoreEvent"] = o.IgnoreEvent
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EventFilterRule) UnmarshalJSON(data []byte) (err error) {
	varEventFilterRule := _EventFilterRule{}

	err = json.Unmarshal(data, &varEventFilterRule)

	if err != nil {
		return err
	}

	*o = EventFilterRule(varEventFilterRule)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "matcher")
		delete(additionalProperties, "ignoreEvent")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEventFilterRule struct {
	value *EventFilterRule
	isSet bool
}

func (v NullableEventFilterRule) Get() *EventFilterRule {
	return v.value
}

func (v *NullableEventFilterRule) Set(val *EventFilterRule) {
	v.value = val
	v.isSet = true
}

func (v NullableEventFilterRule) IsSet() bool {
	return v.isSet
}

func (v *NullableEventFilterRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventFilterRule(val *EventFilterRule) *NullableEventFilterRule {
	return &NullableEventFilterRule{value: val, isSet: true}
}

func (v NullableEventFilterRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventFilterRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
