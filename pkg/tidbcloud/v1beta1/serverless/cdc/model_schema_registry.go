/*
TiDB Cloud Serverless CDC Open API

TiDB Cloud Serverless CDC Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdc

import (
	"encoding/json"
)

// checks if the SchemaRegistry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchemaRegistry{}

// SchemaRegistry struct for SchemaRegistry
type SchemaRegistry struct {
	SchemaRegistryEndpoints *string `json:"schemaRegistryEndpoints,omitempty"`
	EnableHttpAuth          *bool   `json:"enableHttpAuth,omitempty"`
	UserName                *string `json:"userName,omitempty"`
	Password                *string `json:"password,omitempty"`
	AdditionalProperties    map[string]interface{}
}

type _SchemaRegistry SchemaRegistry

// NewSchemaRegistry instantiates a new SchemaRegistry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaRegistry() *SchemaRegistry {
	this := SchemaRegistry{}
	return &this
}

// NewSchemaRegistryWithDefaults instantiates a new SchemaRegistry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaRegistryWithDefaults() *SchemaRegistry {
	this := SchemaRegistry{}
	return &this
}

// GetSchemaRegistryEndpoints returns the SchemaRegistryEndpoints field value if set, zero value otherwise.
func (o *SchemaRegistry) GetSchemaRegistryEndpoints() string {
	if o == nil || IsNil(o.SchemaRegistryEndpoints) {
		var ret string
		return ret
	}
	return *o.SchemaRegistryEndpoints
}

// GetSchemaRegistryEndpointsOk returns a tuple with the SchemaRegistryEndpoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaRegistry) GetSchemaRegistryEndpointsOk() (*string, bool) {
	if o == nil || IsNil(o.SchemaRegistryEndpoints) {
		return nil, false
	}
	return o.SchemaRegistryEndpoints, true
}

// HasSchemaRegistryEndpoints returns a boolean if a field has been set.
func (o *SchemaRegistry) HasSchemaRegistryEndpoints() bool {
	if o != nil && !IsNil(o.SchemaRegistryEndpoints) {
		return true
	}

	return false
}

// SetSchemaRegistryEndpoints gets a reference to the given string and assigns it to the SchemaRegistryEndpoints field.
func (o *SchemaRegistry) SetSchemaRegistryEndpoints(v string) {
	o.SchemaRegistryEndpoints = &v
}

// GetEnableHttpAuth returns the EnableHttpAuth field value if set, zero value otherwise.
func (o *SchemaRegistry) GetEnableHttpAuth() bool {
	if o == nil || IsNil(o.EnableHttpAuth) {
		var ret bool
		return ret
	}
	return *o.EnableHttpAuth
}

// GetEnableHttpAuthOk returns a tuple with the EnableHttpAuth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaRegistry) GetEnableHttpAuthOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableHttpAuth) {
		return nil, false
	}
	return o.EnableHttpAuth, true
}

// HasEnableHttpAuth returns a boolean if a field has been set.
func (o *SchemaRegistry) HasEnableHttpAuth() bool {
	if o != nil && !IsNil(o.EnableHttpAuth) {
		return true
	}

	return false
}

// SetEnableHttpAuth gets a reference to the given bool and assigns it to the EnableHttpAuth field.
func (o *SchemaRegistry) SetEnableHttpAuth(v bool) {
	o.EnableHttpAuth = &v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *SchemaRegistry) GetUserName() string {
	if o == nil || IsNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaRegistry) GetUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *SchemaRegistry) HasUserName() bool {
	if o != nil && !IsNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *SchemaRegistry) SetUserName(v string) {
	o.UserName = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *SchemaRegistry) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaRegistry) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *SchemaRegistry) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *SchemaRegistry) SetPassword(v string) {
	o.Password = &v
}

func (o SchemaRegistry) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchemaRegistry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SchemaRegistryEndpoints) {
		toSerialize["schemaRegistryEndpoints"] = o.SchemaRegistryEndpoints
	}
	if !IsNil(o.EnableHttpAuth) {
		toSerialize["enableHttpAuth"] = o.EnableHttpAuth
	}
	if !IsNil(o.UserName) {
		toSerialize["userName"] = o.UserName
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SchemaRegistry) UnmarshalJSON(data []byte) (err error) {
	varSchemaRegistry := _SchemaRegistry{}

	err = json.Unmarshal(data, &varSchemaRegistry)

	if err != nil {
		return err
	}

	*o = SchemaRegistry(varSchemaRegistry)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "schemaRegistryEndpoints")
		delete(additionalProperties, "enableHttpAuth")
		delete(additionalProperties, "userName")
		delete(additionalProperties, "password")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSchemaRegistry struct {
	value *SchemaRegistry
	isSet bool
}

func (v NullableSchemaRegistry) Get() *SchemaRegistry {
	return v.value
}

func (v *NullableSchemaRegistry) Set(val *SchemaRegistry) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaRegistry) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaRegistry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaRegistry(val *SchemaRegistry) *NullableSchemaRegistry {
	return &NullableSchemaRegistry{value: val, isSet: true}
}

func (v NullableSchemaRegistry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaRegistry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
