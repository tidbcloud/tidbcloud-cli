/*
TiDB Cloud Serverless CDC Open API

TiDB Cloud Serverless CDC Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdc

import (
	"encoding/json"
)

// checks if the KafkaDataFormat type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KafkaDataFormat{}

// KafkaDataFormat struct for KafkaDataFormat
type KafkaDataFormat struct {
	Protocol             *KafkaProtocolEnum `json:"protocol,omitempty"`
	EnableTidbExtension  *bool              `json:"enableTidbExtension,omitempty"`
	AvroConfig           *AvroConfig        `json:"avroConfig,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _KafkaDataFormat KafkaDataFormat

// NewKafkaDataFormat instantiates a new KafkaDataFormat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKafkaDataFormat() *KafkaDataFormat {
	this := KafkaDataFormat{}
	return &this
}

// NewKafkaDataFormatWithDefaults instantiates a new KafkaDataFormat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKafkaDataFormatWithDefaults() *KafkaDataFormat {
	this := KafkaDataFormat{}
	return &this
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *KafkaDataFormat) GetProtocol() KafkaProtocolEnum {
	if o == nil || IsNil(o.Protocol) {
		var ret KafkaProtocolEnum
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaDataFormat) GetProtocolOk() (*KafkaProtocolEnum, bool) {
	if o == nil || IsNil(o.Protocol) {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *KafkaDataFormat) HasProtocol() bool {
	if o != nil && !IsNil(o.Protocol) {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given KafkaProtocolEnum and assigns it to the Protocol field.
func (o *KafkaDataFormat) SetProtocol(v KafkaProtocolEnum) {
	o.Protocol = &v
}

// GetEnableTidbExtension returns the EnableTidbExtension field value if set, zero value otherwise.
func (o *KafkaDataFormat) GetEnableTidbExtension() bool {
	if o == nil || IsNil(o.EnableTidbExtension) {
		var ret bool
		return ret
	}
	return *o.EnableTidbExtension
}

// GetEnableTidbExtensionOk returns a tuple with the EnableTidbExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaDataFormat) GetEnableTidbExtensionOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableTidbExtension) {
		return nil, false
	}
	return o.EnableTidbExtension, true
}

// HasEnableTidbExtension returns a boolean if a field has been set.
func (o *KafkaDataFormat) HasEnableTidbExtension() bool {
	if o != nil && !IsNil(o.EnableTidbExtension) {
		return true
	}

	return false
}

// SetEnableTidbExtension gets a reference to the given bool and assigns it to the EnableTidbExtension field.
func (o *KafkaDataFormat) SetEnableTidbExtension(v bool) {
	o.EnableTidbExtension = &v
}

// GetAvroConfig returns the AvroConfig field value if set, zero value otherwise.
func (o *KafkaDataFormat) GetAvroConfig() AvroConfig {
	if o == nil || IsNil(o.AvroConfig) {
		var ret AvroConfig
		return ret
	}
	return *o.AvroConfig
}

// GetAvroConfigOk returns a tuple with the AvroConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaDataFormat) GetAvroConfigOk() (*AvroConfig, bool) {
	if o == nil || IsNil(o.AvroConfig) {
		return nil, false
	}
	return o.AvroConfig, true
}

// HasAvroConfig returns a boolean if a field has been set.
func (o *KafkaDataFormat) HasAvroConfig() bool {
	if o != nil && !IsNil(o.AvroConfig) {
		return true
	}

	return false
}

// SetAvroConfig gets a reference to the given AvroConfig and assigns it to the AvroConfig field.
func (o *KafkaDataFormat) SetAvroConfig(v AvroConfig) {
	o.AvroConfig = &v
}

func (o KafkaDataFormat) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KafkaDataFormat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Protocol) {
		toSerialize["protocol"] = o.Protocol
	}
	if !IsNil(o.EnableTidbExtension) {
		toSerialize["enableTidbExtension"] = o.EnableTidbExtension
	}
	if !IsNil(o.AvroConfig) {
		toSerialize["avroConfig"] = o.AvroConfig
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *KafkaDataFormat) UnmarshalJSON(data []byte) (err error) {
	varKafkaDataFormat := _KafkaDataFormat{}

	err = json.Unmarshal(data, &varKafkaDataFormat)

	if err != nil {
		return err
	}

	*o = KafkaDataFormat(varKafkaDataFormat)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "protocol")
		delete(additionalProperties, "enableTidbExtension")
		delete(additionalProperties, "avroConfig")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableKafkaDataFormat struct {
	value *KafkaDataFormat
	isSet bool
}

func (v NullableKafkaDataFormat) Get() *KafkaDataFormat {
	return v.value
}

func (v *NullableKafkaDataFormat) Set(val *KafkaDataFormat) {
	v.value = val
	v.isSet = true
}

func (v NullableKafkaDataFormat) IsSet() bool {
	return v.isSet
}

func (v *NullableKafkaDataFormat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKafkaDataFormat(val *KafkaDataFormat) *NullableKafkaDataFormat {
	return &NullableKafkaDataFormat{value: val, isSet: true}
}

func (v NullableKafkaDataFormat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKafkaDataFormat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
