/*
TiDB Cloud Serverless CDC Open API

TiDB Cloud Serverless CDC Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdc

import (
	"encoding/json"
)

// TopicDispatchTypeEnum  - ONE_TOPIC: One topic for all data.  - BY_TABLE: Dispatch by table.  - BY_DATABASE: Dispatch by database.
type TopicDispatchTypeEnum string

// List of TopicDispatchType.Enum
const (
	TOPICDISPATCHTYPEENUM_ONE_TOPIC   TopicDispatchTypeEnum = "ONE_TOPIC"
	TOPICDISPATCHTYPEENUM_BY_TABLE    TopicDispatchTypeEnum = "BY_TABLE"
	TOPICDISPATCHTYPEENUM_BY_DATABASE TopicDispatchTypeEnum = "BY_DATABASE"
)

// All allowed values of TopicDispatchTypeEnum enum
var AllowedTopicDispatchTypeEnumEnumValues = []TopicDispatchTypeEnum{
	"ONE_TOPIC",
	"BY_TABLE",
	"BY_DATABASE",
}

func (v *TopicDispatchTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TopicDispatchTypeEnum(value)
	for _, existing := range AllowedTopicDispatchTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = TopicDispatchTypeEnum(value)
	return nil
}

// NewTopicDispatchTypeEnumFromValue returns a pointer to a valid TopicDispatchTypeEnum for the value passed as argument
func NewTopicDispatchTypeEnumFromValue(v string) *TopicDispatchTypeEnum {
	ev := TopicDispatchTypeEnum(v)
	return &ev
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TopicDispatchTypeEnum) IsValid() bool {
	for _, existing := range AllowedTopicDispatchTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TopicDispatchType.Enum value
func (v TopicDispatchTypeEnum) Ptr() *TopicDispatchTypeEnum {
	return &v
}

type NullableTopicDispatchTypeEnum struct {
	value *TopicDispatchTypeEnum
	isSet bool
}

func (v NullableTopicDispatchTypeEnum) Get() *TopicDispatchTypeEnum {
	return v.value
}

func (v *NullableTopicDispatchTypeEnum) Set(val *TopicDispatchTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableTopicDispatchTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableTopicDispatchTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTopicDispatchTypeEnum(val *TopicDispatchTypeEnum) *NullableTopicDispatchTypeEnum {
	return &NullableTopicDispatchTypeEnum{value: val, isSet: true}
}

func (v NullableTopicDispatchTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTopicDispatchTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
