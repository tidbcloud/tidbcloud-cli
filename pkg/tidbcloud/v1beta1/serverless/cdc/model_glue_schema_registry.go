/*
TiDB Cloud Serverless CDC Open API

TiDB Cloud Serverless CDC Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdc

import (
	"encoding/json"
	"fmt"
)

// checks if the GlueSchemaRegistry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GlueSchemaRegistry{}

// GlueSchemaRegistry struct for GlueSchemaRegistry
type GlueSchemaRegistry struct {
	// Required. The region of schema registry.
	Region string `json:"region"`
	// Required. The name of schema registry.
	Name string `json:"name"`
	// Required. The AWS access key ID.
	AccessKeyId string `json:"accessKeyId"`
	// Required. The AWS secret access key.
	SecretAccessKey      string `json:"secretAccessKey"`
	AdditionalProperties map[string]interface{}
}

type _GlueSchemaRegistry GlueSchemaRegistry

// NewGlueSchemaRegistry instantiates a new GlueSchemaRegistry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGlueSchemaRegistry(region string, name string, accessKeyId string, secretAccessKey string) *GlueSchemaRegistry {
	this := GlueSchemaRegistry{}
	this.Region = region
	this.Name = name
	this.AccessKeyId = accessKeyId
	this.SecretAccessKey = secretAccessKey
	return &this
}

// NewGlueSchemaRegistryWithDefaults instantiates a new GlueSchemaRegistry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGlueSchemaRegistryWithDefaults() *GlueSchemaRegistry {
	this := GlueSchemaRegistry{}
	return &this
}

// GetRegion returns the Region field value
func (o *GlueSchemaRegistry) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *GlueSchemaRegistry) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *GlueSchemaRegistry) SetRegion(v string) {
	o.Region = v
}

// GetName returns the Name field value
func (o *GlueSchemaRegistry) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *GlueSchemaRegistry) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *GlueSchemaRegistry) SetName(v string) {
	o.Name = v
}

// GetAccessKeyId returns the AccessKeyId field value
func (o *GlueSchemaRegistry) GetAccessKeyId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccessKeyId
}

// GetAccessKeyIdOk returns a tuple with the AccessKeyId field value
// and a boolean to check if the value has been set.
func (o *GlueSchemaRegistry) GetAccessKeyIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessKeyId, true
}

// SetAccessKeyId sets field value
func (o *GlueSchemaRegistry) SetAccessKeyId(v string) {
	o.AccessKeyId = v
}

// GetSecretAccessKey returns the SecretAccessKey field value
func (o *GlueSchemaRegistry) GetSecretAccessKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SecretAccessKey
}

// GetSecretAccessKeyOk returns a tuple with the SecretAccessKey field value
// and a boolean to check if the value has been set.
func (o *GlueSchemaRegistry) GetSecretAccessKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SecretAccessKey, true
}

// SetSecretAccessKey sets field value
func (o *GlueSchemaRegistry) SetSecretAccessKey(v string) {
	o.SecretAccessKey = v
}

func (o GlueSchemaRegistry) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GlueSchemaRegistry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["region"] = o.Region
	toSerialize["name"] = o.Name
	toSerialize["accessKeyId"] = o.AccessKeyId
	toSerialize["secretAccessKey"] = o.SecretAccessKey

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GlueSchemaRegistry) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"region",
		"name",
		"accessKeyId",
		"secretAccessKey",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGlueSchemaRegistry := _GlueSchemaRegistry{}

	err = json.Unmarshal(data, &varGlueSchemaRegistry)

	if err != nil {
		return err
	}

	*o = GlueSchemaRegistry(varGlueSchemaRegistry)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "region")
		delete(additionalProperties, "name")
		delete(additionalProperties, "accessKeyId")
		delete(additionalProperties, "secretAccessKey")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGlueSchemaRegistry struct {
	value *GlueSchemaRegistry
	isSet bool
}

func (v NullableGlueSchemaRegistry) Get() *GlueSchemaRegistry {
	return v.value
}

func (v *NullableGlueSchemaRegistry) Set(val *GlueSchemaRegistry) {
	v.value = val
	v.isSet = true
}

func (v NullableGlueSchemaRegistry) IsSet() bool {
	return v.isSet
}

func (v *NullableGlueSchemaRegistry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGlueSchemaRegistry(val *GlueSchemaRegistry) *NullableGlueSchemaRegistry {
	return &NullableGlueSchemaRegistry{value: val, isSet: true}
}

func (v NullableGlueSchemaRegistry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGlueSchemaRegistry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
