/*
TiDB Cloud Serverless CDC Open API

TiDB Cloud Serverless CDC Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdc

import (
	"encoding/json"
	"fmt"
)

// checks if the ChangefeedServiceTestChangefeedBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChangefeedServiceTestChangefeedBody{}

// ChangefeedServiceTestChangefeedBody struct for ChangefeedServiceTestChangefeedBody
type ChangefeedServiceTestChangefeedBody struct {
	// Required. The sink of the changefeed.
	Sink                 SinkInfo `json:"sink"`
	AdditionalProperties map[string]interface{}
}

type _ChangefeedServiceTestChangefeedBody ChangefeedServiceTestChangefeedBody

// NewChangefeedServiceTestChangefeedBody instantiates a new ChangefeedServiceTestChangefeedBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangefeedServiceTestChangefeedBody(sink SinkInfo) *ChangefeedServiceTestChangefeedBody {
	this := ChangefeedServiceTestChangefeedBody{}
	this.Sink = sink
	return &this
}

// NewChangefeedServiceTestChangefeedBodyWithDefaults instantiates a new ChangefeedServiceTestChangefeedBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangefeedServiceTestChangefeedBodyWithDefaults() *ChangefeedServiceTestChangefeedBody {
	this := ChangefeedServiceTestChangefeedBody{}
	return &this
}

// GetSink returns the Sink field value
func (o *ChangefeedServiceTestChangefeedBody) GetSink() SinkInfo {
	if o == nil {
		var ret SinkInfo
		return ret
	}

	return o.Sink
}

// GetSinkOk returns a tuple with the Sink field value
// and a boolean to check if the value has been set.
func (o *ChangefeedServiceTestChangefeedBody) GetSinkOk() (*SinkInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sink, true
}

// SetSink sets field value
func (o *ChangefeedServiceTestChangefeedBody) SetSink(v SinkInfo) {
	o.Sink = v
}

func (o ChangefeedServiceTestChangefeedBody) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChangefeedServiceTestChangefeedBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sink"] = o.Sink

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ChangefeedServiceTestChangefeedBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sink",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChangefeedServiceTestChangefeedBody := _ChangefeedServiceTestChangefeedBody{}

	err = json.Unmarshal(data, &varChangefeedServiceTestChangefeedBody)

	if err != nil {
		return err
	}

	*o = ChangefeedServiceTestChangefeedBody(varChangefeedServiceTestChangefeedBody)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "sink")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableChangefeedServiceTestChangefeedBody struct {
	value *ChangefeedServiceTestChangefeedBody
	isSet bool
}

func (v NullableChangefeedServiceTestChangefeedBody) Get() *ChangefeedServiceTestChangefeedBody {
	return v.value
}

func (v *NullableChangefeedServiceTestChangefeedBody) Set(val *ChangefeedServiceTestChangefeedBody) {
	v.value = val
	v.isSet = true
}

func (v NullableChangefeedServiceTestChangefeedBody) IsSet() bool {
	return v.isSet
}

func (v *NullableChangefeedServiceTestChangefeedBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangefeedServiceTestChangefeedBody(val *ChangefeedServiceTestChangefeedBody) *NullableChangefeedServiceTestChangefeedBody {
	return &NullableChangefeedServiceTestChangefeedBody{value: val, isSet: true}
}

func (v NullableChangefeedServiceTestChangefeedBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangefeedServiceTestChangefeedBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
