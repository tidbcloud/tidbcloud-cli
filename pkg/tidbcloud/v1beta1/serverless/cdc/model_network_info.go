/*
TiDB Cloud Serverless CDC Open API

TiDB Cloud Serverless CDC Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdc

import (
	"encoding/json"
)

// checks if the NetworkInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkInfo{}

// NetworkInfo struct for NetworkInfo
type NetworkInfo struct {
	NetworkType            *KafkaNetworkTypeEnum `json:"networkType,omitempty"`
	PrivateLinkServiceName *string               `json:"privateLinkServiceName,omitempty"`
	KafkaId                *string               `json:"kafkaId,omitempty"`
	Ports                  []int64               `json:"ports,omitempty"`
	AdvertisedPatternGroup *map[string]string    `json:"advertisedPatternGroup,omitempty"`
	AdditionalProperties   map[string]interface{}
}

type _NetworkInfo NetworkInfo

// NewNetworkInfo instantiates a new NetworkInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkInfo() *NetworkInfo {
	this := NetworkInfo{}
	return &this
}

// NewNetworkInfoWithDefaults instantiates a new NetworkInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkInfoWithDefaults() *NetworkInfo {
	this := NetworkInfo{}
	return &this
}

// GetNetworkType returns the NetworkType field value if set, zero value otherwise.
func (o *NetworkInfo) GetNetworkType() KafkaNetworkTypeEnum {
	if o == nil || IsNil(o.NetworkType) {
		var ret KafkaNetworkTypeEnum
		return ret
	}
	return *o.NetworkType
}

// GetNetworkTypeOk returns a tuple with the NetworkType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInfo) GetNetworkTypeOk() (*KafkaNetworkTypeEnum, bool) {
	if o == nil || IsNil(o.NetworkType) {
		return nil, false
	}
	return o.NetworkType, true
}

// HasNetworkType returns a boolean if a field has been set.
func (o *NetworkInfo) HasNetworkType() bool {
	if o != nil && !IsNil(o.NetworkType) {
		return true
	}

	return false
}

// SetNetworkType gets a reference to the given KafkaNetworkTypeEnum and assigns it to the NetworkType field.
func (o *NetworkInfo) SetNetworkType(v KafkaNetworkTypeEnum) {
	o.NetworkType = &v
}

// GetPrivateLinkServiceName returns the PrivateLinkServiceName field value if set, zero value otherwise.
func (o *NetworkInfo) GetPrivateLinkServiceName() string {
	if o == nil || IsNil(o.PrivateLinkServiceName) {
		var ret string
		return ret
	}
	return *o.PrivateLinkServiceName
}

// GetPrivateLinkServiceNameOk returns a tuple with the PrivateLinkServiceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInfo) GetPrivateLinkServiceNameOk() (*string, bool) {
	if o == nil || IsNil(o.PrivateLinkServiceName) {
		return nil, false
	}
	return o.PrivateLinkServiceName, true
}

// HasPrivateLinkServiceName returns a boolean if a field has been set.
func (o *NetworkInfo) HasPrivateLinkServiceName() bool {
	if o != nil && !IsNil(o.PrivateLinkServiceName) {
		return true
	}

	return false
}

// SetPrivateLinkServiceName gets a reference to the given string and assigns it to the PrivateLinkServiceName field.
func (o *NetworkInfo) SetPrivateLinkServiceName(v string) {
	o.PrivateLinkServiceName = &v
}

// GetKafkaId returns the KafkaId field value if set, zero value otherwise.
func (o *NetworkInfo) GetKafkaId() string {
	if o == nil || IsNil(o.KafkaId) {
		var ret string
		return ret
	}
	return *o.KafkaId
}

// GetKafkaIdOk returns a tuple with the KafkaId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInfo) GetKafkaIdOk() (*string, bool) {
	if o == nil || IsNil(o.KafkaId) {
		return nil, false
	}
	return o.KafkaId, true
}

// HasKafkaId returns a boolean if a field has been set.
func (o *NetworkInfo) HasKafkaId() bool {
	if o != nil && !IsNil(o.KafkaId) {
		return true
	}

	return false
}

// SetKafkaId gets a reference to the given string and assigns it to the KafkaId field.
func (o *NetworkInfo) SetKafkaId(v string) {
	o.KafkaId = &v
}

// GetPorts returns the Ports field value if set, zero value otherwise.
func (o *NetworkInfo) GetPorts() []int64 {
	if o == nil || IsNil(o.Ports) {
		var ret []int64
		return ret
	}
	return o.Ports
}

// GetPortsOk returns a tuple with the Ports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInfo) GetPortsOk() ([]int64, bool) {
	if o == nil || IsNil(o.Ports) {
		return nil, false
	}
	return o.Ports, true
}

// HasPorts returns a boolean if a field has been set.
func (o *NetworkInfo) HasPorts() bool {
	if o != nil && !IsNil(o.Ports) {
		return true
	}

	return false
}

// SetPorts gets a reference to the given []int64 and assigns it to the Ports field.
func (o *NetworkInfo) SetPorts(v []int64) {
	o.Ports = v
}

// GetAdvertisedPatternGroup returns the AdvertisedPatternGroup field value if set, zero value otherwise.
func (o *NetworkInfo) GetAdvertisedPatternGroup() map[string]string {
	if o == nil || IsNil(o.AdvertisedPatternGroup) {
		var ret map[string]string
		return ret
	}
	return *o.AdvertisedPatternGroup
}

// GetAdvertisedPatternGroupOk returns a tuple with the AdvertisedPatternGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInfo) GetAdvertisedPatternGroupOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.AdvertisedPatternGroup) {
		return nil, false
	}
	return o.AdvertisedPatternGroup, true
}

// HasAdvertisedPatternGroup returns a boolean if a field has been set.
func (o *NetworkInfo) HasAdvertisedPatternGroup() bool {
	if o != nil && !IsNil(o.AdvertisedPatternGroup) {
		return true
	}

	return false
}

// SetAdvertisedPatternGroup gets a reference to the given map[string]string and assigns it to the AdvertisedPatternGroup field.
func (o *NetworkInfo) SetAdvertisedPatternGroup(v map[string]string) {
	o.AdvertisedPatternGroup = &v
}

func (o NetworkInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NetworkType) {
		toSerialize["networkType"] = o.NetworkType
	}
	if !IsNil(o.PrivateLinkServiceName) {
		toSerialize["privateLinkServiceName"] = o.PrivateLinkServiceName
	}
	if !IsNil(o.KafkaId) {
		toSerialize["kafkaId"] = o.KafkaId
	}
	if !IsNil(o.Ports) {
		toSerialize["ports"] = o.Ports
	}
	if !IsNil(o.AdvertisedPatternGroup) {
		toSerialize["advertisedPatternGroup"] = o.AdvertisedPatternGroup
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NetworkInfo) UnmarshalJSON(data []byte) (err error) {
	varNetworkInfo := _NetworkInfo{}

	err = json.Unmarshal(data, &varNetworkInfo)

	if err != nil {
		return err
	}

	*o = NetworkInfo(varNetworkInfo)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "networkType")
		delete(additionalProperties, "privateLinkServiceName")
		delete(additionalProperties, "kafkaId")
		delete(additionalProperties, "ports")
		delete(additionalProperties, "advertisedPatternGroup")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNetworkInfo struct {
	value *NetworkInfo
	isSet bool
}

func (v NullableNetworkInfo) Get() *NetworkInfo {
	return v.value
}

func (v *NullableNetworkInfo) Set(val *NetworkInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkInfo(val *NetworkInfo) *NullableNetworkInfo {
	return &NullableNetworkInfo{value: val, isSet: true}
}

func (v NullableNetworkInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
