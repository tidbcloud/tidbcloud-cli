/*
TiDB Cloud Serverless CDC Open API

TiDB Cloud Serverless CDC Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdc

import (
	"encoding/json"
)

// TableModeEnum  - IGNORE_NOT_SUPPORT_TABLE: Ignore tables that are not supported.  - FORCE_SYNC: Force synchronize all tables.
type TableModeEnum string

// List of TableMode.Enum
const (
	TABLEMODEENUM_IGNORE_NOT_SUPPORT_TABLE TableModeEnum = "IGNORE_NOT_SUPPORT_TABLE"
	TABLEMODEENUM_FORCE_SYNC               TableModeEnum = "FORCE_SYNC"
)

// All allowed values of TableModeEnum enum
var AllowedTableModeEnumEnumValues = []TableModeEnum{
	"IGNORE_NOT_SUPPORT_TABLE",
	"FORCE_SYNC",
}

func (v *TableModeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TableModeEnum(value)
	for _, existing := range AllowedTableModeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = TableModeEnum(value)
	return nil
}

// NewTableModeEnumFromValue returns a pointer to a valid TableModeEnum for the value passed as argument
func NewTableModeEnumFromValue(v string) *TableModeEnum {
	ev := TableModeEnum(v)
	return &ev
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TableModeEnum) IsValid() bool {
	for _, existing := range AllowedTableModeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TableMode.Enum value
func (v TableModeEnum) Ptr() *TableModeEnum {
	return &v
}

type NullableTableModeEnum struct {
	value *TableModeEnum
	isSet bool
}

func (v NullableTableModeEnum) Get() *TableModeEnum {
	return v.value
}

func (v *NullableTableModeEnum) Set(val *TableModeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableTableModeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableTableModeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTableModeEnum(val *TableModeEnum) *NullableTableModeEnum {
	return &NullableTableModeEnum{value: val, isSet: true}
}

func (v NullableTableModeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTableModeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
