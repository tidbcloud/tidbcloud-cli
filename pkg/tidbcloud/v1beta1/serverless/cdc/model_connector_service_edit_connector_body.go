/*
TiDB Cloud Serverless CDC Open API

TiDB Cloud Serverless CDC Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdc

import (
	"encoding/json"
	"fmt"
)

// checks if the ConnectorServiceEditConnectorBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectorServiceEditConnectorBody{}

// ConnectorServiceEditConnectorBody struct for ConnectorServiceEditConnectorBody
type ConnectorServiceEditConnectorBody struct {
	// Required. The ID of the connector.
	ConnectorId string `json:"connectorId"`
	// Optional. The name of the connector.
	Name *string `json:"name,omitempty"`
	// Required. The sink of the connector.
	Sink SinkInfo `json:"sink"`
	// Required. The filter of the connector.
	Filter               CDCFilter `json:"filter"`
	AdditionalProperties map[string]interface{}
}

type _ConnectorServiceEditConnectorBody ConnectorServiceEditConnectorBody

// NewConnectorServiceEditConnectorBody instantiates a new ConnectorServiceEditConnectorBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectorServiceEditConnectorBody(connectorId string, sink SinkInfo, filter CDCFilter) *ConnectorServiceEditConnectorBody {
	this := ConnectorServiceEditConnectorBody{}
	this.ConnectorId = connectorId
	this.Sink = sink
	this.Filter = filter
	return &this
}

// NewConnectorServiceEditConnectorBodyWithDefaults instantiates a new ConnectorServiceEditConnectorBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectorServiceEditConnectorBodyWithDefaults() *ConnectorServiceEditConnectorBody {
	this := ConnectorServiceEditConnectorBody{}
	return &this
}

// GetConnectorId returns the ConnectorId field value
func (o *ConnectorServiceEditConnectorBody) GetConnectorId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConnectorId
}

// GetConnectorIdOk returns a tuple with the ConnectorId field value
// and a boolean to check if the value has been set.
func (o *ConnectorServiceEditConnectorBody) GetConnectorIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectorId, true
}

// SetConnectorId sets field value
func (o *ConnectorServiceEditConnectorBody) SetConnectorId(v string) {
	o.ConnectorId = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ConnectorServiceEditConnectorBody) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorServiceEditConnectorBody) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ConnectorServiceEditConnectorBody) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ConnectorServiceEditConnectorBody) SetName(v string) {
	o.Name = &v
}

// GetSink returns the Sink field value
func (o *ConnectorServiceEditConnectorBody) GetSink() SinkInfo {
	if o == nil {
		var ret SinkInfo
		return ret
	}

	return o.Sink
}

// GetSinkOk returns a tuple with the Sink field value
// and a boolean to check if the value has been set.
func (o *ConnectorServiceEditConnectorBody) GetSinkOk() (*SinkInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sink, true
}

// SetSink sets field value
func (o *ConnectorServiceEditConnectorBody) SetSink(v SinkInfo) {
	o.Sink = v
}

// GetFilter returns the Filter field value
func (o *ConnectorServiceEditConnectorBody) GetFilter() CDCFilter {
	if o == nil {
		var ret CDCFilter
		return ret
	}

	return o.Filter
}

// GetFilterOk returns a tuple with the Filter field value
// and a boolean to check if the value has been set.
func (o *ConnectorServiceEditConnectorBody) GetFilterOk() (*CDCFilter, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Filter, true
}

// SetFilter sets field value
func (o *ConnectorServiceEditConnectorBody) SetFilter(v CDCFilter) {
	o.Filter = v
}

func (o ConnectorServiceEditConnectorBody) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectorServiceEditConnectorBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["connectorId"] = o.ConnectorId
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["sink"] = o.Sink
	toSerialize["filter"] = o.Filter

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ConnectorServiceEditConnectorBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"connectorId",
		"sink",
		"filter",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConnectorServiceEditConnectorBody := _ConnectorServiceEditConnectorBody{}

	err = json.Unmarshal(data, &varConnectorServiceEditConnectorBody)

	if err != nil {
		return err
	}

	*o = ConnectorServiceEditConnectorBody(varConnectorServiceEditConnectorBody)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "connectorId")
		delete(additionalProperties, "name")
		delete(additionalProperties, "sink")
		delete(additionalProperties, "filter")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableConnectorServiceEditConnectorBody struct {
	value *ConnectorServiceEditConnectorBody
	isSet bool
}

func (v NullableConnectorServiceEditConnectorBody) Get() *ConnectorServiceEditConnectorBody {
	return v.value
}

func (v *NullableConnectorServiceEditConnectorBody) Set(val *ConnectorServiceEditConnectorBody) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorServiceEditConnectorBody) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorServiceEditConnectorBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorServiceEditConnectorBody(val *ConnectorServiceEditConnectorBody) *NullableConnectorServiceEditConnectorBody {
	return &NullableConnectorServiceEditConnectorBody{value: val, isSet: true}
}

func (v NullableConnectorServiceEditConnectorBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorServiceEditConnectorBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
