/*
TiDB Cloud Serverless CDC Open API

TiDB Cloud Serverless CDC Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdc

import (
	"encoding/json"
)

// CDCStateEnum  - RUNNING: The changefeed is running.  - CREATE_FAILED: The changefeed has failed during creation.  - RUNNING_FAILED: The changefeed has failed during running.  - CREATING: The changefeed is being created.  - PAUSED: The changefeed is paused.  - DELETED: The changefeed is deleted.  - WARNING: The changefeed has a warning.
type CDCStateEnum string

// List of CDCState.Enum
const (
	CDCSTATEENUM_RUNNING        CDCStateEnum = "RUNNING"
	CDCSTATEENUM_CREATE_FAILED  CDCStateEnum = "CREATE_FAILED"
	CDCSTATEENUM_RUNNING_FAILED CDCStateEnum = "RUNNING_FAILED"
	CDCSTATEENUM_CREATING       CDCStateEnum = "CREATING"
	CDCSTATEENUM_PAUSED         CDCStateEnum = "PAUSED"
	CDCSTATEENUM_DELETED        CDCStateEnum = "DELETED"
	CDCSTATEENUM_WARNING        CDCStateEnum = "WARNING"
)

// All allowed values of CDCStateEnum enum
var AllowedCDCStateEnumEnumValues = []CDCStateEnum{
	"RUNNING",
	"CREATE_FAILED",
	"RUNNING_FAILED",
	"CREATING",
	"PAUSED",
	"DELETED",
	"WARNING",
}

func (v *CDCStateEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CDCStateEnum(value)
	for _, existing := range AllowedCDCStateEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = CDCStateEnum(value)
	return nil
}

// NewCDCStateEnumFromValue returns a pointer to a valid CDCStateEnum for the value passed as argument
func NewCDCStateEnumFromValue(v string) *CDCStateEnum {
	ev := CDCStateEnum(v)
	return &ev
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CDCStateEnum) IsValid() bool {
	for _, existing := range AllowedCDCStateEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CDCState.Enum value
func (v CDCStateEnum) Ptr() *CDCStateEnum {
	return &v
}

type NullableCDCStateEnum struct {
	value *CDCStateEnum
	isSet bool
}

func (v NullableCDCStateEnum) Get() *CDCStateEnum {
	return v.value
}

func (v *NullableCDCStateEnum) Set(val *CDCStateEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableCDCStateEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableCDCStateEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCDCStateEnum(val *CDCStateEnum) *NullableCDCStateEnum {
	return &NullableCDCStateEnum{value: val, isSet: true}
}

func (v NullableCDCStateEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCDCStateEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
