/*
TiDB Cloud Serverless CDC Open API

TiDB Cloud Serverless CDC Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdc

import (
	"encoding/json"
)

// MySQLNetworkTypeEnum  - PUBLIC: Public network.  - PRIVATE_LINK: Private network.
type MySQLNetworkTypeEnum string

// List of MySQLNetworkType.Enum
const (
	MYSQLNETWORKTYPEENUM_PUBLIC       MySQLNetworkTypeEnum = "PUBLIC"
	MYSQLNETWORKTYPEENUM_PRIVATE_LINK MySQLNetworkTypeEnum = "PRIVATE_LINK"
)

// All allowed values of MySQLNetworkTypeEnum enum
var AllowedMySQLNetworkTypeEnumEnumValues = []MySQLNetworkTypeEnum{
	"PUBLIC",
	"PRIVATE_LINK",
}

func (v *MySQLNetworkTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MySQLNetworkTypeEnum(value)
	for _, existing := range AllowedMySQLNetworkTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = MySQLNetworkTypeEnum(value)
	return nil
}

// NewMySQLNetworkTypeEnumFromValue returns a pointer to a valid MySQLNetworkTypeEnum for the value passed as argument
func NewMySQLNetworkTypeEnumFromValue(v string) *MySQLNetworkTypeEnum {
	ev := MySQLNetworkTypeEnum(v)
	return &ev
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MySQLNetworkTypeEnum) IsValid() bool {
	for _, existing := range AllowedMySQLNetworkTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MySQLNetworkType.Enum value
func (v MySQLNetworkTypeEnum) Ptr() *MySQLNetworkTypeEnum {
	return &v
}

type NullableMySQLNetworkTypeEnum struct {
	value *MySQLNetworkTypeEnum
	isSet bool
}

func (v NullableMySQLNetworkTypeEnum) Get() *MySQLNetworkTypeEnum {
	return v.value
}

func (v *NullableMySQLNetworkTypeEnum) Set(val *MySQLNetworkTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableMySQLNetworkTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableMySQLNetworkTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMySQLNetworkTypeEnum(val *MySQLNetworkTypeEnum) *NullableMySQLNetworkTypeEnum {
	return &NullableMySQLNetworkTypeEnum{value: val, isSet: true}
}

func (v NullableMySQLNetworkTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMySQLNetworkTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
