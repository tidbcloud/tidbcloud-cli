/*
TiDB Cloud Serverless CDC Open API

TiDB Cloud Serverless CDC Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdc

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the DescribeSchemaTableResp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DescribeSchemaTableResp{}

// DescribeSchemaTableResp struct for DescribeSchemaTableResp
type DescribeSchemaTableResp struct {
	// Required. The ID of the cluster.
	ClusterId string `json:"clusterId"`
	// Optional. The allowed schema tables to replicate.
	ReplicateAllowSchemaTable []string `json:"replicateAllowSchemaTable,omitempty"`
	// Optional. The denied schema tables to replicate.
	ReplicateDenySchemaTable []string `json:"replicateDenySchemaTable,omitempty"`
	// Optional. The GC safe point timestamp.
	GcSafePoint          *time.Time `json:"gcSafePoint,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DescribeSchemaTableResp DescribeSchemaTableResp

// NewDescribeSchemaTableResp instantiates a new DescribeSchemaTableResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescribeSchemaTableResp(clusterId string) *DescribeSchemaTableResp {
	this := DescribeSchemaTableResp{}
	this.ClusterId = clusterId
	return &this
}

// NewDescribeSchemaTableRespWithDefaults instantiates a new DescribeSchemaTableResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescribeSchemaTableRespWithDefaults() *DescribeSchemaTableResp {
	this := DescribeSchemaTableResp{}
	return &this
}

// GetClusterId returns the ClusterId field value
func (o *DescribeSchemaTableResp) GetClusterId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClusterId
}

// GetClusterIdOk returns a tuple with the ClusterId field value
// and a boolean to check if the value has been set.
func (o *DescribeSchemaTableResp) GetClusterIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClusterId, true
}

// SetClusterId sets field value
func (o *DescribeSchemaTableResp) SetClusterId(v string) {
	o.ClusterId = v
}

// GetReplicateAllowSchemaTable returns the ReplicateAllowSchemaTable field value if set, zero value otherwise.
func (o *DescribeSchemaTableResp) GetReplicateAllowSchemaTable() []string {
	if o == nil || IsNil(o.ReplicateAllowSchemaTable) {
		var ret []string
		return ret
	}
	return o.ReplicateAllowSchemaTable
}

// GetReplicateAllowSchemaTableOk returns a tuple with the ReplicateAllowSchemaTable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeSchemaTableResp) GetReplicateAllowSchemaTableOk() ([]string, bool) {
	if o == nil || IsNil(o.ReplicateAllowSchemaTable) {
		return nil, false
	}
	return o.ReplicateAllowSchemaTable, true
}

// HasReplicateAllowSchemaTable returns a boolean if a field has been set.
func (o *DescribeSchemaTableResp) HasReplicateAllowSchemaTable() bool {
	if o != nil && !IsNil(o.ReplicateAllowSchemaTable) {
		return true
	}

	return false
}

// SetReplicateAllowSchemaTable gets a reference to the given []string and assigns it to the ReplicateAllowSchemaTable field.
func (o *DescribeSchemaTableResp) SetReplicateAllowSchemaTable(v []string) {
	o.ReplicateAllowSchemaTable = v
}

// GetReplicateDenySchemaTable returns the ReplicateDenySchemaTable field value if set, zero value otherwise.
func (o *DescribeSchemaTableResp) GetReplicateDenySchemaTable() []string {
	if o == nil || IsNil(o.ReplicateDenySchemaTable) {
		var ret []string
		return ret
	}
	return o.ReplicateDenySchemaTable
}

// GetReplicateDenySchemaTableOk returns a tuple with the ReplicateDenySchemaTable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeSchemaTableResp) GetReplicateDenySchemaTableOk() ([]string, bool) {
	if o == nil || IsNil(o.ReplicateDenySchemaTable) {
		return nil, false
	}
	return o.ReplicateDenySchemaTable, true
}

// HasReplicateDenySchemaTable returns a boolean if a field has been set.
func (o *DescribeSchemaTableResp) HasReplicateDenySchemaTable() bool {
	if o != nil && !IsNil(o.ReplicateDenySchemaTable) {
		return true
	}

	return false
}

// SetReplicateDenySchemaTable gets a reference to the given []string and assigns it to the ReplicateDenySchemaTable field.
func (o *DescribeSchemaTableResp) SetReplicateDenySchemaTable(v []string) {
	o.ReplicateDenySchemaTable = v
}

// GetGcSafePoint returns the GcSafePoint field value if set, zero value otherwise.
func (o *DescribeSchemaTableResp) GetGcSafePoint() time.Time {
	if o == nil || IsNil(o.GcSafePoint) {
		var ret time.Time
		return ret
	}
	return *o.GcSafePoint
}

// GetGcSafePointOk returns a tuple with the GcSafePoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeSchemaTableResp) GetGcSafePointOk() (*time.Time, bool) {
	if o == nil || IsNil(o.GcSafePoint) {
		return nil, false
	}
	return o.GcSafePoint, true
}

// HasGcSafePoint returns a boolean if a field has been set.
func (o *DescribeSchemaTableResp) HasGcSafePoint() bool {
	if o != nil && !IsNil(o.GcSafePoint) {
		return true
	}

	return false
}

// SetGcSafePoint gets a reference to the given time.Time and assigns it to the GcSafePoint field.
func (o *DescribeSchemaTableResp) SetGcSafePoint(v time.Time) {
	o.GcSafePoint = &v
}

func (o DescribeSchemaTableResp) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DescribeSchemaTableResp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["clusterId"] = o.ClusterId
	if !IsNil(o.ReplicateAllowSchemaTable) {
		toSerialize["replicateAllowSchemaTable"] = o.ReplicateAllowSchemaTable
	}
	if !IsNil(o.ReplicateDenySchemaTable) {
		toSerialize["replicateDenySchemaTable"] = o.ReplicateDenySchemaTable
	}
	if !IsNil(o.GcSafePoint) {
		toSerialize["gcSafePoint"] = o.GcSafePoint
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DescribeSchemaTableResp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"clusterId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDescribeSchemaTableResp := _DescribeSchemaTableResp{}

	err = json.Unmarshal(data, &varDescribeSchemaTableResp)

	if err != nil {
		return err
	}

	*o = DescribeSchemaTableResp(varDescribeSchemaTableResp)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "clusterId")
		delete(additionalProperties, "replicateAllowSchemaTable")
		delete(additionalProperties, "replicateDenySchemaTable")
		delete(additionalProperties, "gcSafePoint")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDescribeSchemaTableResp struct {
	value *DescribeSchemaTableResp
	isSet bool
}

func (v NullableDescribeSchemaTableResp) Get() *DescribeSchemaTableResp {
	return v.value
}

func (v *NullableDescribeSchemaTableResp) Set(val *DescribeSchemaTableResp) {
	v.value = val
	v.isSet = true
}

func (v NullableDescribeSchemaTableResp) IsSet() bool {
	return v.isSet
}

func (v *NullableDescribeSchemaTableResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescribeSchemaTableResp(val *DescribeSchemaTableResp) *NullableDescribeSchemaTableResp {
	return &NullableDescribeSchemaTableResp{value: val, isSet: true}
}

func (v NullableDescribeSchemaTableResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescribeSchemaTableResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
