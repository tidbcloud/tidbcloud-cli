/*
TiDB Cloud Serverless CDC Open API

TiDB Cloud Serverless CDC Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdc

import (
	"encoding/json"
)

// KafkaTypeEnum  - SELF_HOSTED: Self-hosted Kafka.  - MSK: MSK (Managed Streaming for Kafka).  - CONFLUENT: Confluent Kafka.
type KafkaTypeEnum string

// List of KafkaType.Enum
const (
	KAFKATYPEENUM_SELF_HOSTED KafkaTypeEnum = "SELF_HOSTED"
	KAFKATYPEENUM_MSK         KafkaTypeEnum = "MSK"
	KAFKATYPEENUM_CONFLUENT   KafkaTypeEnum = "CONFLUENT"
)

// All allowed values of KafkaTypeEnum enum
var AllowedKafkaTypeEnumEnumValues = []KafkaTypeEnum{
	"SELF_HOSTED",
	"MSK",
	"CONFLUENT",
}

func (v *KafkaTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := KafkaTypeEnum(value)
	for _, existing := range AllowedKafkaTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = KafkaTypeEnum(value)
	return nil
}

// NewKafkaTypeEnumFromValue returns a pointer to a valid KafkaTypeEnum for the value passed as argument
func NewKafkaTypeEnumFromValue(v string) *KafkaTypeEnum {
	ev := KafkaTypeEnum(v)
	return &ev
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v KafkaTypeEnum) IsValid() bool {
	for _, existing := range AllowedKafkaTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to KafkaType.Enum value
func (v KafkaTypeEnum) Ptr() *KafkaTypeEnum {
	return &v
}

type NullableKafkaTypeEnum struct {
	value *KafkaTypeEnum
	isSet bool
}

func (v NullableKafkaTypeEnum) Get() *KafkaTypeEnum {
	return v.value
}

func (v *NullableKafkaTypeEnum) Set(val *KafkaTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableKafkaTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableKafkaTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKafkaTypeEnum(val *KafkaTypeEnum) *NullableKafkaTypeEnum {
	return &NullableKafkaTypeEnum{value: val, isSet: true}
}

func (v NullableKafkaTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKafkaTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
