/*
TiDB Cloud Serverless CDC Open API

TiDB Cloud Serverless CDC Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdc

import (
	"encoding/json"
)

// PartitionDispatcherEnum  - TABLE: Partition by table.  - INDEX_VALUE: Partition by index value.  - TS: Partition by timestamp.  - COLUMNS: Partition by columns.
type PartitionDispatcherEnum string

// List of PartitionDispatcher.Enum
const (
	PARTITIONDISPATCHERENUM_TABLE       PartitionDispatcherEnum = "TABLE"
	PARTITIONDISPATCHERENUM_INDEX_VALUE PartitionDispatcherEnum = "INDEX_VALUE"
	PARTITIONDISPATCHERENUM_TS          PartitionDispatcherEnum = "TS"
	PARTITIONDISPATCHERENUM_COLUMNS     PartitionDispatcherEnum = "COLUMNS"
)

// All allowed values of PartitionDispatcherEnum enum
var AllowedPartitionDispatcherEnumEnumValues = []PartitionDispatcherEnum{
	"TABLE",
	"INDEX_VALUE",
	"TS",
	"COLUMNS",
}

func (v *PartitionDispatcherEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PartitionDispatcherEnum(value)
	for _, existing := range AllowedPartitionDispatcherEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = PartitionDispatcherEnum(value)
	return nil
}

// NewPartitionDispatcherEnumFromValue returns a pointer to a valid PartitionDispatcherEnum for the value passed as argument
func NewPartitionDispatcherEnumFromValue(v string) *PartitionDispatcherEnum {
	ev := PartitionDispatcherEnum(v)
	return &ev
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PartitionDispatcherEnum) IsValid() bool {
	for _, existing := range AllowedPartitionDispatcherEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PartitionDispatcher.Enum value
func (v PartitionDispatcherEnum) Ptr() *PartitionDispatcherEnum {
	return &v
}

type NullablePartitionDispatcherEnum struct {
	value *PartitionDispatcherEnum
	isSet bool
}

func (v NullablePartitionDispatcherEnum) Get() *PartitionDispatcherEnum {
	return v.value
}

func (v *NullablePartitionDispatcherEnum) Set(val *PartitionDispatcherEnum) {
	v.value = val
	v.isSet = true
}

func (v NullablePartitionDispatcherEnum) IsSet() bool {
	return v.isSet
}

func (v *NullablePartitionDispatcherEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePartitionDispatcherEnum(val *PartitionDispatcherEnum) *NullablePartitionDispatcherEnum {
	return &NullablePartitionDispatcherEnum{value: val, isSet: true}
}

func (v NullablePartitionDispatcherEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePartitionDispatcherEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
