/*
TiDB Cloud Serverless CDC Open API

TiDB Cloud Serverless CDC Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdc

import (
	"encoding/json"
	"fmt"
)

// checks if the KafkaEndpoint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KafkaEndpoint{}

// KafkaEndpoint struct for KafkaEndpoint
type KafkaEndpoint struct {
	// Required. The type of the Kafka instance.
	KafkaType KafkaTypeEnum `json:"kafkaType"`
	// Required. The advertised listeners pattern.
	AdvertisedListenersPattern map[string]string `json:"advertisedListenersPattern"`
	AdditionalProperties       map[string]interface{}
}

type _KafkaEndpoint KafkaEndpoint

// NewKafkaEndpoint instantiates a new KafkaEndpoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKafkaEndpoint(kafkaType KafkaTypeEnum, advertisedListenersPattern map[string]string) *KafkaEndpoint {
	this := KafkaEndpoint{}
	this.KafkaType = kafkaType
	this.AdvertisedListenersPattern = advertisedListenersPattern
	return &this
}

// NewKafkaEndpointWithDefaults instantiates a new KafkaEndpoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKafkaEndpointWithDefaults() *KafkaEndpoint {
	this := KafkaEndpoint{}
	return &this
}

// GetKafkaType returns the KafkaType field value
func (o *KafkaEndpoint) GetKafkaType() KafkaTypeEnum {
	if o == nil {
		var ret KafkaTypeEnum
		return ret
	}

	return o.KafkaType
}

// GetKafkaTypeOk returns a tuple with the KafkaType field value
// and a boolean to check if the value has been set.
func (o *KafkaEndpoint) GetKafkaTypeOk() (*KafkaTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KafkaType, true
}

// SetKafkaType sets field value
func (o *KafkaEndpoint) SetKafkaType(v KafkaTypeEnum) {
	o.KafkaType = v
}

// GetAdvertisedListenersPattern returns the AdvertisedListenersPattern field value
func (o *KafkaEndpoint) GetAdvertisedListenersPattern() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.AdvertisedListenersPattern
}

// GetAdvertisedListenersPatternOk returns a tuple with the AdvertisedListenersPattern field value
// and a boolean to check if the value has been set.
func (o *KafkaEndpoint) GetAdvertisedListenersPatternOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AdvertisedListenersPattern, true
}

// SetAdvertisedListenersPattern sets field value
func (o *KafkaEndpoint) SetAdvertisedListenersPattern(v map[string]string) {
	o.AdvertisedListenersPattern = v
}

func (o KafkaEndpoint) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KafkaEndpoint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["kafkaType"] = o.KafkaType
	toSerialize["advertisedListenersPattern"] = o.AdvertisedListenersPattern

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *KafkaEndpoint) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"kafkaType",
		"advertisedListenersPattern",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKafkaEndpoint := _KafkaEndpoint{}

	err = json.Unmarshal(data, &varKafkaEndpoint)

	if err != nil {
		return err
	}

	*o = KafkaEndpoint(varKafkaEndpoint)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "kafkaType")
		delete(additionalProperties, "advertisedListenersPattern")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableKafkaEndpoint struct {
	value *KafkaEndpoint
	isSet bool
}

func (v NullableKafkaEndpoint) Get() *KafkaEndpoint {
	return v.value
}

func (v *NullableKafkaEndpoint) Set(val *KafkaEndpoint) {
	v.value = val
	v.isSet = true
}

func (v NullableKafkaEndpoint) IsSet() bool {
	return v.isSet
}

func (v *NullableKafkaEndpoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKafkaEndpoint(val *KafkaEndpoint) *NullableKafkaEndpoint {
	return &NullableKafkaEndpoint{value: val, isSet: true}
}

func (v NullableKafkaEndpoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKafkaEndpoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
