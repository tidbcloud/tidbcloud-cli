/*
TiDB Cloud Serverless CDC Open API

TiDB Cloud Serverless CDC Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdc

import (
	"encoding/json"
	"fmt"
)

// checks if the ConfluentSchemaRegistry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfluentSchemaRegistry{}

// ConfluentSchemaRegistry struct for ConfluentSchemaRegistry
type ConfluentSchemaRegistry struct {
	// Required. The schema registry endpoint.
	Endpoint string `json:"endpoint"`
	// Optional. Enable HTTP authentication.
	EnableHttpAuth *bool `json:"enableHttpAuth,omitempty"`
	// Optional. The username for HTTP authentication.
	UserName *string `json:"userName,omitempty"`
	// Optional. The password for HTTP authentication.
	Password             *string `json:"password,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ConfluentSchemaRegistry ConfluentSchemaRegistry

// NewConfluentSchemaRegistry instantiates a new ConfluentSchemaRegistry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfluentSchemaRegistry(endpoint string) *ConfluentSchemaRegistry {
	this := ConfluentSchemaRegistry{}
	this.Endpoint = endpoint
	return &this
}

// NewConfluentSchemaRegistryWithDefaults instantiates a new ConfluentSchemaRegistry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfluentSchemaRegistryWithDefaults() *ConfluentSchemaRegistry {
	this := ConfluentSchemaRegistry{}
	return &this
}

// GetEndpoint returns the Endpoint field value
func (o *ConfluentSchemaRegistry) GetEndpoint() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Endpoint
}

// GetEndpointOk returns a tuple with the Endpoint field value
// and a boolean to check if the value has been set.
func (o *ConfluentSchemaRegistry) GetEndpointOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Endpoint, true
}

// SetEndpoint sets field value
func (o *ConfluentSchemaRegistry) SetEndpoint(v string) {
	o.Endpoint = v
}

// GetEnableHttpAuth returns the EnableHttpAuth field value if set, zero value otherwise.
func (o *ConfluentSchemaRegistry) GetEnableHttpAuth() bool {
	if o == nil || IsNil(o.EnableHttpAuth) {
		var ret bool
		return ret
	}
	return *o.EnableHttpAuth
}

// GetEnableHttpAuthOk returns a tuple with the EnableHttpAuth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfluentSchemaRegistry) GetEnableHttpAuthOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableHttpAuth) {
		return nil, false
	}
	return o.EnableHttpAuth, true
}

// HasEnableHttpAuth returns a boolean if a field has been set.
func (o *ConfluentSchemaRegistry) HasEnableHttpAuth() bool {
	if o != nil && !IsNil(o.EnableHttpAuth) {
		return true
	}

	return false
}

// SetEnableHttpAuth gets a reference to the given bool and assigns it to the EnableHttpAuth field.
func (o *ConfluentSchemaRegistry) SetEnableHttpAuth(v bool) {
	o.EnableHttpAuth = &v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *ConfluentSchemaRegistry) GetUserName() string {
	if o == nil || IsNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfluentSchemaRegistry) GetUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *ConfluentSchemaRegistry) HasUserName() bool {
	if o != nil && !IsNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *ConfluentSchemaRegistry) SetUserName(v string) {
	o.UserName = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *ConfluentSchemaRegistry) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfluentSchemaRegistry) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *ConfluentSchemaRegistry) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *ConfluentSchemaRegistry) SetPassword(v string) {
	o.Password = &v
}

func (o ConfluentSchemaRegistry) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfluentSchemaRegistry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["endpoint"] = o.Endpoint
	if !IsNil(o.EnableHttpAuth) {
		toSerialize["enableHttpAuth"] = o.EnableHttpAuth
	}
	if !IsNil(o.UserName) {
		toSerialize["userName"] = o.UserName
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ConfluentSchemaRegistry) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"endpoint",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConfluentSchemaRegistry := _ConfluentSchemaRegistry{}

	err = json.Unmarshal(data, &varConfluentSchemaRegistry)

	if err != nil {
		return err
	}

	*o = ConfluentSchemaRegistry(varConfluentSchemaRegistry)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "endpoint")
		delete(additionalProperties, "enableHttpAuth")
		delete(additionalProperties, "userName")
		delete(additionalProperties, "password")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableConfluentSchemaRegistry struct {
	value *ConfluentSchemaRegistry
	isSet bool
}

func (v NullableConfluentSchemaRegistry) Get() *ConfluentSchemaRegistry {
	return v.value
}

func (v *NullableConfluentSchemaRegistry) Set(val *ConfluentSchemaRegistry) {
	v.value = val
	v.isSet = true
}

func (v NullableConfluentSchemaRegistry) IsSet() bool {
	return v.isSet
}

func (v *NullableConfluentSchemaRegistry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfluentSchemaRegistry(val *ConfluentSchemaRegistry) *NullableConfluentSchemaRegistry {
	return &NullableConfluentSchemaRegistry{value: val, isSet: true}
}

func (v NullableConfluentSchemaRegistry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfluentSchemaRegistry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
