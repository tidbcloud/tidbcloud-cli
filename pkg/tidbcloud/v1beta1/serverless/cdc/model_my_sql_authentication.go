/*
TiDB Cloud Serverless CDC Open API

TiDB Cloud Serverless CDC Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdc

import (
	"encoding/json"
	"fmt"
)

// checks if the MySQLAuthentication type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MySQLAuthentication{}

// MySQLAuthentication struct for MySQLAuthentication
type MySQLAuthentication struct {
	// Required. The username for the MySQL instance.
	UserName string `json:"userName"`
	// Required. The password for the MySQL instance.
	Password string `json:"password"`
	// Optional. Enable TLS for the MySQL connection.
	EnableTls            *bool `json:"enableTls,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MySQLAuthentication MySQLAuthentication

// NewMySQLAuthentication instantiates a new MySQLAuthentication object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMySQLAuthentication(userName string, password string) *MySQLAuthentication {
	this := MySQLAuthentication{}
	this.UserName = userName
	this.Password = password
	return &this
}

// NewMySQLAuthenticationWithDefaults instantiates a new MySQLAuthentication object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMySQLAuthenticationWithDefaults() *MySQLAuthentication {
	this := MySQLAuthentication{}
	return &this
}

// GetUserName returns the UserName field value
func (o *MySQLAuthentication) GetUserName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value
// and a boolean to check if the value has been set.
func (o *MySQLAuthentication) GetUserNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserName, true
}

// SetUserName sets field value
func (o *MySQLAuthentication) SetUserName(v string) {
	o.UserName = v
}

// GetPassword returns the Password field value
func (o *MySQLAuthentication) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *MySQLAuthentication) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *MySQLAuthentication) SetPassword(v string) {
	o.Password = v
}

// GetEnableTls returns the EnableTls field value if set, zero value otherwise.
func (o *MySQLAuthentication) GetEnableTls() bool {
	if o == nil || IsNil(o.EnableTls) {
		var ret bool
		return ret
	}
	return *o.EnableTls
}

// GetEnableTlsOk returns a tuple with the EnableTls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MySQLAuthentication) GetEnableTlsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableTls) {
		return nil, false
	}
	return o.EnableTls, true
}

// HasEnableTls returns a boolean if a field has been set.
func (o *MySQLAuthentication) HasEnableTls() bool {
	if o != nil && !IsNil(o.EnableTls) {
		return true
	}

	return false
}

// SetEnableTls gets a reference to the given bool and assigns it to the EnableTls field.
func (o *MySQLAuthentication) SetEnableTls(v bool) {
	o.EnableTls = &v
}

func (o MySQLAuthentication) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MySQLAuthentication) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["userName"] = o.UserName
	toSerialize["password"] = o.Password
	if !IsNil(o.EnableTls) {
		toSerialize["enableTls"] = o.EnableTls
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MySQLAuthentication) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"userName",
		"password",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMySQLAuthentication := _MySQLAuthentication{}

	err = json.Unmarshal(data, &varMySQLAuthentication)

	if err != nil {
		return err
	}

	*o = MySQLAuthentication(varMySQLAuthentication)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "userName")
		delete(additionalProperties, "password")
		delete(additionalProperties, "enableTls")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMySQLAuthentication struct {
	value *MySQLAuthentication
	isSet bool
}

func (v NullableMySQLAuthentication) Get() *MySQLAuthentication {
	return v.value
}

func (v *NullableMySQLAuthentication) Set(val *MySQLAuthentication) {
	v.value = val
	v.isSet = true
}

func (v NullableMySQLAuthentication) IsSet() bool {
	return v.isSet
}

func (v *NullableMySQLAuthentication) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMySQLAuthentication(val *MySQLAuthentication) *NullableMySQLAuthentication {
	return &NullableMySQLAuthentication{value: val, isSet: true}
}

func (v NullableMySQLAuthentication) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMySQLAuthentication) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
