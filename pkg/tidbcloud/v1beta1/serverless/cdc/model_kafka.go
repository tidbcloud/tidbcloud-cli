/*
TiDB Cloud Serverless CDC Open API

TiDB Cloud Serverless CDC Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdc

import (
	"encoding/json"
)

// checks if the Kafka type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Kafka{}

// Kafka struct for Kafka
type Kafka struct {
	Network              *KafkaNetwork              `json:"network,omitempty"`
	Broker               *KafkaBroker               `json:"broker,omitempty"`
	Authentication       *KafkaAuthentication       `json:"authentication,omitempty"`
	DataFormat           *KafkaDataFormat           `json:"dataFormat,omitempty"`
	TopicPartitionConfig *KafkaTopicPartitionConfig `json:"topicPartitionConfig,omitempty"`
	ColumnSelectors      []KafkaColumnSelector      `json:"columnSelectors,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Kafka Kafka

// NewKafka instantiates a new Kafka object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKafka() *Kafka {
	this := Kafka{}
	return &this
}

// NewKafkaWithDefaults instantiates a new Kafka object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKafkaWithDefaults() *Kafka {
	this := Kafka{}
	return &this
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *Kafka) GetNetwork() KafkaNetwork {
	if o == nil || IsNil(o.Network) {
		var ret KafkaNetwork
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Kafka) GetNetworkOk() (*KafkaNetwork, bool) {
	if o == nil || IsNil(o.Network) {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *Kafka) HasNetwork() bool {
	if o != nil && !IsNil(o.Network) {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given KafkaNetwork and assigns it to the Network field.
func (o *Kafka) SetNetwork(v KafkaNetwork) {
	o.Network = &v
}

// GetBroker returns the Broker field value if set, zero value otherwise.
func (o *Kafka) GetBroker() KafkaBroker {
	if o == nil || IsNil(o.Broker) {
		var ret KafkaBroker
		return ret
	}
	return *o.Broker
}

// GetBrokerOk returns a tuple with the Broker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Kafka) GetBrokerOk() (*KafkaBroker, bool) {
	if o == nil || IsNil(o.Broker) {
		return nil, false
	}
	return o.Broker, true
}

// HasBroker returns a boolean if a field has been set.
func (o *Kafka) HasBroker() bool {
	if o != nil && !IsNil(o.Broker) {
		return true
	}

	return false
}

// SetBroker gets a reference to the given KafkaBroker and assigns it to the Broker field.
func (o *Kafka) SetBroker(v KafkaBroker) {
	o.Broker = &v
}

// GetAuthentication returns the Authentication field value if set, zero value otherwise.
func (o *Kafka) GetAuthentication() KafkaAuthentication {
	if o == nil || IsNil(o.Authentication) {
		var ret KafkaAuthentication
		return ret
	}
	return *o.Authentication
}

// GetAuthenticationOk returns a tuple with the Authentication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Kafka) GetAuthenticationOk() (*KafkaAuthentication, bool) {
	if o == nil || IsNil(o.Authentication) {
		return nil, false
	}
	return o.Authentication, true
}

// HasAuthentication returns a boolean if a field has been set.
func (o *Kafka) HasAuthentication() bool {
	if o != nil && !IsNil(o.Authentication) {
		return true
	}

	return false
}

// SetAuthentication gets a reference to the given KafkaAuthentication and assigns it to the Authentication field.
func (o *Kafka) SetAuthentication(v KafkaAuthentication) {
	o.Authentication = &v
}

// GetDataFormat returns the DataFormat field value if set, zero value otherwise.
func (o *Kafka) GetDataFormat() KafkaDataFormat {
	if o == nil || IsNil(o.DataFormat) {
		var ret KafkaDataFormat
		return ret
	}
	return *o.DataFormat
}

// GetDataFormatOk returns a tuple with the DataFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Kafka) GetDataFormatOk() (*KafkaDataFormat, bool) {
	if o == nil || IsNil(o.DataFormat) {
		return nil, false
	}
	return o.DataFormat, true
}

// HasDataFormat returns a boolean if a field has been set.
func (o *Kafka) HasDataFormat() bool {
	if o != nil && !IsNil(o.DataFormat) {
		return true
	}

	return false
}

// SetDataFormat gets a reference to the given KafkaDataFormat and assigns it to the DataFormat field.
func (o *Kafka) SetDataFormat(v KafkaDataFormat) {
	o.DataFormat = &v
}

// GetTopicPartitionConfig returns the TopicPartitionConfig field value if set, zero value otherwise.
func (o *Kafka) GetTopicPartitionConfig() KafkaTopicPartitionConfig {
	if o == nil || IsNil(o.TopicPartitionConfig) {
		var ret KafkaTopicPartitionConfig
		return ret
	}
	return *o.TopicPartitionConfig
}

// GetTopicPartitionConfigOk returns a tuple with the TopicPartitionConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Kafka) GetTopicPartitionConfigOk() (*KafkaTopicPartitionConfig, bool) {
	if o == nil || IsNil(o.TopicPartitionConfig) {
		return nil, false
	}
	return o.TopicPartitionConfig, true
}

// HasTopicPartitionConfig returns a boolean if a field has been set.
func (o *Kafka) HasTopicPartitionConfig() bool {
	if o != nil && !IsNil(o.TopicPartitionConfig) {
		return true
	}

	return false
}

// SetTopicPartitionConfig gets a reference to the given KafkaTopicPartitionConfig and assigns it to the TopicPartitionConfig field.
func (o *Kafka) SetTopicPartitionConfig(v KafkaTopicPartitionConfig) {
	o.TopicPartitionConfig = &v
}

// GetColumnSelectors returns the ColumnSelectors field value if set, zero value otherwise.
func (o *Kafka) GetColumnSelectors() []KafkaColumnSelector {
	if o == nil || IsNil(o.ColumnSelectors) {
		var ret []KafkaColumnSelector
		return ret
	}
	return o.ColumnSelectors
}

// GetColumnSelectorsOk returns a tuple with the ColumnSelectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Kafka) GetColumnSelectorsOk() ([]KafkaColumnSelector, bool) {
	if o == nil || IsNil(o.ColumnSelectors) {
		return nil, false
	}
	return o.ColumnSelectors, true
}

// HasColumnSelectors returns a boolean if a field has been set.
func (o *Kafka) HasColumnSelectors() bool {
	if o != nil && !IsNil(o.ColumnSelectors) {
		return true
	}

	return false
}

// SetColumnSelectors gets a reference to the given []KafkaColumnSelector and assigns it to the ColumnSelectors field.
func (o *Kafka) SetColumnSelectors(v []KafkaColumnSelector) {
	o.ColumnSelectors = v
}

func (o Kafka) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Kafka) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Network) {
		toSerialize["network"] = o.Network
	}
	if !IsNil(o.Broker) {
		toSerialize["broker"] = o.Broker
	}
	if !IsNil(o.Authentication) {
		toSerialize["authentication"] = o.Authentication
	}
	if !IsNil(o.DataFormat) {
		toSerialize["dataFormat"] = o.DataFormat
	}
	if !IsNil(o.TopicPartitionConfig) {
		toSerialize["topicPartitionConfig"] = o.TopicPartitionConfig
	}
	if !IsNil(o.ColumnSelectors) {
		toSerialize["columnSelectors"] = o.ColumnSelectors
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Kafka) UnmarshalJSON(data []byte) (err error) {
	varKafka := _Kafka{}

	err = json.Unmarshal(data, &varKafka)

	if err != nil {
		return err
	}

	*o = Kafka(varKafka)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "network")
		delete(additionalProperties, "broker")
		delete(additionalProperties, "authentication")
		delete(additionalProperties, "dataFormat")
		delete(additionalProperties, "topicPartitionConfig")
		delete(additionalProperties, "columnSelectors")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableKafka struct {
	value *Kafka
	isSet bool
}

func (v NullableKafka) Get() *Kafka {
	return v.value
}

func (v *NullableKafka) Set(val *Kafka) {
	v.value = val
	v.isSet = true
}

func (v NullableKafka) IsSet() bool {
	return v.isSet
}

func (v *NullableKafka) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKafka(val *Kafka) *NullableKafka {
	return &NullableKafka{value: val, isSet: true}
}

func (v NullableKafka) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKafka) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
