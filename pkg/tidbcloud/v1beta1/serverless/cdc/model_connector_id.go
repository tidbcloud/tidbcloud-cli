/*
TiDB Cloud Serverless CDC Open API

TiDB Cloud Serverless CDC Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdc

import (
	"encoding/json"
	"fmt"
)

// checks if the ConnectorID type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectorID{}

// ConnectorID struct for ConnectorID
type ConnectorID struct {
	// Required. The ID of the connector.
	ConnectorId string `json:"connectorId"`
	// Required. The ID of the cluster.
	ClusterId            string `json:"clusterId"`
	AdditionalProperties map[string]interface{}
}

type _ConnectorID ConnectorID

// NewConnectorID instantiates a new ConnectorID object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectorID(connectorId string, clusterId string) *ConnectorID {
	this := ConnectorID{}
	this.ConnectorId = connectorId
	this.ClusterId = clusterId
	return &this
}

// NewConnectorIDWithDefaults instantiates a new ConnectorID object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectorIDWithDefaults() *ConnectorID {
	this := ConnectorID{}
	return &this
}

// GetConnectorId returns the ConnectorId field value
func (o *ConnectorID) GetConnectorId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConnectorId
}

// GetConnectorIdOk returns a tuple with the ConnectorId field value
// and a boolean to check if the value has been set.
func (o *ConnectorID) GetConnectorIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectorId, true
}

// SetConnectorId sets field value
func (o *ConnectorID) SetConnectorId(v string) {
	o.ConnectorId = v
}

// GetClusterId returns the ClusterId field value
func (o *ConnectorID) GetClusterId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClusterId
}

// GetClusterIdOk returns a tuple with the ClusterId field value
// and a boolean to check if the value has been set.
func (o *ConnectorID) GetClusterIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClusterId, true
}

// SetClusterId sets field value
func (o *ConnectorID) SetClusterId(v string) {
	o.ClusterId = v
}

func (o ConnectorID) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectorID) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["connectorId"] = o.ConnectorId
	toSerialize["clusterId"] = o.ClusterId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ConnectorID) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"connectorId",
		"clusterId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConnectorID := _ConnectorID{}

	err = json.Unmarshal(data, &varConnectorID)

	if err != nil {
		return err
	}

	*o = ConnectorID(varConnectorID)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "connectorId")
		delete(additionalProperties, "clusterId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableConnectorID struct {
	value *ConnectorID
	isSet bool
}

func (v NullableConnectorID) Get() *ConnectorID {
	return v.value
}

func (v *NullableConnectorID) Set(val *ConnectorID) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorID) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorID) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorID(val *ConnectorID) *NullableConnectorID {
	return &NullableConnectorID{value: val, isSet: true}
}

func (v NullableConnectorID) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorID) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
