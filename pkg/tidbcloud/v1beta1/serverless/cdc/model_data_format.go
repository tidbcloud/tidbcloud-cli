/*
TiDB Cloud Serverless CDC Open API

TiDB Cloud Serverless CDC Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdc

import (
	"encoding/json"
)

// checks if the DataFormat type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataFormat{}

// DataFormat struct for DataFormat
type DataFormat struct {
	Protocol             *CDCProtocolEnum `json:"protocol,omitempty"`
	EnableTidbExtension  *bool            `json:"enableTidbExtension,omitempty"`
	AvroConfig           *AvroConfig      `json:"avroConfig,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DataFormat DataFormat

// NewDataFormat instantiates a new DataFormat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataFormat() *DataFormat {
	this := DataFormat{}
	return &this
}

// NewDataFormatWithDefaults instantiates a new DataFormat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataFormatWithDefaults() *DataFormat {
	this := DataFormat{}
	return &this
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *DataFormat) GetProtocol() CDCProtocolEnum {
	if o == nil || IsNil(o.Protocol) {
		var ret CDCProtocolEnum
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataFormat) GetProtocolOk() (*CDCProtocolEnum, bool) {
	if o == nil || IsNil(o.Protocol) {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *DataFormat) HasProtocol() bool {
	if o != nil && !IsNil(o.Protocol) {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given CDCProtocolEnum and assigns it to the Protocol field.
func (o *DataFormat) SetProtocol(v CDCProtocolEnum) {
	o.Protocol = &v
}

// GetEnableTidbExtension returns the EnableTidbExtension field value if set, zero value otherwise.
func (o *DataFormat) GetEnableTidbExtension() bool {
	if o == nil || IsNil(o.EnableTidbExtension) {
		var ret bool
		return ret
	}
	return *o.EnableTidbExtension
}

// GetEnableTidbExtensionOk returns a tuple with the EnableTidbExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataFormat) GetEnableTidbExtensionOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableTidbExtension) {
		return nil, false
	}
	return o.EnableTidbExtension, true
}

// HasEnableTidbExtension returns a boolean if a field has been set.
func (o *DataFormat) HasEnableTidbExtension() bool {
	if o != nil && !IsNil(o.EnableTidbExtension) {
		return true
	}

	return false
}

// SetEnableTidbExtension gets a reference to the given bool and assigns it to the EnableTidbExtension field.
func (o *DataFormat) SetEnableTidbExtension(v bool) {
	o.EnableTidbExtension = &v
}

// GetAvroConfig returns the AvroConfig field value if set, zero value otherwise.
func (o *DataFormat) GetAvroConfig() AvroConfig {
	if o == nil || IsNil(o.AvroConfig) {
		var ret AvroConfig
		return ret
	}
	return *o.AvroConfig
}

// GetAvroConfigOk returns a tuple with the AvroConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataFormat) GetAvroConfigOk() (*AvroConfig, bool) {
	if o == nil || IsNil(o.AvroConfig) {
		return nil, false
	}
	return o.AvroConfig, true
}

// HasAvroConfig returns a boolean if a field has been set.
func (o *DataFormat) HasAvroConfig() bool {
	if o != nil && !IsNil(o.AvroConfig) {
		return true
	}

	return false
}

// SetAvroConfig gets a reference to the given AvroConfig and assigns it to the AvroConfig field.
func (o *DataFormat) SetAvroConfig(v AvroConfig) {
	o.AvroConfig = &v
}

func (o DataFormat) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataFormat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Protocol) {
		toSerialize["protocol"] = o.Protocol
	}
	if !IsNil(o.EnableTidbExtension) {
		toSerialize["enableTidbExtension"] = o.EnableTidbExtension
	}
	if !IsNil(o.AvroConfig) {
		toSerialize["avroConfig"] = o.AvroConfig
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DataFormat) UnmarshalJSON(data []byte) (err error) {
	varDataFormat := _DataFormat{}

	err = json.Unmarshal(data, &varDataFormat)

	if err != nil {
		return err
	}

	*o = DataFormat(varDataFormat)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "protocol")
		delete(additionalProperties, "enableTidbExtension")
		delete(additionalProperties, "avroConfig")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDataFormat struct {
	value *DataFormat
	isSet bool
}

func (v NullableDataFormat) Get() *DataFormat {
	return v.value
}

func (v *NullableDataFormat) Set(val *DataFormat) {
	v.value = val
	v.isSet = true
}

func (v NullableDataFormat) IsSet() bool {
	return v.isSet
}

func (v *NullableDataFormat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataFormat(val *DataFormat) *NullableDataFormat {
	return &NullableDataFormat{value: val, isSet: true}
}

func (v NullableDataFormat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataFormat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
