/*
TiDB Cloud Serverless CDC Open API

TiDB Cloud Serverless CDC Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdc

import (
	"encoding/json"
	"fmt"
)

// checks if the MySQL type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MySQL{}

// MySQL struct for MySQL
type MySQL struct {
	// Required. The network configuration for the MySQL instance.
	Network MySQLNetwork `json:"network"`
	// Required. The authentication information for the MySQL instance.
	Authentication       MySQLAuthentication `json:"authentication"`
	AdditionalProperties map[string]interface{}
}

type _MySQL MySQL

// NewMySQL instantiates a new MySQL object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMySQL(network MySQLNetwork, authentication MySQLAuthentication) *MySQL {
	this := MySQL{}
	this.Network = network
	this.Authentication = authentication
	return &this
}

// NewMySQLWithDefaults instantiates a new MySQL object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMySQLWithDefaults() *MySQL {
	this := MySQL{}
	return &this
}

// GetNetwork returns the Network field value
func (o *MySQL) GetNetwork() MySQLNetwork {
	if o == nil {
		var ret MySQLNetwork
		return ret
	}

	return o.Network
}

// GetNetworkOk returns a tuple with the Network field value
// and a boolean to check if the value has been set.
func (o *MySQL) GetNetworkOk() (*MySQLNetwork, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Network, true
}

// SetNetwork sets field value
func (o *MySQL) SetNetwork(v MySQLNetwork) {
	o.Network = v
}

// GetAuthentication returns the Authentication field value
func (o *MySQL) GetAuthentication() MySQLAuthentication {
	if o == nil {
		var ret MySQLAuthentication
		return ret
	}

	return o.Authentication
}

// GetAuthenticationOk returns a tuple with the Authentication field value
// and a boolean to check if the value has been set.
func (o *MySQL) GetAuthenticationOk() (*MySQLAuthentication, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Authentication, true
}

// SetAuthentication sets field value
func (o *MySQL) SetAuthentication(v MySQLAuthentication) {
	o.Authentication = v
}

func (o MySQL) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MySQL) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["network"] = o.Network
	toSerialize["authentication"] = o.Authentication

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MySQL) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"network",
		"authentication",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMySQL := _MySQL{}

	err = json.Unmarshal(data, &varMySQL)

	if err != nil {
		return err
	}

	*o = MySQL(varMySQL)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "network")
		delete(additionalProperties, "authentication")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMySQL struct {
	value *MySQL
	isSet bool
}

func (v NullableMySQL) Get() *MySQL {
	return v.value
}

func (v *NullableMySQL) Set(val *MySQL) {
	v.value = val
	v.isSet = true
}

func (v NullableMySQL) IsSet() bool {
	return v.isSet
}

func (v *NullableMySQL) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMySQL(val *MySQL) *NullableMySQL {
	return &NullableMySQL{value: val, isSet: true}
}

func (v NullableMySQL) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMySQL) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
