/*
TiDB Cloud Serverless CDC Open API

TiDB Cloud Serverless CDC Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdc

import (
	"encoding/json"
)

// checks if the KafkaColumnSelector type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KafkaColumnSelector{}

// KafkaColumnSelector struct for KafkaColumnSelector
type KafkaColumnSelector struct {
	Matcher              []string `json:"matcher,omitempty"`
	Columns              []string `json:"columns,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _KafkaColumnSelector KafkaColumnSelector

// NewKafkaColumnSelector instantiates a new KafkaColumnSelector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKafkaColumnSelector() *KafkaColumnSelector {
	this := KafkaColumnSelector{}
	return &this
}

// NewKafkaColumnSelectorWithDefaults instantiates a new KafkaColumnSelector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKafkaColumnSelectorWithDefaults() *KafkaColumnSelector {
	this := KafkaColumnSelector{}
	return &this
}

// GetMatcher returns the Matcher field value if set, zero value otherwise.
func (o *KafkaColumnSelector) GetMatcher() []string {
	if o == nil || IsNil(o.Matcher) {
		var ret []string
		return ret
	}
	return o.Matcher
}

// GetMatcherOk returns a tuple with the Matcher field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaColumnSelector) GetMatcherOk() ([]string, bool) {
	if o == nil || IsNil(o.Matcher) {
		return nil, false
	}
	return o.Matcher, true
}

// HasMatcher returns a boolean if a field has been set.
func (o *KafkaColumnSelector) HasMatcher() bool {
	if o != nil && !IsNil(o.Matcher) {
		return true
	}

	return false
}

// SetMatcher gets a reference to the given []string and assigns it to the Matcher field.
func (o *KafkaColumnSelector) SetMatcher(v []string) {
	o.Matcher = v
}

// GetColumns returns the Columns field value if set, zero value otherwise.
func (o *KafkaColumnSelector) GetColumns() []string {
	if o == nil || IsNil(o.Columns) {
		var ret []string
		return ret
	}
	return o.Columns
}

// GetColumnsOk returns a tuple with the Columns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaColumnSelector) GetColumnsOk() ([]string, bool) {
	if o == nil || IsNil(o.Columns) {
		return nil, false
	}
	return o.Columns, true
}

// HasColumns returns a boolean if a field has been set.
func (o *KafkaColumnSelector) HasColumns() bool {
	if o != nil && !IsNil(o.Columns) {
		return true
	}

	return false
}

// SetColumns gets a reference to the given []string and assigns it to the Columns field.
func (o *KafkaColumnSelector) SetColumns(v []string) {
	o.Columns = v
}

func (o KafkaColumnSelector) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KafkaColumnSelector) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Matcher) {
		toSerialize["matcher"] = o.Matcher
	}
	if !IsNil(o.Columns) {
		toSerialize["columns"] = o.Columns
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *KafkaColumnSelector) UnmarshalJSON(data []byte) (err error) {
	varKafkaColumnSelector := _KafkaColumnSelector{}

	err = json.Unmarshal(data, &varKafkaColumnSelector)

	if err != nil {
		return err
	}

	*o = KafkaColumnSelector(varKafkaColumnSelector)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "matcher")
		delete(additionalProperties, "columns")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableKafkaColumnSelector struct {
	value *KafkaColumnSelector
	isSet bool
}

func (v NullableKafkaColumnSelector) Get() *KafkaColumnSelector {
	return v.value
}

func (v *NullableKafkaColumnSelector) Set(val *KafkaColumnSelector) {
	v.value = val
	v.isSet = true
}

func (v NullableKafkaColumnSelector) IsSet() bool {
	return v.isSet
}

func (v *NullableKafkaColumnSelector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKafkaColumnSelector(val *KafkaColumnSelector) *NullableKafkaColumnSelector {
	return &NullableKafkaColumnSelector{value: val, isSet: true}
}

func (v NullableKafkaColumnSelector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKafkaColumnSelector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
