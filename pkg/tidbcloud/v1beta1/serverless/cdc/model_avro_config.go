/*
TiDB Cloud Serverless CDC Open API

TiDB Cloud Serverless CDC Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cdc

import (
	"encoding/json"
)

// checks if the AvroConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AvroConfig{}

// AvroConfig struct for AvroConfig
type AvroConfig struct {
	DecimalHandlingMode        *DecimalHandlingModeEnum        `json:"decimalHandlingMode,omitempty"`
	BigintUnsignedHandlingMode *BigintUnsignedHandlingModeEnum `json:"bigintUnsignedHandlingMode,omitempty"`
	// Confluent Schema Registry.
	ConfluentSchemaRegistry *ConfluentSchemaRegistry `json:"confluentSchemaRegistry,omitempty"`
	// AWS Glue Schema Registry.
	AwsGlueSchemaRegistry *GlueSchemaRegistry `json:"awsGlueSchemaRegistry,omitempty"`
	AdditionalProperties  map[string]interface{}
}

type _AvroConfig AvroConfig

// NewAvroConfig instantiates a new AvroConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAvroConfig() *AvroConfig {
	this := AvroConfig{}
	return &this
}

// NewAvroConfigWithDefaults instantiates a new AvroConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAvroConfigWithDefaults() *AvroConfig {
	this := AvroConfig{}
	return &this
}

// GetDecimalHandlingMode returns the DecimalHandlingMode field value if set, zero value otherwise.
func (o *AvroConfig) GetDecimalHandlingMode() DecimalHandlingModeEnum {
	if o == nil || IsNil(o.DecimalHandlingMode) {
		var ret DecimalHandlingModeEnum
		return ret
	}
	return *o.DecimalHandlingMode
}

// GetDecimalHandlingModeOk returns a tuple with the DecimalHandlingMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvroConfig) GetDecimalHandlingModeOk() (*DecimalHandlingModeEnum, bool) {
	if o == nil || IsNil(o.DecimalHandlingMode) {
		return nil, false
	}
	return o.DecimalHandlingMode, true
}

// HasDecimalHandlingMode returns a boolean if a field has been set.
func (o *AvroConfig) HasDecimalHandlingMode() bool {
	if o != nil && !IsNil(o.DecimalHandlingMode) {
		return true
	}

	return false
}

// SetDecimalHandlingMode gets a reference to the given DecimalHandlingModeEnum and assigns it to the DecimalHandlingMode field.
func (o *AvroConfig) SetDecimalHandlingMode(v DecimalHandlingModeEnum) {
	o.DecimalHandlingMode = &v
}

// GetBigintUnsignedHandlingMode returns the BigintUnsignedHandlingMode field value if set, zero value otherwise.
func (o *AvroConfig) GetBigintUnsignedHandlingMode() BigintUnsignedHandlingModeEnum {
	if o == nil || IsNil(o.BigintUnsignedHandlingMode) {
		var ret BigintUnsignedHandlingModeEnum
		return ret
	}
	return *o.BigintUnsignedHandlingMode
}

// GetBigintUnsignedHandlingModeOk returns a tuple with the BigintUnsignedHandlingMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvroConfig) GetBigintUnsignedHandlingModeOk() (*BigintUnsignedHandlingModeEnum, bool) {
	if o == nil || IsNil(o.BigintUnsignedHandlingMode) {
		return nil, false
	}
	return o.BigintUnsignedHandlingMode, true
}

// HasBigintUnsignedHandlingMode returns a boolean if a field has been set.
func (o *AvroConfig) HasBigintUnsignedHandlingMode() bool {
	if o != nil && !IsNil(o.BigintUnsignedHandlingMode) {
		return true
	}

	return false
}

// SetBigintUnsignedHandlingMode gets a reference to the given BigintUnsignedHandlingModeEnum and assigns it to the BigintUnsignedHandlingMode field.
func (o *AvroConfig) SetBigintUnsignedHandlingMode(v BigintUnsignedHandlingModeEnum) {
	o.BigintUnsignedHandlingMode = &v
}

// GetConfluentSchemaRegistry returns the ConfluentSchemaRegistry field value if set, zero value otherwise.
func (o *AvroConfig) GetConfluentSchemaRegistry() ConfluentSchemaRegistry {
	if o == nil || IsNil(o.ConfluentSchemaRegistry) {
		var ret ConfluentSchemaRegistry
		return ret
	}
	return *o.ConfluentSchemaRegistry
}

// GetConfluentSchemaRegistryOk returns a tuple with the ConfluentSchemaRegistry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvroConfig) GetConfluentSchemaRegistryOk() (*ConfluentSchemaRegistry, bool) {
	if o == nil || IsNil(o.ConfluentSchemaRegistry) {
		return nil, false
	}
	return o.ConfluentSchemaRegistry, true
}

// HasConfluentSchemaRegistry returns a boolean if a field has been set.
func (o *AvroConfig) HasConfluentSchemaRegistry() bool {
	if o != nil && !IsNil(o.ConfluentSchemaRegistry) {
		return true
	}

	return false
}

// SetConfluentSchemaRegistry gets a reference to the given ConfluentSchemaRegistry and assigns it to the ConfluentSchemaRegistry field.
func (o *AvroConfig) SetConfluentSchemaRegistry(v ConfluentSchemaRegistry) {
	o.ConfluentSchemaRegistry = &v
}

// GetAwsGlueSchemaRegistry returns the AwsGlueSchemaRegistry field value if set, zero value otherwise.
func (o *AvroConfig) GetAwsGlueSchemaRegistry() GlueSchemaRegistry {
	if o == nil || IsNil(o.AwsGlueSchemaRegistry) {
		var ret GlueSchemaRegistry
		return ret
	}
	return *o.AwsGlueSchemaRegistry
}

// GetAwsGlueSchemaRegistryOk returns a tuple with the AwsGlueSchemaRegistry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvroConfig) GetAwsGlueSchemaRegistryOk() (*GlueSchemaRegistry, bool) {
	if o == nil || IsNil(o.AwsGlueSchemaRegistry) {
		return nil, false
	}
	return o.AwsGlueSchemaRegistry, true
}

// HasAwsGlueSchemaRegistry returns a boolean if a field has been set.
func (o *AvroConfig) HasAwsGlueSchemaRegistry() bool {
	if o != nil && !IsNil(o.AwsGlueSchemaRegistry) {
		return true
	}

	return false
}

// SetAwsGlueSchemaRegistry gets a reference to the given GlueSchemaRegistry and assigns it to the AwsGlueSchemaRegistry field.
func (o *AvroConfig) SetAwsGlueSchemaRegistry(v GlueSchemaRegistry) {
	o.AwsGlueSchemaRegistry = &v
}

func (o AvroConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AvroConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DecimalHandlingMode) {
		toSerialize["decimalHandlingMode"] = o.DecimalHandlingMode
	}
	if !IsNil(o.BigintUnsignedHandlingMode) {
		toSerialize["bigintUnsignedHandlingMode"] = o.BigintUnsignedHandlingMode
	}
	if !IsNil(o.ConfluentSchemaRegistry) {
		toSerialize["confluentSchemaRegistry"] = o.ConfluentSchemaRegistry
	}
	if !IsNil(o.AwsGlueSchemaRegistry) {
		toSerialize["awsGlueSchemaRegistry"] = o.AwsGlueSchemaRegistry
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AvroConfig) UnmarshalJSON(data []byte) (err error) {
	varAvroConfig := _AvroConfig{}

	err = json.Unmarshal(data, &varAvroConfig)

	if err != nil {
		return err
	}

	*o = AvroConfig(varAvroConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "decimalHandlingMode")
		delete(additionalProperties, "bigintUnsignedHandlingMode")
		delete(additionalProperties, "confluentSchemaRegistry")
		delete(additionalProperties, "awsGlueSchemaRegistry")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAvroConfig struct {
	value *AvroConfig
	isSet bool
}

func (v NullableAvroConfig) Get() *AvroConfig {
	return v.value
}

func (v *NullableAvroConfig) Set(val *AvroConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableAvroConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableAvroConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAvroConfig(val *AvroConfig) *NullableAvroConfig {
	return &NullableAvroConfig{value: val, isSet: true}
}

func (v NullableAvroConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAvroConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
