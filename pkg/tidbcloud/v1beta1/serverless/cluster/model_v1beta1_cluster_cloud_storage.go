/*
TiDB Cloud Serverless Open API

TiDB Cloud Serverless Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cluster

import (
	"encoding/json"
)

// V1beta1ClusterCloudStorage  - TiDB_CLOUD: TiDB Cloud's own cloud storage.  - S3: Amazon S3 cloud storage.  - GCS: Google Cloud Storage.  - AZURE_BLOB: Azure Blob Storage.  - OSS: Alibaba Cloud OSS.
type V1beta1ClusterCloudStorage string

// List of v1beta1ClusterCloudStorage
const (
	V1BETA1CLUSTERCLOUDSTORAGE_TI_DB_CLOUD V1beta1ClusterCloudStorage = "TiDB_CLOUD"
	V1BETA1CLUSTERCLOUDSTORAGE_S3          V1beta1ClusterCloudStorage = "S3"
	V1BETA1CLUSTERCLOUDSTORAGE_GCS         V1beta1ClusterCloudStorage = "GCS"
	V1BETA1CLUSTERCLOUDSTORAGE_AZURE_BLOB  V1beta1ClusterCloudStorage = "AZURE_BLOB"
	V1BETA1CLUSTERCLOUDSTORAGE_OSS         V1beta1ClusterCloudStorage = "OSS"
)

// All allowed values of V1beta1ClusterCloudStorage enum
var AllowedV1beta1ClusterCloudStorageEnumValues = []V1beta1ClusterCloudStorage{
	"TiDB_CLOUD",
	"S3",
	"GCS",
	"AZURE_BLOB",
	"OSS",
}

func (v *V1beta1ClusterCloudStorage) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V1beta1ClusterCloudStorage(value)
	for _, existing := range AllowedV1beta1ClusterCloudStorageEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = V1beta1ClusterCloudStorage(value)
	return nil
}

// NewV1beta1ClusterCloudStorageFromValue returns a pointer to a valid V1beta1ClusterCloudStorage for the value passed as argument
func NewV1beta1ClusterCloudStorageFromValue(v string) *V1beta1ClusterCloudStorage {
	ev := V1beta1ClusterCloudStorage(v)
	return &ev
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V1beta1ClusterCloudStorage) IsValid() bool {
	for _, existing := range AllowedV1beta1ClusterCloudStorageEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v1beta1ClusterCloudStorage value
func (v V1beta1ClusterCloudStorage) Ptr() *V1beta1ClusterCloudStorage {
	return &v
}

type NullableV1beta1ClusterCloudStorage struct {
	value *V1beta1ClusterCloudStorage
	isSet bool
}

func (v NullableV1beta1ClusterCloudStorage) Get() *V1beta1ClusterCloudStorage {
	return v.value
}

func (v *NullableV1beta1ClusterCloudStorage) Set(val *V1beta1ClusterCloudStorage) {
	v.value = val
	v.isSet = true
}

func (v NullableV1beta1ClusterCloudStorage) IsSet() bool {
	return v.isSet
}

func (v *NullableV1beta1ClusterCloudStorage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1beta1ClusterCloudStorage(val *V1beta1ClusterCloudStorage) *NullableV1beta1ClusterCloudStorage {
	return &NullableV1beta1ClusterCloudStorage{value: val, isSet: true}
}

func (v NullableV1beta1ClusterCloudStorage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1beta1ClusterCloudStorage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
