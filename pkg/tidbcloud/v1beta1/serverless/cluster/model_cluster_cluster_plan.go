/*
TiDB Cloud Serverless Open API

TiDB Cloud Serverless Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cluster

import (
	"encoding/json"
)

// ClusterClusterPlan the model 'ClusterClusterPlan'
type ClusterClusterPlan string

// List of ClusterClusterPlan
const (
	CLUSTERCLUSTERPLAN_STARTER   ClusterClusterPlan = "STARTER"
	CLUSTERCLUSTERPLAN_ESSENTIAL ClusterClusterPlan = "ESSENTIAL"
)

// All allowed values of ClusterClusterPlan enum
var AllowedClusterClusterPlanEnumValues = []ClusterClusterPlan{
	"STARTER",
	"ESSENTIAL",
}

func (v *ClusterClusterPlan) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ClusterClusterPlan(value)
	for _, existing := range AllowedClusterClusterPlanEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = ClusterClusterPlan(value)
	return nil
}

// NewClusterClusterPlanFromValue returns a pointer to a valid ClusterClusterPlan for the value passed as argument
func NewClusterClusterPlanFromValue(v string) *ClusterClusterPlan {
	ev := ClusterClusterPlan(v)
	return &ev
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ClusterClusterPlan) IsValid() bool {
	for _, existing := range AllowedClusterClusterPlanEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ClusterClusterPlan value
func (v ClusterClusterPlan) Ptr() *ClusterClusterPlan {
	return &v
}

type NullableClusterClusterPlan struct {
	value *ClusterClusterPlan
	isSet bool
}

func (v NullableClusterClusterPlan) Get() *ClusterClusterPlan {
	return v.value
}

func (v *NullableClusterClusterPlan) Set(val *ClusterClusterPlan) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterClusterPlan) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterClusterPlan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterClusterPlan(val *ClusterClusterPlan) *NullableClusterClusterPlan {
	return &NullableClusterClusterPlan{value: val, isSet: true}
}

func (v NullableClusterClusterPlan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterClusterPlan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
