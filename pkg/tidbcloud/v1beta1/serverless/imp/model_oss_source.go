/*
TiDB Cloud Serverless Open API

TiDB Cloud Serverless Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package imp

import (
	"encoding/json"
	"fmt"
)

// checks if the OSSSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OSSSource{}

// OSSSource struct for OSSSource
type OSSSource struct {
	// The OSS compatible URI of the import source.
	Uri string `json:"uri"`
	// The auth method of the import source.
	AuthType ImportOSSAuthTypeEnum `json:"authType"`
	// The access key.
	AccessKey            *OSSSourceAccessKey `json:"accessKey,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OSSSource OSSSource

// NewOSSSource instantiates a new OSSSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOSSSource(uri string, authType ImportOSSAuthTypeEnum) *OSSSource {
	this := OSSSource{}
	this.Uri = uri
	this.AuthType = authType
	return &this
}

// NewOSSSourceWithDefaults instantiates a new OSSSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOSSSourceWithDefaults() *OSSSource {
	this := OSSSource{}
	return &this
}

// GetUri returns the Uri field value
func (o *OSSSource) GetUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uri
}

// GetUriOk returns a tuple with the Uri field value
// and a boolean to check if the value has been set.
func (o *OSSSource) GetUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uri, true
}

// SetUri sets field value
func (o *OSSSource) SetUri(v string) {
	o.Uri = v
}

// GetAuthType returns the AuthType field value
func (o *OSSSource) GetAuthType() ImportOSSAuthTypeEnum {
	if o == nil {
		var ret ImportOSSAuthTypeEnum
		return ret
	}

	return o.AuthType
}

// GetAuthTypeOk returns a tuple with the AuthType field value
// and a boolean to check if the value has been set.
func (o *OSSSource) GetAuthTypeOk() (*ImportOSSAuthTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthType, true
}

// SetAuthType sets field value
func (o *OSSSource) SetAuthType(v ImportOSSAuthTypeEnum) {
	o.AuthType = v
}

// GetAccessKey returns the AccessKey field value if set, zero value otherwise.
func (o *OSSSource) GetAccessKey() OSSSourceAccessKey {
	if o == nil || IsNil(o.AccessKey) {
		var ret OSSSourceAccessKey
		return ret
	}
	return *o.AccessKey
}

// GetAccessKeyOk returns a tuple with the AccessKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OSSSource) GetAccessKeyOk() (*OSSSourceAccessKey, bool) {
	if o == nil || IsNil(o.AccessKey) {
		return nil, false
	}
	return o.AccessKey, true
}

// HasAccessKey returns a boolean if a field has been set.
func (o *OSSSource) HasAccessKey() bool {
	if o != nil && !IsNil(o.AccessKey) {
		return true
	}

	return false
}

// SetAccessKey gets a reference to the given OSSSourceAccessKey and assigns it to the AccessKey field.
func (o *OSSSource) SetAccessKey(v OSSSourceAccessKey) {
	o.AccessKey = &v
}

func (o OSSSource) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OSSSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["uri"] = o.Uri
	toSerialize["authType"] = o.AuthType
	if !IsNil(o.AccessKey) {
		toSerialize["accessKey"] = o.AccessKey
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OSSSource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"uri",
		"authType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOSSSource := _OSSSource{}

	err = json.Unmarshal(data, &varOSSSource)

	if err != nil {
		return err
	}

	*o = OSSSource(varOSSSource)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "uri")
		delete(additionalProperties, "authType")
		delete(additionalProperties, "accessKey")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOSSSource struct {
	value *OSSSource
	isSet bool
}

func (v NullableOSSSource) Get() *OSSSource {
	return v.value
}

func (v *NullableOSSSource) Set(val *OSSSource) {
	v.value = val
	v.isSet = true
}

func (v NullableOSSSource) IsSet() bool {
	return v.isSet
}

func (v *NullableOSSSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOSSSource(val *OSSSource) *NullableOSSSource {
	return &NullableOSSSource{value: val, isSet: true}
}

func (v NullableOSSSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOSSSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
