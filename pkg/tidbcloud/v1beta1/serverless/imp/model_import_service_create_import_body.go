/*
TiDB Cloud Serverless Open API

TiDB Cloud Serverless Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package imp

import (
	"encoding/json"
	"fmt"
)

// checks if the ImportServiceCreateImportBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImportServiceCreateImportBody{}

// ImportServiceCreateImportBody struct for ImportServiceCreateImportBody
type ImportServiceCreateImportBody struct {
	// The options of the import.
	ImportOptions ImportOptions `json:"importOptions"`
	// The source of the import.
	Source               ImportSource `json:"source"`
	AdditionalProperties map[string]interface{}
}

type _ImportServiceCreateImportBody ImportServiceCreateImportBody

// NewImportServiceCreateImportBody instantiates a new ImportServiceCreateImportBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportServiceCreateImportBody(importOptions ImportOptions, source ImportSource) *ImportServiceCreateImportBody {
	this := ImportServiceCreateImportBody{}
	this.ImportOptions = importOptions
	this.Source = source
	return &this
}

// NewImportServiceCreateImportBodyWithDefaults instantiates a new ImportServiceCreateImportBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportServiceCreateImportBodyWithDefaults() *ImportServiceCreateImportBody {
	this := ImportServiceCreateImportBody{}
	return &this
}

// GetImportOptions returns the ImportOptions field value
func (o *ImportServiceCreateImportBody) GetImportOptions() ImportOptions {
	if o == nil {
		var ret ImportOptions
		return ret
	}

	return o.ImportOptions
}

// GetImportOptionsOk returns a tuple with the ImportOptions field value
// and a boolean to check if the value has been set.
func (o *ImportServiceCreateImportBody) GetImportOptionsOk() (*ImportOptions, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImportOptions, true
}

// SetImportOptions sets field value
func (o *ImportServiceCreateImportBody) SetImportOptions(v ImportOptions) {
	o.ImportOptions = v
}

// GetSource returns the Source field value
func (o *ImportServiceCreateImportBody) GetSource() ImportSource {
	if o == nil {
		var ret ImportSource
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *ImportServiceCreateImportBody) GetSourceOk() (*ImportSource, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *ImportServiceCreateImportBody) SetSource(v ImportSource) {
	o.Source = v
}

func (o ImportServiceCreateImportBody) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImportServiceCreateImportBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["importOptions"] = o.ImportOptions
	toSerialize["source"] = o.Source

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ImportServiceCreateImportBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"importOptions",
		"source",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varImportServiceCreateImportBody := _ImportServiceCreateImportBody{}

	err = json.Unmarshal(data, &varImportServiceCreateImportBody)

	if err != nil {
		return err
	}

	*o = ImportServiceCreateImportBody(varImportServiceCreateImportBody)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "importOptions")
		delete(additionalProperties, "source")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableImportServiceCreateImportBody struct {
	value *ImportServiceCreateImportBody
	isSet bool
}

func (v NullableImportServiceCreateImportBody) Get() *ImportServiceCreateImportBody {
	return v.value
}

func (v *NullableImportServiceCreateImportBody) Set(val *ImportServiceCreateImportBody) {
	v.value = val
	v.isSet = true
}

func (v NullableImportServiceCreateImportBody) IsSet() bool {
	return v.isSet
}

func (v *NullableImportServiceCreateImportBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportServiceCreateImportBody(val *ImportServiceCreateImportBody) *NullableImportServiceCreateImportBody {
	return &NullableImportServiceCreateImportBody{value: val, isSet: true}
}

func (v NullableImportServiceCreateImportBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportServiceCreateImportBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
