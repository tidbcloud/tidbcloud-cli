/*
TiDB Cloud Serverless Open API

TiDB Cloud Serverless Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package imp

import (
	"encoding/json"
)

// ImportS3AuthTypeEnum  - ROLE_ARN: The access method is role arn.  - ACCESS_KEY: The access method is access key.
type ImportS3AuthTypeEnum string

// List of ImportS3AuthType.Enum
const (
	IMPORTS3AUTHTYPEENUM_ROLE_ARN   ImportS3AuthTypeEnum = "ROLE_ARN"
	IMPORTS3AUTHTYPEENUM_ACCESS_KEY ImportS3AuthTypeEnum = "ACCESS_KEY"

	// Unknown value for handling new enum values gracefully
	ImportS3AuthTypeEnum_UNKNOWN ImportS3AuthTypeEnum = "unknown"
)

// All allowed values of ImportS3AuthTypeEnum enum
var AllowedImportS3AuthTypeEnumEnumValues = []ImportS3AuthTypeEnum{
	"ROLE_ARN",
	"ACCESS_KEY",
	ImportS3AuthTypeEnum_UNKNOWN, // Include unknown
}

func (v *ImportS3AuthTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ImportS3AuthTypeEnum(value)
	for _, existing := range AllowedImportS3AuthTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	// Instead of returning an error, assign UNKNOWN value
	*v = ImportS3AuthTypeEnum_UNKNOWN
	return nil
}

// NewImportS3AuthTypeEnumFromValue returns a pointer to a valid ImportS3AuthTypeEnum
// for the value passed as argument, or UNKNOWN if the value is not in the enum list
func NewImportS3AuthTypeEnumFromValue(v string) *ImportS3AuthTypeEnum {
	ev := ImportS3AuthTypeEnum(v)
	if ev.IsValid() {
		return &ev
	}
	unknown := ImportS3AuthTypeEnum_UNKNOWN
	return &unknown
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ImportS3AuthTypeEnum) IsValid() bool {
	for _, existing := range AllowedImportS3AuthTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ImportS3AuthType.Enum value
func (v ImportS3AuthTypeEnum) Ptr() *ImportS3AuthTypeEnum {
	return &v
}

type NullableImportS3AuthTypeEnum struct {
	value *ImportS3AuthTypeEnum
	isSet bool
}

func (v NullableImportS3AuthTypeEnum) Get() *ImportS3AuthTypeEnum {
	return v.value
}

func (v *NullableImportS3AuthTypeEnum) Set(val *ImportS3AuthTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableImportS3AuthTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableImportS3AuthTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportS3AuthTypeEnum(val *ImportS3AuthTypeEnum) *NullableImportS3AuthTypeEnum {
	return &NullableImportS3AuthTypeEnum{value: val, isSet: true}
}

func (v NullableImportS3AuthTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportS3AuthTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
