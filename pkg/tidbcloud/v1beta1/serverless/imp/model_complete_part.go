/*
TiDB Cloud Serverless Open API

TiDB Cloud Serverless Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package imp

import (
	"encoding/json"
	"fmt"
)

// checks if the CompletePart type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompletePart{}

// CompletePart struct for CompletePart
type CompletePart struct {
	PartNumber           int32  `json:"partNumber"`
	Etag                 string `json:"etag"`
	AdditionalProperties map[string]interface{}
}

type _CompletePart CompletePart

// NewCompletePart instantiates a new CompletePart object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompletePart(partNumber int32, etag string) *CompletePart {
	this := CompletePart{}
	this.PartNumber = partNumber
	this.Etag = etag
	return &this
}

// NewCompletePartWithDefaults instantiates a new CompletePart object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompletePartWithDefaults() *CompletePart {
	this := CompletePart{}
	return &this
}

// GetPartNumber returns the PartNumber field value
func (o *CompletePart) GetPartNumber() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PartNumber
}

// GetPartNumberOk returns a tuple with the PartNumber field value
// and a boolean to check if the value has been set.
func (o *CompletePart) GetPartNumberOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PartNumber, true
}

// SetPartNumber sets field value
func (o *CompletePart) SetPartNumber(v int32) {
	o.PartNumber = v
}

// GetEtag returns the Etag field value
func (o *CompletePart) GetEtag() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Etag
}

// GetEtagOk returns a tuple with the Etag field value
// and a boolean to check if the value has been set.
func (o *CompletePart) GetEtagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Etag, true
}

// SetEtag sets field value
func (o *CompletePart) SetEtag(v string) {
	o.Etag = v
}

func (o CompletePart) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompletePart) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["partNumber"] = o.PartNumber
	toSerialize["etag"] = o.Etag

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CompletePart) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"partNumber",
		"etag",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCompletePart := _CompletePart{}

	err = json.Unmarshal(data, &varCompletePart)

	if err != nil {
		return err
	}

	*o = CompletePart(varCompletePart)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "partNumber")
		delete(additionalProperties, "etag")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCompletePart struct {
	value *CompletePart
	isSet bool
}

func (v NullableCompletePart) Get() *CompletePart {
	return v.value
}

func (v *NullableCompletePart) Set(val *CompletePart) {
	v.value = val
	v.isSet = true
}

func (v NullableCompletePart) IsSet() bool {
	return v.isSet
}

func (v *NullableCompletePart) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompletePart(val *CompletePart) *NullableCompletePart {
	return &NullableCompletePart{value: val, isSet: true}
}

func (v NullableCompletePart) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompletePart) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
