/*
TiDB Cloud Serverless Export Open API

TiDB Cloud Serverless Export Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package export

import (
	"encoding/json"
	"fmt"
)

// ExportStateEnum Output Only. Export State.   - RUNNING: The export job is being created.  - SUCCEEDED: The export job is success.  - FAILED: The export job is failed.  - CANCELED: The export job is canceled.  - DELETED: The export job is deleted.  - EXPIRED: The export is expired, only local export will be expired.
type ExportStateEnum string

// List of ExportState.Enum
const (
	EXPORTSTATEENUM_RUNNING   ExportStateEnum = "RUNNING"
	EXPORTSTATEENUM_SUCCEEDED ExportStateEnum = "SUCCEEDED"
	EXPORTSTATEENUM_FAILED    ExportStateEnum = "FAILED"
	EXPORTSTATEENUM_CANCELED  ExportStateEnum = "CANCELED"
	EXPORTSTATEENUM_DELETED   ExportStateEnum = "DELETED"
	EXPORTSTATEENUM_EXPIRED   ExportStateEnum = "EXPIRED"

	// Unknown value for handling new enum values gracefully
	ExportStateEnum_UNKNOWN ExportStateEnum = "unknown"
)

// All allowed values of ExportStateEnum enum
var AllowedExportStateEnumEnumValues = []ExportStateEnum{
	"RUNNING",
	"SUCCEEDED",
	"FAILED",
	"CANCELED",
	"DELETED",
	"EXPIRED",
	ExportStateEnum_UNKNOWN, // Include unknown
}

func (v *ExportStateEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ExportStateEnum(value)
	for _, existing := range AllowedExportStateEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	// Instead of returning an error, assign UNKNOWN value
	*v = ExportStateEnum_UNKNOWN
	return nil
}

// NewExportStateEnumFromValue returns a pointer to a valid ExportStateEnum
// for the value passed as argument, or UNKNOWN if the value is not in the enum list
func NewExportStateEnumFromValue(v string) *ExportStateEnum {
	ev := ExportStateEnum(v)
	if ev.IsValid() {
		return &ev
	}
	unknown := ExportStateEnum_UNKNOWN
	return &unknown
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ExportStateEnum) IsValid() bool {
	for _, existing := range AllowedExportStateEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ExportState.Enum value
func (v ExportStateEnum) Ptr() *ExportStateEnum {
	return &v
}

type NullableExportStateEnum struct {
	value *ExportStateEnum
	isSet bool
}

func (v NullableExportStateEnum) Get() *ExportStateEnum {
	return v.value
}

func (v *NullableExportStateEnum) Set(val *ExportStateEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableExportStateEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableExportStateEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportStateEnum(val *ExportStateEnum) *NullableExportStateEnum {
	return &NullableExportStateEnum{value: val, isSet: true}
}

func (v NullableExportStateEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportStateEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
