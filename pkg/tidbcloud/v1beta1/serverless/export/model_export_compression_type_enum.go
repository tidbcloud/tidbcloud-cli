/*
TiDB Cloud Serverless Export Open API

TiDB Cloud Serverless Export Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package export

import (
	"encoding/json"
	"fmt"
)

// ExportCompressionTypeEnum  - GZIP: Gzip compression.  - SNAPPY: Snappy compression.  - ZSTD: Zstd compression.  - NONE: No compression.
type ExportCompressionTypeEnum string

// List of ExportCompressionType.Enum
const (
	EXPORTCOMPRESSIONTYPEENUM_GZIP   ExportCompressionTypeEnum = "GZIP"
	EXPORTCOMPRESSIONTYPEENUM_SNAPPY ExportCompressionTypeEnum = "SNAPPY"
	EXPORTCOMPRESSIONTYPEENUM_ZSTD   ExportCompressionTypeEnum = "ZSTD"
	EXPORTCOMPRESSIONTYPEENUM_NONE   ExportCompressionTypeEnum = "NONE"
)

// All allowed values of ExportCompressionTypeEnum enum
var AllowedExportCompressionTypeEnumEnumValues = []ExportCompressionTypeEnum{
	"GZIP",
	"SNAPPY",
	"ZSTD",
	"NONE",
}

func (v *ExportCompressionTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ExportCompressionTypeEnum(value)
	for _, existing := range AllowedExportCompressionTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ExportCompressionTypeEnum", value)
}

// NewExportCompressionTypeEnumFromValue returns a pointer to a valid ExportCompressionTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewExportCompressionTypeEnumFromValue(v string) (*ExportCompressionTypeEnum, error) {
	ev := ExportCompressionTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ExportCompressionTypeEnum: valid values are %v", v, AllowedExportCompressionTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ExportCompressionTypeEnum) IsValid() bool {
	for _, existing := range AllowedExportCompressionTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ExportCompressionType.Enum value
func (v ExportCompressionTypeEnum) Ptr() *ExportCompressionTypeEnum {
	return &v
}

type NullableExportCompressionTypeEnum struct {
	value *ExportCompressionTypeEnum
	isSet bool
}

func (v NullableExportCompressionTypeEnum) Get() *ExportCompressionTypeEnum {
	return v.value
}

func (v *NullableExportCompressionTypeEnum) Set(val *ExportCompressionTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableExportCompressionTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableExportCompressionTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportCompressionTypeEnum(val *ExportCompressionTypeEnum) *NullableExportCompressionTypeEnum {
	return &NullableExportCompressionTypeEnum{value: val, isSet: true}
}

func (v NullableExportCompressionTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportCompressionTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
