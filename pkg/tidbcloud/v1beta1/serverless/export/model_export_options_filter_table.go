/*
TiDB Cloud Serverless Export Open API

TiDB Cloud Serverless Export Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package export

import (
	"encoding/json"
)

// checks if the ExportOptionsFilterTable type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExportOptionsFilterTable{}

// ExportOptionsFilterTable struct for ExportOptionsFilterTable
type ExportOptionsFilterTable struct {
	// Optional. The table-filter expressions.
	Patterns []string `json:"patterns,omitempty"`
	// Optional. Export only selected records.
	Where                *string `json:"where,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ExportOptionsFilterTable ExportOptionsFilterTable

// NewExportOptionsFilterTable instantiates a new ExportOptionsFilterTable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportOptionsFilterTable() *ExportOptionsFilterTable {
	this := ExportOptionsFilterTable{}
	return &this
}

// NewExportOptionsFilterTableWithDefaults instantiates a new ExportOptionsFilterTable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportOptionsFilterTableWithDefaults() *ExportOptionsFilterTable {
	this := ExportOptionsFilterTable{}
	return &this
}

// GetPatterns returns the Patterns field value if set, zero value otherwise.
func (o *ExportOptionsFilterTable) GetPatterns() []string {
	if o == nil || IsNil(o.Patterns) {
		var ret []string
		return ret
	}
	return o.Patterns
}

// GetPatternsOk returns a tuple with the Patterns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportOptionsFilterTable) GetPatternsOk() ([]string, bool) {
	if o == nil || IsNil(o.Patterns) {
		return nil, false
	}
	return o.Patterns, true
}

// HasPatterns returns a boolean if a field has been set.
func (o *ExportOptionsFilterTable) HasPatterns() bool {
	if o != nil && !IsNil(o.Patterns) {
		return true
	}

	return false
}

// SetPatterns gets a reference to the given []string and assigns it to the Patterns field.
func (o *ExportOptionsFilterTable) SetPatterns(v []string) {
	o.Patterns = v
}

// GetWhere returns the Where field value if set, zero value otherwise.
func (o *ExportOptionsFilterTable) GetWhere() string {
	if o == nil || IsNil(o.Where) {
		var ret string
		return ret
	}
	return *o.Where
}

// GetWhereOk returns a tuple with the Where field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportOptionsFilterTable) GetWhereOk() (*string, bool) {
	if o == nil || IsNil(o.Where) {
		return nil, false
	}
	return o.Where, true
}

// HasWhere returns a boolean if a field has been set.
func (o *ExportOptionsFilterTable) HasWhere() bool {
	if o != nil && !IsNil(o.Where) {
		return true
	}

	return false
}

// SetWhere gets a reference to the given string and assigns it to the Where field.
func (o *ExportOptionsFilterTable) SetWhere(v string) {
	o.Where = &v
}

func (o ExportOptionsFilterTable) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExportOptionsFilterTable) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Patterns) {
		toSerialize["patterns"] = o.Patterns
	}
	if !IsNil(o.Where) {
		toSerialize["where"] = o.Where
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ExportOptionsFilterTable) UnmarshalJSON(data []byte) (err error) {
	varExportOptionsFilterTable := _ExportOptionsFilterTable{}

	err = json.Unmarshal(data, &varExportOptionsFilterTable)

	if err != nil {
		return err
	}

	*o = ExportOptionsFilterTable(varExportOptionsFilterTable)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "patterns")
		delete(additionalProperties, "where")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableExportOptionsFilterTable struct {
	value *ExportOptionsFilterTable
	isSet bool
}

func (v NullableExportOptionsFilterTable) Get() *ExportOptionsFilterTable {
	return v.value
}

func (v *NullableExportOptionsFilterTable) Set(val *ExportOptionsFilterTable) {
	v.value = val
	v.isSet = true
}

func (v NullableExportOptionsFilterTable) IsSet() bool {
	return v.isSet
}

func (v *NullableExportOptionsFilterTable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportOptionsFilterTable(val *ExportOptionsFilterTable) *NullableExportOptionsFilterTable {
	return &NullableExportOptionsFilterTable{value: val, isSet: true}
}

func (v NullableExportOptionsFilterTable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportOptionsFilterTable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
