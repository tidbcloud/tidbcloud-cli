/*
TiDB Cloud Serverless Export Open API

TiDB Cloud Serverless Export Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package export

import (
	"encoding/json"
	"fmt"
)

// checks if the GCSTarget type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GCSTarget{}

// GCSTarget struct for GCSTarget
type GCSTarget struct {
	// The GCS URI of the export target.
	Uri string `json:"uri"`
	// The auth method of the export target.
	AuthType             ExportGcsAuthTypeEnum `json:"authType"`
	ServiceAccountKey    *string               `json:"serviceAccountKey,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GCSTarget GCSTarget

// NewGCSTarget instantiates a new GCSTarget object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGCSTarget(uri string, authType ExportGcsAuthTypeEnum) *GCSTarget {
	this := GCSTarget{}
	this.Uri = uri
	this.AuthType = authType
	return &this
}

// NewGCSTargetWithDefaults instantiates a new GCSTarget object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGCSTargetWithDefaults() *GCSTarget {
	this := GCSTarget{}
	return &this
}

// GetUri returns the Uri field value
func (o *GCSTarget) GetUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uri
}

// GetUriOk returns a tuple with the Uri field value
// and a boolean to check if the value has been set.
func (o *GCSTarget) GetUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uri, true
}

// SetUri sets field value
func (o *GCSTarget) SetUri(v string) {
	o.Uri = v
}

// GetAuthType returns the AuthType field value
func (o *GCSTarget) GetAuthType() ExportGcsAuthTypeEnum {
	if o == nil {
		var ret ExportGcsAuthTypeEnum
		return ret
	}

	return o.AuthType
}

// GetAuthTypeOk returns a tuple with the AuthType field value
// and a boolean to check if the value has been set.
func (o *GCSTarget) GetAuthTypeOk() (*ExportGcsAuthTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthType, true
}

// SetAuthType sets field value
func (o *GCSTarget) SetAuthType(v ExportGcsAuthTypeEnum) {
	o.AuthType = v
}

// GetServiceAccountKey returns the ServiceAccountKey field value if set, zero value otherwise.
func (o *GCSTarget) GetServiceAccountKey() string {
	if o == nil || IsNil(o.ServiceAccountKey) {
		var ret string
		return ret
	}
	return *o.ServiceAccountKey
}

// GetServiceAccountKeyOk returns a tuple with the ServiceAccountKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GCSTarget) GetServiceAccountKeyOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceAccountKey) {
		return nil, false
	}
	return o.ServiceAccountKey, true
}

// HasServiceAccountKey returns a boolean if a field has been set.
func (o *GCSTarget) HasServiceAccountKey() bool {
	if o != nil && !IsNil(o.ServiceAccountKey) {
		return true
	}

	return false
}

// SetServiceAccountKey gets a reference to the given string and assigns it to the ServiceAccountKey field.
func (o *GCSTarget) SetServiceAccountKey(v string) {
	o.ServiceAccountKey = &v
}

func (o GCSTarget) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GCSTarget) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["uri"] = o.Uri
	toSerialize["authType"] = o.AuthType
	if !IsNil(o.ServiceAccountKey) {
		toSerialize["serviceAccountKey"] = o.ServiceAccountKey
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GCSTarget) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"uri",
		"authType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGCSTarget := _GCSTarget{}

	err = json.Unmarshal(data, &varGCSTarget)

	if err != nil {
		return err
	}

	*o = GCSTarget(varGCSTarget)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "uri")
		delete(additionalProperties, "authType")
		delete(additionalProperties, "serviceAccountKey")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGCSTarget struct {
	value *GCSTarget
	isSet bool
}

func (v NullableGCSTarget) Get() *GCSTarget {
	return v.value
}

func (v *NullableGCSTarget) Set(val *GCSTarget) {
	v.value = val
	v.isSet = true
}

func (v NullableGCSTarget) IsSet() bool {
	return v.isSet
}

func (v *NullableGCSTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGCSTarget(val *GCSTarget) *NullableGCSTarget {
	return &NullableGCSTarget{value: val, isSet: true}
}

func (v NullableGCSTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGCSTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
