/*
TiDB Cloud Serverless Export Open API

TiDB Cloud Serverless Export Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package export

import (
	"encoding/json"
)

// checks if the ExportOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExportOptions{}

// ExportOptions struct for ExportOptions
type ExportOptions struct {
	// Optional. The exported file type. Default: CSV.
	FileType *ExportFileTypeEnum `json:"fileType,omitempty"`
	Database *string             `json:"database,omitempty"`
	Table    *string             `json:"table,omitempty"`
	// Optional. The compression of the export. Default is GZIP.
	Compression *ExportCompressionTypeEnum `json:"compression,omitempty"`
	// Optional. The filter of the export. Default is whole cluster.
	Filter *ExportOptionsFilter `json:"filter,omitempty"`
	// Optional. The format of the csv.
	CsvFormat *ExportOptionsCSVFormat `json:"csvFormat,omitempty"`
	// Optional. The format of the parquet.
	ParquetFormat        *ExportOptionsParquetFormat `json:"parquetFormat,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ExportOptions ExportOptions

// NewExportOptions instantiates a new ExportOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportOptions() *ExportOptions {
	this := ExportOptions{}
	return &this
}

// NewExportOptionsWithDefaults instantiates a new ExportOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportOptionsWithDefaults() *ExportOptions {
	this := ExportOptions{}
	return &this
}

// GetFileType returns the FileType field value if set, zero value otherwise.
func (o *ExportOptions) GetFileType() ExportFileTypeEnum {
	if o == nil || IsNil(o.FileType) {
		var ret ExportFileTypeEnum
		return ret
	}
	return *o.FileType
}

// GetFileTypeOk returns a tuple with the FileType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportOptions) GetFileTypeOk() (*ExportFileTypeEnum, bool) {
	if o == nil || IsNil(o.FileType) {
		return nil, false
	}
	return o.FileType, true
}

// HasFileType returns a boolean if a field has been set.
func (o *ExportOptions) HasFileType() bool {
	if o != nil && !IsNil(o.FileType) {
		return true
	}

	return false
}

// SetFileType gets a reference to the given ExportFileTypeEnum and assigns it to the FileType field.
func (o *ExportOptions) SetFileType(v ExportFileTypeEnum) {
	o.FileType = &v
}

// GetDatabase returns the Database field value if set, zero value otherwise.
func (o *ExportOptions) GetDatabase() string {
	if o == nil || IsNil(o.Database) {
		var ret string
		return ret
	}
	return *o.Database
}

// GetDatabaseOk returns a tuple with the Database field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportOptions) GetDatabaseOk() (*string, bool) {
	if o == nil || IsNil(o.Database) {
		return nil, false
	}
	return o.Database, true
}

// HasDatabase returns a boolean if a field has been set.
func (o *ExportOptions) HasDatabase() bool {
	if o != nil && !IsNil(o.Database) {
		return true
	}

	return false
}

// SetDatabase gets a reference to the given string and assigns it to the Database field.
func (o *ExportOptions) SetDatabase(v string) {
	o.Database = &v
}

// GetTable returns the Table field value if set, zero value otherwise.
func (o *ExportOptions) GetTable() string {
	if o == nil || IsNil(o.Table) {
		var ret string
		return ret
	}
	return *o.Table
}

// GetTableOk returns a tuple with the Table field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportOptions) GetTableOk() (*string, bool) {
	if o == nil || IsNil(o.Table) {
		return nil, false
	}
	return o.Table, true
}

// HasTable returns a boolean if a field has been set.
func (o *ExportOptions) HasTable() bool {
	if o != nil && !IsNil(o.Table) {
		return true
	}

	return false
}

// SetTable gets a reference to the given string and assigns it to the Table field.
func (o *ExportOptions) SetTable(v string) {
	o.Table = &v
}

// GetCompression returns the Compression field value if set, zero value otherwise.
func (o *ExportOptions) GetCompression() ExportCompressionTypeEnum {
	if o == nil || IsNil(o.Compression) {
		var ret ExportCompressionTypeEnum
		return ret
	}
	return *o.Compression
}

// GetCompressionOk returns a tuple with the Compression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportOptions) GetCompressionOk() (*ExportCompressionTypeEnum, bool) {
	if o == nil || IsNil(o.Compression) {
		return nil, false
	}
	return o.Compression, true
}

// HasCompression returns a boolean if a field has been set.
func (o *ExportOptions) HasCompression() bool {
	if o != nil && !IsNil(o.Compression) {
		return true
	}

	return false
}

// SetCompression gets a reference to the given ExportCompressionTypeEnum and assigns it to the Compression field.
func (o *ExportOptions) SetCompression(v ExportCompressionTypeEnum) {
	o.Compression = &v
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *ExportOptions) GetFilter() ExportOptionsFilter {
	if o == nil || IsNil(o.Filter) {
		var ret ExportOptionsFilter
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportOptions) GetFilterOk() (*ExportOptionsFilter, bool) {
	if o == nil || IsNil(o.Filter) {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *ExportOptions) HasFilter() bool {
	if o != nil && !IsNil(o.Filter) {
		return true
	}

	return false
}

// SetFilter gets a reference to the given ExportOptionsFilter and assigns it to the Filter field.
func (o *ExportOptions) SetFilter(v ExportOptionsFilter) {
	o.Filter = &v
}

// GetCsvFormat returns the CsvFormat field value if set, zero value otherwise.
func (o *ExportOptions) GetCsvFormat() ExportOptionsCSVFormat {
	if o == nil || IsNil(o.CsvFormat) {
		var ret ExportOptionsCSVFormat
		return ret
	}
	return *o.CsvFormat
}

// GetCsvFormatOk returns a tuple with the CsvFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportOptions) GetCsvFormatOk() (*ExportOptionsCSVFormat, bool) {
	if o == nil || IsNil(o.CsvFormat) {
		return nil, false
	}
	return o.CsvFormat, true
}

// HasCsvFormat returns a boolean if a field has been set.
func (o *ExportOptions) HasCsvFormat() bool {
	if o != nil && !IsNil(o.CsvFormat) {
		return true
	}

	return false
}

// SetCsvFormat gets a reference to the given ExportOptionsCSVFormat and assigns it to the CsvFormat field.
func (o *ExportOptions) SetCsvFormat(v ExportOptionsCSVFormat) {
	o.CsvFormat = &v
}

// GetParquetFormat returns the ParquetFormat field value if set, zero value otherwise.
func (o *ExportOptions) GetParquetFormat() ExportOptionsParquetFormat {
	if o == nil || IsNil(o.ParquetFormat) {
		var ret ExportOptionsParquetFormat
		return ret
	}
	return *o.ParquetFormat
}

// GetParquetFormatOk returns a tuple with the ParquetFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportOptions) GetParquetFormatOk() (*ExportOptionsParquetFormat, bool) {
	if o == nil || IsNil(o.ParquetFormat) {
		return nil, false
	}
	return o.ParquetFormat, true
}

// HasParquetFormat returns a boolean if a field has been set.
func (o *ExportOptions) HasParquetFormat() bool {
	if o != nil && !IsNil(o.ParquetFormat) {
		return true
	}

	return false
}

// SetParquetFormat gets a reference to the given ExportOptionsParquetFormat and assigns it to the ParquetFormat field.
func (o *ExportOptions) SetParquetFormat(v ExportOptionsParquetFormat) {
	o.ParquetFormat = &v
}

func (o ExportOptions) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExportOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FileType) {
		toSerialize["fileType"] = o.FileType
	}
	if !IsNil(o.Database) {
		toSerialize["database"] = o.Database
	}
	if !IsNil(o.Table) {
		toSerialize["table"] = o.Table
	}
	if !IsNil(o.Compression) {
		toSerialize["compression"] = o.Compression
	}
	if !IsNil(o.Filter) {
		toSerialize["filter"] = o.Filter
	}
	if !IsNil(o.CsvFormat) {
		toSerialize["csvFormat"] = o.CsvFormat
	}
	if !IsNil(o.ParquetFormat) {
		toSerialize["parquetFormat"] = o.ParquetFormat
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ExportOptions) UnmarshalJSON(data []byte) (err error) {
	varExportOptions := _ExportOptions{}

	err = json.Unmarshal(data, &varExportOptions)

	if err != nil {
		return err
	}

	*o = ExportOptions(varExportOptions)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "fileType")
		delete(additionalProperties, "database")
		delete(additionalProperties, "table")
		delete(additionalProperties, "compression")
		delete(additionalProperties, "filter")
		delete(additionalProperties, "csvFormat")
		delete(additionalProperties, "parquetFormat")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableExportOptions struct {
	value *ExportOptions
	isSet bool
}

func (v NullableExportOptions) Get() *ExportOptions {
	return v.value
}

func (v *NullableExportOptions) Set(val *ExportOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableExportOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableExportOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportOptions(val *ExportOptions) *NullableExportOptions {
	return &NullableExportOptions{value: val, isSet: true}
}

func (v NullableExportOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
