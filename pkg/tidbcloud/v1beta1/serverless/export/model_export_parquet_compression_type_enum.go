/*
TiDB Cloud Serverless Export Open API

TiDB Cloud Serverless Export Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package export

import (
	"encoding/json"
	"fmt"
)

// ExportParquetCompressionTypeEnum  - GZIP: The parquet compression type is GZIP.  - SNAPPY: The parquet compression type is SNAPPY.  - ZSTD: The parquet compression type is ZSTD.  - NONE: No compression.
type ExportParquetCompressionTypeEnum string

// List of ExportParquetCompressionType.Enum
const (
	EXPORTPARQUETCOMPRESSIONTYPEENUM_GZIP   ExportParquetCompressionTypeEnum = "GZIP"
	EXPORTPARQUETCOMPRESSIONTYPEENUM_SNAPPY ExportParquetCompressionTypeEnum = "SNAPPY"
	EXPORTPARQUETCOMPRESSIONTYPEENUM_ZSTD   ExportParquetCompressionTypeEnum = "ZSTD"
	EXPORTPARQUETCOMPRESSIONTYPEENUM_NONE   ExportParquetCompressionTypeEnum = "NONE"
)

// All allowed values of ExportParquetCompressionTypeEnum enum
var AllowedExportParquetCompressionTypeEnumEnumValues = []ExportParquetCompressionTypeEnum{
	"GZIP",
	"SNAPPY",
	"ZSTD",
	"NONE",
}

func (v *ExportParquetCompressionTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ExportParquetCompressionTypeEnum(value)
	for _, existing := range AllowedExportParquetCompressionTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ExportParquetCompressionTypeEnum", value)
}

// NewExportParquetCompressionTypeEnumFromValue returns a pointer to a valid ExportParquetCompressionTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewExportParquetCompressionTypeEnumFromValue(v string) (*ExportParquetCompressionTypeEnum, error) {
	ev := ExportParquetCompressionTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ExportParquetCompressionTypeEnum: valid values are %v", v, AllowedExportParquetCompressionTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ExportParquetCompressionTypeEnum) IsValid() bool {
	for _, existing := range AllowedExportParquetCompressionTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ExportParquetCompressionType.Enum value
func (v ExportParquetCompressionTypeEnum) Ptr() *ExportParquetCompressionTypeEnum {
	return &v
}

type NullableExportParquetCompressionTypeEnum struct {
	value *ExportParquetCompressionTypeEnum
	isSet bool
}

func (v NullableExportParquetCompressionTypeEnum) Get() *ExportParquetCompressionTypeEnum {
	return v.value
}

func (v *NullableExportParquetCompressionTypeEnum) Set(val *ExportParquetCompressionTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableExportParquetCompressionTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableExportParquetCompressionTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportParquetCompressionTypeEnum(val *ExportParquetCompressionTypeEnum) *NullableExportParquetCompressionTypeEnum {
	return &NullableExportParquetCompressionTypeEnum{value: val, isSet: true}
}

func (v NullableExportParquetCompressionTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportParquetCompressionTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
