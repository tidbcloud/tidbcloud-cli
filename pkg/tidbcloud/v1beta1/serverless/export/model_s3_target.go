/*
TiDB Cloud Serverless Export Open API

TiDB Cloud Serverless Export Open API

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package export

import (
	"encoding/json"
	"fmt"
)

// checks if the S3Target type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &S3Target{}

// S3Target struct for S3Target
type S3Target struct {
	// Optional. The bucket URI of the s3. DEPRECATED, use uri instead.
	BucketUri *string `json:"bucketUri,omitempty"`
	// Optional. The URI of the s3 folder.
	Uri *string `json:"uri,omitempty"`
	// Required. The auth method of the export s3.
	AuthType ExportS3AuthTypeEnum `json:"authType"`
	// Optional. The access key of the s3.
	AccessKey *S3TargetAccessKey `json:"accessKey,omitempty"`
	// Optional. The role arn of the s3.
	RoleArn              *string `json:"roleArn,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _S3Target S3Target

// NewS3Target instantiates a new S3Target object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewS3Target(authType ExportS3AuthTypeEnum) *S3Target {
	this := S3Target{}
	this.AuthType = authType
	return &this
}

// NewS3TargetWithDefaults instantiates a new S3Target object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewS3TargetWithDefaults() *S3Target {
	this := S3Target{}
	return &this
}

// GetBucketUri returns the BucketUri field value if set, zero value otherwise.
func (o *S3Target) GetBucketUri() string {
	if o == nil || IsNil(o.BucketUri) {
		var ret string
		return ret
	}
	return *o.BucketUri
}

// GetBucketUriOk returns a tuple with the BucketUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3Target) GetBucketUriOk() (*string, bool) {
	if o == nil || IsNil(o.BucketUri) {
		return nil, false
	}
	return o.BucketUri, true
}

// HasBucketUri returns a boolean if a field has been set.
func (o *S3Target) HasBucketUri() bool {
	if o != nil && !IsNil(o.BucketUri) {
		return true
	}

	return false
}

// SetBucketUri gets a reference to the given string and assigns it to the BucketUri field.
func (o *S3Target) SetBucketUri(v string) {
	o.BucketUri = &v
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *S3Target) GetUri() string {
	if o == nil || IsNil(o.Uri) {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3Target) GetUriOk() (*string, bool) {
	if o == nil || IsNil(o.Uri) {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *S3Target) HasUri() bool {
	if o != nil && !IsNil(o.Uri) {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *S3Target) SetUri(v string) {
	o.Uri = &v
}

// GetAuthType returns the AuthType field value
func (o *S3Target) GetAuthType() ExportS3AuthTypeEnum {
	if o == nil {
		var ret ExportS3AuthTypeEnum
		return ret
	}

	return o.AuthType
}

// GetAuthTypeOk returns a tuple with the AuthType field value
// and a boolean to check if the value has been set.
func (o *S3Target) GetAuthTypeOk() (*ExportS3AuthTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthType, true
}

// SetAuthType sets field value
func (o *S3Target) SetAuthType(v ExportS3AuthTypeEnum) {
	o.AuthType = v
}

// GetAccessKey returns the AccessKey field value if set, zero value otherwise.
func (o *S3Target) GetAccessKey() S3TargetAccessKey {
	if o == nil || IsNil(o.AccessKey) {
		var ret S3TargetAccessKey
		return ret
	}
	return *o.AccessKey
}

// GetAccessKeyOk returns a tuple with the AccessKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3Target) GetAccessKeyOk() (*S3TargetAccessKey, bool) {
	if o == nil || IsNil(o.AccessKey) {
		return nil, false
	}
	return o.AccessKey, true
}

// HasAccessKey returns a boolean if a field has been set.
func (o *S3Target) HasAccessKey() bool {
	if o != nil && !IsNil(o.AccessKey) {
		return true
	}

	return false
}

// SetAccessKey gets a reference to the given S3TargetAccessKey and assigns it to the AccessKey field.
func (o *S3Target) SetAccessKey(v S3TargetAccessKey) {
	o.AccessKey = &v
}

// GetRoleArn returns the RoleArn field value if set, zero value otherwise.
func (o *S3Target) GetRoleArn() string {
	if o == nil || IsNil(o.RoleArn) {
		var ret string
		return ret
	}
	return *o.RoleArn
}

// GetRoleArnOk returns a tuple with the RoleArn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3Target) GetRoleArnOk() (*string, bool) {
	if o == nil || IsNil(o.RoleArn) {
		return nil, false
	}
	return o.RoleArn, true
}

// HasRoleArn returns a boolean if a field has been set.
func (o *S3Target) HasRoleArn() bool {
	if o != nil && !IsNil(o.RoleArn) {
		return true
	}

	return false
}

// SetRoleArn gets a reference to the given string and assigns it to the RoleArn field.
func (o *S3Target) SetRoleArn(v string) {
	o.RoleArn = &v
}

func (o S3Target) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o S3Target) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BucketUri) {
		toSerialize["bucketUri"] = o.BucketUri
	}
	if !IsNil(o.Uri) {
		toSerialize["uri"] = o.Uri
	}
	toSerialize["authType"] = o.AuthType
	if !IsNil(o.AccessKey) {
		toSerialize["accessKey"] = o.AccessKey
	}
	if !IsNil(o.RoleArn) {
		toSerialize["roleArn"] = o.RoleArn
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *S3Target) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"authType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varS3Target := _S3Target{}

	err = json.Unmarshal(data, &varS3Target)

	if err != nil {
		return err
	}

	*o = S3Target(varS3Target)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "bucketUri")
		delete(additionalProperties, "uri")
		delete(additionalProperties, "authType")
		delete(additionalProperties, "accessKey")
		delete(additionalProperties, "roleArn")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableS3Target struct {
	value *S3Target
	isSet bool
}

func (v NullableS3Target) Get() *S3Target {
	return v.value
}

func (v *NullableS3Target) Set(val *S3Target) {
	v.value = val
	v.isSet = true
}

func (v NullableS3Target) IsSet() bool {
	return v.isSet
}

func (v *NullableS3Target) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableS3Target(val *S3Target) *NullableS3Target {
	return &NullableS3Target{value: val, isSet: true}
}

func (v NullableS3Target) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableS3Target) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
