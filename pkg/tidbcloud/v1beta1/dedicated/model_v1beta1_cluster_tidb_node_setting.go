/*
TiDB Cloud Dedicated Open API

TiDB Cloud Dedicated Open API.

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicated

import (
	"encoding/json"
	"fmt"
)

// checks if the V1beta1ClusterTidbNodeSetting type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1beta1ClusterTidbNodeSetting{}

// V1beta1ClusterTidbNodeSetting struct for V1beta1ClusterTidbNodeSetting
type V1beta1ClusterTidbNodeSetting struct {
	NodeSpecKey string `json:"nodeSpecKey"`
	// When creating a cluster, the length of the `tidb_node_groups` should be 1 and the `node_count` field of `TidbNodeGroup` should be set.
	TidbNodeGroups       []Dedicatedv1beta1TidbNodeGroup `json:"tidbNodeGroups"`
	NodeSpecDisplayName  *string                         `json:"nodeSpecDisplayName,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _V1beta1ClusterTidbNodeSetting V1beta1ClusterTidbNodeSetting

// NewV1beta1ClusterTidbNodeSetting instantiates a new V1beta1ClusterTidbNodeSetting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1beta1ClusterTidbNodeSetting(nodeSpecKey string, tidbNodeGroups []Dedicatedv1beta1TidbNodeGroup) *V1beta1ClusterTidbNodeSetting {
	this := V1beta1ClusterTidbNodeSetting{}
	this.NodeSpecKey = nodeSpecKey
	this.TidbNodeGroups = tidbNodeGroups
	return &this
}

// NewV1beta1ClusterTidbNodeSettingWithDefaults instantiates a new V1beta1ClusterTidbNodeSetting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1beta1ClusterTidbNodeSettingWithDefaults() *V1beta1ClusterTidbNodeSetting {
	this := V1beta1ClusterTidbNodeSetting{}
	return &this
}

// GetNodeSpecKey returns the NodeSpecKey field value
func (o *V1beta1ClusterTidbNodeSetting) GetNodeSpecKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeSpecKey
}

// GetNodeSpecKeyOk returns a tuple with the NodeSpecKey field value
// and a boolean to check if the value has been set.
func (o *V1beta1ClusterTidbNodeSetting) GetNodeSpecKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeSpecKey, true
}

// SetNodeSpecKey sets field value
func (o *V1beta1ClusterTidbNodeSetting) SetNodeSpecKey(v string) {
	o.NodeSpecKey = v
}

// GetTidbNodeGroups returns the TidbNodeGroups field value
func (o *V1beta1ClusterTidbNodeSetting) GetTidbNodeGroups() []Dedicatedv1beta1TidbNodeGroup {
	if o == nil {
		var ret []Dedicatedv1beta1TidbNodeGroup
		return ret
	}

	return o.TidbNodeGroups
}

// GetTidbNodeGroupsOk returns a tuple with the TidbNodeGroups field value
// and a boolean to check if the value has been set.
func (o *V1beta1ClusterTidbNodeSetting) GetTidbNodeGroupsOk() ([]Dedicatedv1beta1TidbNodeGroup, bool) {
	if o == nil {
		return nil, false
	}
	return o.TidbNodeGroups, true
}

// SetTidbNodeGroups sets field value
func (o *V1beta1ClusterTidbNodeSetting) SetTidbNodeGroups(v []Dedicatedv1beta1TidbNodeGroup) {
	o.TidbNodeGroups = v
}

// GetNodeSpecDisplayName returns the NodeSpecDisplayName field value if set, zero value otherwise.
func (o *V1beta1ClusterTidbNodeSetting) GetNodeSpecDisplayName() string {
	if o == nil || IsNil(o.NodeSpecDisplayName) {
		var ret string
		return ret
	}
	return *o.NodeSpecDisplayName
}

// GetNodeSpecDisplayNameOk returns a tuple with the NodeSpecDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1beta1ClusterTidbNodeSetting) GetNodeSpecDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.NodeSpecDisplayName) {
		return nil, false
	}
	return o.NodeSpecDisplayName, true
}

// HasNodeSpecDisplayName returns a boolean if a field has been set.
func (o *V1beta1ClusterTidbNodeSetting) HasNodeSpecDisplayName() bool {
	if o != nil && !IsNil(o.NodeSpecDisplayName) {
		return true
	}

	return false
}

// SetNodeSpecDisplayName gets a reference to the given string and assigns it to the NodeSpecDisplayName field.
func (o *V1beta1ClusterTidbNodeSetting) SetNodeSpecDisplayName(v string) {
	o.NodeSpecDisplayName = &v
}

func (o V1beta1ClusterTidbNodeSetting) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1beta1ClusterTidbNodeSetting) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["nodeSpecKey"] = o.NodeSpecKey
	toSerialize["tidbNodeGroups"] = o.TidbNodeGroups
	if !IsNil(o.NodeSpecDisplayName) {
		toSerialize["nodeSpecDisplayName"] = o.NodeSpecDisplayName
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *V1beta1ClusterTidbNodeSetting) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"nodeSpecKey",
		"tidbNodeGroups",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1beta1ClusterTidbNodeSetting := _V1beta1ClusterTidbNodeSetting{}

	err = json.Unmarshal(data, &varV1beta1ClusterTidbNodeSetting)

	if err != nil {
		return err
	}

	*o = V1beta1ClusterTidbNodeSetting(varV1beta1ClusterTidbNodeSetting)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "nodeSpecKey")
		delete(additionalProperties, "tidbNodeGroups")
		delete(additionalProperties, "nodeSpecDisplayName")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableV1beta1ClusterTidbNodeSetting struct {
	value *V1beta1ClusterTidbNodeSetting
	isSet bool
}

func (v NullableV1beta1ClusterTidbNodeSetting) Get() *V1beta1ClusterTidbNodeSetting {
	return v.value
}

func (v *NullableV1beta1ClusterTidbNodeSetting) Set(val *V1beta1ClusterTidbNodeSetting) {
	v.value = val
	v.isSet = true
}

func (v NullableV1beta1ClusterTidbNodeSetting) IsSet() bool {
	return v.isSet
}

func (v *NullableV1beta1ClusterTidbNodeSetting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1beta1ClusterTidbNodeSetting(val *V1beta1ClusterTidbNodeSetting) *NullableV1beta1ClusterTidbNodeSetting {
	return &NullableV1beta1ClusterTidbNodeSetting{value: val, isSet: true}
}

func (v NullableV1beta1ClusterTidbNodeSetting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1beta1ClusterTidbNodeSetting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
