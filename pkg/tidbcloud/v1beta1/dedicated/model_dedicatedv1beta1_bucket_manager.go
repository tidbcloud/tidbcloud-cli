/*
TiDB Cloud Dedicated Open API

TiDB Cloud Dedicated Open API.

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicated

import (
	"encoding/json"
)

// Dedicatedv1beta1BucketManager the model 'Dedicatedv1beta1BucketManager'
type Dedicatedv1beta1BucketManager string

// List of dedicatedv1beta1BucketManager
const (
	DEDICATEDV1BETA1BUCKETMANAGER_CUSTOMER Dedicatedv1beta1BucketManager = "CUSTOMER"
	DEDICATEDV1BETA1BUCKETMANAGER_PINGCAP  Dedicatedv1beta1BucketManager = "PINGCAP"
)

// All allowed values of Dedicatedv1beta1BucketManager enum
var AllowedDedicatedv1beta1BucketManagerEnumValues = []Dedicatedv1beta1BucketManager{
	"CUSTOMER",
	"PINGCAP",
}

func (v *Dedicatedv1beta1BucketManager) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Dedicatedv1beta1BucketManager(value)
	for _, existing := range AllowedDedicatedv1beta1BucketManagerEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = Dedicatedv1beta1BucketManager(value)
	return nil
}

// NewDedicatedv1beta1BucketManagerFromValue returns a pointer to a valid Dedicatedv1beta1BucketManager for the value passed as argument
func NewDedicatedv1beta1BucketManagerFromValue(v string) *Dedicatedv1beta1BucketManager {
	ev := Dedicatedv1beta1BucketManager(v)
	return &ev
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Dedicatedv1beta1BucketManager) IsValid() bool {
	for _, existing := range AllowedDedicatedv1beta1BucketManagerEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to dedicatedv1beta1BucketManager value
func (v Dedicatedv1beta1BucketManager) Ptr() *Dedicatedv1beta1BucketManager {
	return &v
}

type NullableDedicatedv1beta1BucketManager struct {
	value *Dedicatedv1beta1BucketManager
	isSet bool
}

func (v NullableDedicatedv1beta1BucketManager) Get() *Dedicatedv1beta1BucketManager {
	return v.value
}

func (v *NullableDedicatedv1beta1BucketManager) Set(val *Dedicatedv1beta1BucketManager) {
	v.value = val
	v.isSet = true
}

func (v NullableDedicatedv1beta1BucketManager) IsSet() bool {
	return v.isSet
}

func (v *NullableDedicatedv1beta1BucketManager) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDedicatedv1beta1BucketManager(val *Dedicatedv1beta1BucketManager) *NullableDedicatedv1beta1BucketManager {
	return &NullableDedicatedv1beta1BucketManager{value: val, isSet: true}
}

func (v NullableDedicatedv1beta1BucketManager) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDedicatedv1beta1BucketManager) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
