/*
TiDB Cloud Dedicated Open API

TiDB Cloud Dedicated Open API.

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicated

import (
	"encoding/json"
	"fmt"
)

// checks if the Dedicatedv1beta1LogRedactionPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Dedicatedv1beta1LogRedactionPolicy{}

// Dedicatedv1beta1LogRedactionPolicy struct for Dedicatedv1beta1LogRedactionPolicy
type Dedicatedv1beta1LogRedactionPolicy struct {
	ClusterId            string       `json:"clusterId"`
	RedactLog            NullableBool `json:"redactLog,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Dedicatedv1beta1LogRedactionPolicy Dedicatedv1beta1LogRedactionPolicy

// NewDedicatedv1beta1LogRedactionPolicy instantiates a new Dedicatedv1beta1LogRedactionPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDedicatedv1beta1LogRedactionPolicy(clusterId string) *Dedicatedv1beta1LogRedactionPolicy {
	this := Dedicatedv1beta1LogRedactionPolicy{}
	this.ClusterId = clusterId
	return &this
}

// NewDedicatedv1beta1LogRedactionPolicyWithDefaults instantiates a new Dedicatedv1beta1LogRedactionPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDedicatedv1beta1LogRedactionPolicyWithDefaults() *Dedicatedv1beta1LogRedactionPolicy {
	this := Dedicatedv1beta1LogRedactionPolicy{}
	return &this
}

// GetClusterId returns the ClusterId field value
func (o *Dedicatedv1beta1LogRedactionPolicy) GetClusterId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClusterId
}

// GetClusterIdOk returns a tuple with the ClusterId field value
// and a boolean to check if the value has been set.
func (o *Dedicatedv1beta1LogRedactionPolicy) GetClusterIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClusterId, true
}

// SetClusterId sets field value
func (o *Dedicatedv1beta1LogRedactionPolicy) SetClusterId(v string) {
	o.ClusterId = v
}

// GetRedactLog returns the RedactLog field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Dedicatedv1beta1LogRedactionPolicy) GetRedactLog() bool {
	if o == nil || IsNil(o.RedactLog.Get()) {
		var ret bool
		return ret
	}
	return *o.RedactLog.Get()
}

// GetRedactLogOk returns a tuple with the RedactLog field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Dedicatedv1beta1LogRedactionPolicy) GetRedactLogOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RedactLog.Get(), o.RedactLog.IsSet()
}

// HasRedactLog returns a boolean if a field has been set.
func (o *Dedicatedv1beta1LogRedactionPolicy) HasRedactLog() bool {
	if o != nil && o.RedactLog.IsSet() {
		return true
	}

	return false
}

// SetRedactLog gets a reference to the given NullableBool and assigns it to the RedactLog field.
func (o *Dedicatedv1beta1LogRedactionPolicy) SetRedactLog(v bool) {
	o.RedactLog.Set(&v)
}

// SetRedactLogNil sets the value for RedactLog to be an explicit nil
func (o *Dedicatedv1beta1LogRedactionPolicy) SetRedactLogNil() {
	o.RedactLog.Set(nil)
}

// UnsetRedactLog ensures that no value is present for RedactLog, not even an explicit nil
func (o *Dedicatedv1beta1LogRedactionPolicy) UnsetRedactLog() {
	o.RedactLog.Unset()
}

func (o Dedicatedv1beta1LogRedactionPolicy) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Dedicatedv1beta1LogRedactionPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["clusterId"] = o.ClusterId
	if o.RedactLog.IsSet() {
		toSerialize["redactLog"] = o.RedactLog.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Dedicatedv1beta1LogRedactionPolicy) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"clusterId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDedicatedv1beta1LogRedactionPolicy := _Dedicatedv1beta1LogRedactionPolicy{}

	err = json.Unmarshal(data, &varDedicatedv1beta1LogRedactionPolicy)

	if err != nil {
		return err
	}

	*o = Dedicatedv1beta1LogRedactionPolicy(varDedicatedv1beta1LogRedactionPolicy)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "clusterId")
		delete(additionalProperties, "redactLog")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDedicatedv1beta1LogRedactionPolicy struct {
	value *Dedicatedv1beta1LogRedactionPolicy
	isSet bool
}

func (v NullableDedicatedv1beta1LogRedactionPolicy) Get() *Dedicatedv1beta1LogRedactionPolicy {
	return v.value
}

func (v *NullableDedicatedv1beta1LogRedactionPolicy) Set(val *Dedicatedv1beta1LogRedactionPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableDedicatedv1beta1LogRedactionPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableDedicatedv1beta1LogRedactionPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDedicatedv1beta1LogRedactionPolicy(val *Dedicatedv1beta1LogRedactionPolicy) *NullableDedicatedv1beta1LogRedactionPolicy {
	return &NullableDedicatedv1beta1LogRedactionPolicy{value: val, isSet: true}
}

func (v NullableDedicatedv1beta1LogRedactionPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDedicatedv1beta1LogRedactionPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
