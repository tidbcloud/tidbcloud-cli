/*
TiDB Cloud Dedicated Open API

TiDB Cloud Dedicated Open API.

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicated

import (
	"encoding/json"
)

// checks if the Dedicatedv1beta1NodeSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Dedicatedv1beta1NodeSpec{}

// Dedicatedv1beta1NodeSpec struct for Dedicatedv1beta1NodeSpec
type Dedicatedv1beta1NodeSpec struct {
	Name                 *string                                `json:"name,omitempty"`
	RegionId             *string                                `json:"regionId,omitempty"`
	ComponentType        *Dedicatedv1beta1ComponentType         `json:"componentType,omitempty"`
	NodeSpecKey          *string                                `json:"nodeSpecKey,omitempty"`
	DisplayName          *string                                `json:"displayName,omitempty"`
	VCpu                 *int32                                 `json:"vCpu,omitempty"`
	MemorySizeGi         *int32                                 `json:"memorySizeGi,omitempty"`
	DefaultStorageSizeGi *int32                                 `json:"defaultStorageSizeGi,omitempty"`
	MaxStorageSizeGi     *int32                                 `json:"maxStorageSizeGi,omitempty"`
	MinStorageSizeGi     *int32                                 `json:"minStorageSizeGi,omitempty"`
	DefaultNodeCount     *int32                                 `json:"defaultNodeCount,omitempty"`
	StorageTypes         []ClusterStorageNodeSettingStorageType `json:"storageTypes,omitempty"`
	Default              *bool                                  `json:"default,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Dedicatedv1beta1NodeSpec Dedicatedv1beta1NodeSpec

// NewDedicatedv1beta1NodeSpec instantiates a new Dedicatedv1beta1NodeSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDedicatedv1beta1NodeSpec() *Dedicatedv1beta1NodeSpec {
	this := Dedicatedv1beta1NodeSpec{}
	return &this
}

// NewDedicatedv1beta1NodeSpecWithDefaults instantiates a new Dedicatedv1beta1NodeSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDedicatedv1beta1NodeSpecWithDefaults() *Dedicatedv1beta1NodeSpec {
	this := Dedicatedv1beta1NodeSpec{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Dedicatedv1beta1NodeSpec) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dedicatedv1beta1NodeSpec) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Dedicatedv1beta1NodeSpec) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Dedicatedv1beta1NodeSpec) SetName(v string) {
	o.Name = &v
}

// GetRegionId returns the RegionId field value if set, zero value otherwise.
func (o *Dedicatedv1beta1NodeSpec) GetRegionId() string {
	if o == nil || IsNil(o.RegionId) {
		var ret string
		return ret
	}
	return *o.RegionId
}

// GetRegionIdOk returns a tuple with the RegionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dedicatedv1beta1NodeSpec) GetRegionIdOk() (*string, bool) {
	if o == nil || IsNil(o.RegionId) {
		return nil, false
	}
	return o.RegionId, true
}

// HasRegionId returns a boolean if a field has been set.
func (o *Dedicatedv1beta1NodeSpec) HasRegionId() bool {
	if o != nil && !IsNil(o.RegionId) {
		return true
	}

	return false
}

// SetRegionId gets a reference to the given string and assigns it to the RegionId field.
func (o *Dedicatedv1beta1NodeSpec) SetRegionId(v string) {
	o.RegionId = &v
}

// GetComponentType returns the ComponentType field value if set, zero value otherwise.
func (o *Dedicatedv1beta1NodeSpec) GetComponentType() Dedicatedv1beta1ComponentType {
	if o == nil || IsNil(o.ComponentType) {
		var ret Dedicatedv1beta1ComponentType
		return ret
	}
	return *o.ComponentType
}

// GetComponentTypeOk returns a tuple with the ComponentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dedicatedv1beta1NodeSpec) GetComponentTypeOk() (*Dedicatedv1beta1ComponentType, bool) {
	if o == nil || IsNil(o.ComponentType) {
		return nil, false
	}
	return o.ComponentType, true
}

// HasComponentType returns a boolean if a field has been set.
func (o *Dedicatedv1beta1NodeSpec) HasComponentType() bool {
	if o != nil && !IsNil(o.ComponentType) {
		return true
	}

	return false
}

// SetComponentType gets a reference to the given Dedicatedv1beta1ComponentType and assigns it to the ComponentType field.
func (o *Dedicatedv1beta1NodeSpec) SetComponentType(v Dedicatedv1beta1ComponentType) {
	o.ComponentType = &v
}

// GetNodeSpecKey returns the NodeSpecKey field value if set, zero value otherwise.
func (o *Dedicatedv1beta1NodeSpec) GetNodeSpecKey() string {
	if o == nil || IsNil(o.NodeSpecKey) {
		var ret string
		return ret
	}
	return *o.NodeSpecKey
}

// GetNodeSpecKeyOk returns a tuple with the NodeSpecKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dedicatedv1beta1NodeSpec) GetNodeSpecKeyOk() (*string, bool) {
	if o == nil || IsNil(o.NodeSpecKey) {
		return nil, false
	}
	return o.NodeSpecKey, true
}

// HasNodeSpecKey returns a boolean if a field has been set.
func (o *Dedicatedv1beta1NodeSpec) HasNodeSpecKey() bool {
	if o != nil && !IsNil(o.NodeSpecKey) {
		return true
	}

	return false
}

// SetNodeSpecKey gets a reference to the given string and assigns it to the NodeSpecKey field.
func (o *Dedicatedv1beta1NodeSpec) SetNodeSpecKey(v string) {
	o.NodeSpecKey = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *Dedicatedv1beta1NodeSpec) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dedicatedv1beta1NodeSpec) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *Dedicatedv1beta1NodeSpec) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *Dedicatedv1beta1NodeSpec) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetVCpu returns the VCpu field value if set, zero value otherwise.
func (o *Dedicatedv1beta1NodeSpec) GetVCpu() int32 {
	if o == nil || IsNil(o.VCpu) {
		var ret int32
		return ret
	}
	return *o.VCpu
}

// GetVCpuOk returns a tuple with the VCpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dedicatedv1beta1NodeSpec) GetVCpuOk() (*int32, bool) {
	if o == nil || IsNil(o.VCpu) {
		return nil, false
	}
	return o.VCpu, true
}

// HasVCpu returns a boolean if a field has been set.
func (o *Dedicatedv1beta1NodeSpec) HasVCpu() bool {
	if o != nil && !IsNil(o.VCpu) {
		return true
	}

	return false
}

// SetVCpu gets a reference to the given int32 and assigns it to the VCpu field.
func (o *Dedicatedv1beta1NodeSpec) SetVCpu(v int32) {
	o.VCpu = &v
}

// GetMemorySizeGi returns the MemorySizeGi field value if set, zero value otherwise.
func (o *Dedicatedv1beta1NodeSpec) GetMemorySizeGi() int32 {
	if o == nil || IsNil(o.MemorySizeGi) {
		var ret int32
		return ret
	}
	return *o.MemorySizeGi
}

// GetMemorySizeGiOk returns a tuple with the MemorySizeGi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dedicatedv1beta1NodeSpec) GetMemorySizeGiOk() (*int32, bool) {
	if o == nil || IsNil(o.MemorySizeGi) {
		return nil, false
	}
	return o.MemorySizeGi, true
}

// HasMemorySizeGi returns a boolean if a field has been set.
func (o *Dedicatedv1beta1NodeSpec) HasMemorySizeGi() bool {
	if o != nil && !IsNil(o.MemorySizeGi) {
		return true
	}

	return false
}

// SetMemorySizeGi gets a reference to the given int32 and assigns it to the MemorySizeGi field.
func (o *Dedicatedv1beta1NodeSpec) SetMemorySizeGi(v int32) {
	o.MemorySizeGi = &v
}

// GetDefaultStorageSizeGi returns the DefaultStorageSizeGi field value if set, zero value otherwise.
func (o *Dedicatedv1beta1NodeSpec) GetDefaultStorageSizeGi() int32 {
	if o == nil || IsNil(o.DefaultStorageSizeGi) {
		var ret int32
		return ret
	}
	return *o.DefaultStorageSizeGi
}

// GetDefaultStorageSizeGiOk returns a tuple with the DefaultStorageSizeGi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dedicatedv1beta1NodeSpec) GetDefaultStorageSizeGiOk() (*int32, bool) {
	if o == nil || IsNil(o.DefaultStorageSizeGi) {
		return nil, false
	}
	return o.DefaultStorageSizeGi, true
}

// HasDefaultStorageSizeGi returns a boolean if a field has been set.
func (o *Dedicatedv1beta1NodeSpec) HasDefaultStorageSizeGi() bool {
	if o != nil && !IsNil(o.DefaultStorageSizeGi) {
		return true
	}

	return false
}

// SetDefaultStorageSizeGi gets a reference to the given int32 and assigns it to the DefaultStorageSizeGi field.
func (o *Dedicatedv1beta1NodeSpec) SetDefaultStorageSizeGi(v int32) {
	o.DefaultStorageSizeGi = &v
}

// GetMaxStorageSizeGi returns the MaxStorageSizeGi field value if set, zero value otherwise.
func (o *Dedicatedv1beta1NodeSpec) GetMaxStorageSizeGi() int32 {
	if o == nil || IsNil(o.MaxStorageSizeGi) {
		var ret int32
		return ret
	}
	return *o.MaxStorageSizeGi
}

// GetMaxStorageSizeGiOk returns a tuple with the MaxStorageSizeGi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dedicatedv1beta1NodeSpec) GetMaxStorageSizeGiOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxStorageSizeGi) {
		return nil, false
	}
	return o.MaxStorageSizeGi, true
}

// HasMaxStorageSizeGi returns a boolean if a field has been set.
func (o *Dedicatedv1beta1NodeSpec) HasMaxStorageSizeGi() bool {
	if o != nil && !IsNil(o.MaxStorageSizeGi) {
		return true
	}

	return false
}

// SetMaxStorageSizeGi gets a reference to the given int32 and assigns it to the MaxStorageSizeGi field.
func (o *Dedicatedv1beta1NodeSpec) SetMaxStorageSizeGi(v int32) {
	o.MaxStorageSizeGi = &v
}

// GetMinStorageSizeGi returns the MinStorageSizeGi field value if set, zero value otherwise.
func (o *Dedicatedv1beta1NodeSpec) GetMinStorageSizeGi() int32 {
	if o == nil || IsNil(o.MinStorageSizeGi) {
		var ret int32
		return ret
	}
	return *o.MinStorageSizeGi
}

// GetMinStorageSizeGiOk returns a tuple with the MinStorageSizeGi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dedicatedv1beta1NodeSpec) GetMinStorageSizeGiOk() (*int32, bool) {
	if o == nil || IsNil(o.MinStorageSizeGi) {
		return nil, false
	}
	return o.MinStorageSizeGi, true
}

// HasMinStorageSizeGi returns a boolean if a field has been set.
func (o *Dedicatedv1beta1NodeSpec) HasMinStorageSizeGi() bool {
	if o != nil && !IsNil(o.MinStorageSizeGi) {
		return true
	}

	return false
}

// SetMinStorageSizeGi gets a reference to the given int32 and assigns it to the MinStorageSizeGi field.
func (o *Dedicatedv1beta1NodeSpec) SetMinStorageSizeGi(v int32) {
	o.MinStorageSizeGi = &v
}

// GetDefaultNodeCount returns the DefaultNodeCount field value if set, zero value otherwise.
func (o *Dedicatedv1beta1NodeSpec) GetDefaultNodeCount() int32 {
	if o == nil || IsNil(o.DefaultNodeCount) {
		var ret int32
		return ret
	}
	return *o.DefaultNodeCount
}

// GetDefaultNodeCountOk returns a tuple with the DefaultNodeCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dedicatedv1beta1NodeSpec) GetDefaultNodeCountOk() (*int32, bool) {
	if o == nil || IsNil(o.DefaultNodeCount) {
		return nil, false
	}
	return o.DefaultNodeCount, true
}

// HasDefaultNodeCount returns a boolean if a field has been set.
func (o *Dedicatedv1beta1NodeSpec) HasDefaultNodeCount() bool {
	if o != nil && !IsNil(o.DefaultNodeCount) {
		return true
	}

	return false
}

// SetDefaultNodeCount gets a reference to the given int32 and assigns it to the DefaultNodeCount field.
func (o *Dedicatedv1beta1NodeSpec) SetDefaultNodeCount(v int32) {
	o.DefaultNodeCount = &v
}

// GetStorageTypes returns the StorageTypes field value if set, zero value otherwise.
func (o *Dedicatedv1beta1NodeSpec) GetStorageTypes() []ClusterStorageNodeSettingStorageType {
	if o == nil || IsNil(o.StorageTypes) {
		var ret []ClusterStorageNodeSettingStorageType
		return ret
	}
	return o.StorageTypes
}

// GetStorageTypesOk returns a tuple with the StorageTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dedicatedv1beta1NodeSpec) GetStorageTypesOk() ([]ClusterStorageNodeSettingStorageType, bool) {
	if o == nil || IsNil(o.StorageTypes) {
		return nil, false
	}
	return o.StorageTypes, true
}

// HasStorageTypes returns a boolean if a field has been set.
func (o *Dedicatedv1beta1NodeSpec) HasStorageTypes() bool {
	if o != nil && !IsNil(o.StorageTypes) {
		return true
	}

	return false
}

// SetStorageTypes gets a reference to the given []ClusterStorageNodeSettingStorageType and assigns it to the StorageTypes field.
func (o *Dedicatedv1beta1NodeSpec) SetStorageTypes(v []ClusterStorageNodeSettingStorageType) {
	o.StorageTypes = v
}

// GetDefault returns the Default field value if set, zero value otherwise.
func (o *Dedicatedv1beta1NodeSpec) GetDefault() bool {
	if o == nil || IsNil(o.Default) {
		var ret bool
		return ret
	}
	return *o.Default
}

// GetDefaultOk returns a tuple with the Default field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dedicatedv1beta1NodeSpec) GetDefaultOk() (*bool, bool) {
	if o == nil || IsNil(o.Default) {
		return nil, false
	}
	return o.Default, true
}

// HasDefault returns a boolean if a field has been set.
func (o *Dedicatedv1beta1NodeSpec) HasDefault() bool {
	if o != nil && !IsNil(o.Default) {
		return true
	}

	return false
}

// SetDefault gets a reference to the given bool and assigns it to the Default field.
func (o *Dedicatedv1beta1NodeSpec) SetDefault(v bool) {
	o.Default = &v
}

func (o Dedicatedv1beta1NodeSpec) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Dedicatedv1beta1NodeSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.RegionId) {
		toSerialize["regionId"] = o.RegionId
	}
	if !IsNil(o.ComponentType) {
		toSerialize["componentType"] = o.ComponentType
	}
	if !IsNil(o.NodeSpecKey) {
		toSerialize["nodeSpecKey"] = o.NodeSpecKey
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.VCpu) {
		toSerialize["vCpu"] = o.VCpu
	}
	if !IsNil(o.MemorySizeGi) {
		toSerialize["memorySizeGi"] = o.MemorySizeGi
	}
	if !IsNil(o.DefaultStorageSizeGi) {
		toSerialize["defaultStorageSizeGi"] = o.DefaultStorageSizeGi
	}
	if !IsNil(o.MaxStorageSizeGi) {
		toSerialize["maxStorageSizeGi"] = o.MaxStorageSizeGi
	}
	if !IsNil(o.MinStorageSizeGi) {
		toSerialize["minStorageSizeGi"] = o.MinStorageSizeGi
	}
	if !IsNil(o.DefaultNodeCount) {
		toSerialize["defaultNodeCount"] = o.DefaultNodeCount
	}
	if !IsNil(o.StorageTypes) {
		toSerialize["storageTypes"] = o.StorageTypes
	}
	if !IsNil(o.Default) {
		toSerialize["default"] = o.Default
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Dedicatedv1beta1NodeSpec) UnmarshalJSON(data []byte) (err error) {
	varDedicatedv1beta1NodeSpec := _Dedicatedv1beta1NodeSpec{}

	err = json.Unmarshal(data, &varDedicatedv1beta1NodeSpec)

	if err != nil {
		return err
	}

	*o = Dedicatedv1beta1NodeSpec(varDedicatedv1beta1NodeSpec)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "regionId")
		delete(additionalProperties, "componentType")
		delete(additionalProperties, "nodeSpecKey")
		delete(additionalProperties, "displayName")
		delete(additionalProperties, "vCpu")
		delete(additionalProperties, "memorySizeGi")
		delete(additionalProperties, "defaultStorageSizeGi")
		delete(additionalProperties, "maxStorageSizeGi")
		delete(additionalProperties, "minStorageSizeGi")
		delete(additionalProperties, "defaultNodeCount")
		delete(additionalProperties, "storageTypes")
		delete(additionalProperties, "default")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDedicatedv1beta1NodeSpec struct {
	value *Dedicatedv1beta1NodeSpec
	isSet bool
}

func (v NullableDedicatedv1beta1NodeSpec) Get() *Dedicatedv1beta1NodeSpec {
	return v.value
}

func (v *NullableDedicatedv1beta1NodeSpec) Set(val *Dedicatedv1beta1NodeSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableDedicatedv1beta1NodeSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableDedicatedv1beta1NodeSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDedicatedv1beta1NodeSpec(val *Dedicatedv1beta1NodeSpec) *NullableDedicatedv1beta1NodeSpec {
	return &NullableDedicatedv1beta1NodeSpec{value: val, isSet: true}
}

func (v NullableDedicatedv1beta1NodeSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDedicatedv1beta1NodeSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
