/*
TiDB Cloud Dedicated Open API

TiDB Cloud Dedicated Open API.

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicated

import (
	"encoding/json"
	"fmt"
)

// Dedicatedv1beta1TidbNodeGroupState  - ACTIVE: All nodes are ready.  - MODIFYING: When TiDB group is modifying.  - PAUSED: When cluster is paused.
type Dedicatedv1beta1TidbNodeGroupState string

// List of dedicatedv1beta1TidbNodeGroupState
const (
	DEDICATEDV1BETA1TIDBNODEGROUPSTATE_ACTIVE Dedicatedv1beta1TidbNodeGroupState = "ACTIVE"
	DEDICATEDV1BETA1TIDBNODEGROUPSTATE_MODIFYING Dedicatedv1beta1TidbNodeGroupState = "MODIFYING"
	DEDICATEDV1BETA1TIDBNODEGROUPSTATE_PAUSED Dedicatedv1beta1TidbNodeGroupState = "PAUSED"
)

// All allowed values of Dedicatedv1beta1TidbNodeGroupState enum
var AllowedDedicatedv1beta1TidbNodeGroupStateEnumValues = []Dedicatedv1beta1TidbNodeGroupState{
	"ACTIVE",
	"MODIFYING",
	"PAUSED",
}

func (v *Dedicatedv1beta1TidbNodeGroupState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Dedicatedv1beta1TidbNodeGroupState(value)
	for _, existing := range AllowedDedicatedv1beta1TidbNodeGroupStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Dedicatedv1beta1TidbNodeGroupState", value)
}

// NewDedicatedv1beta1TidbNodeGroupStateFromValue returns a pointer to a valid Dedicatedv1beta1TidbNodeGroupState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDedicatedv1beta1TidbNodeGroupStateFromValue(v string) (*Dedicatedv1beta1TidbNodeGroupState, error) {
	ev := Dedicatedv1beta1TidbNodeGroupState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Dedicatedv1beta1TidbNodeGroupState: valid values are %v", v, AllowedDedicatedv1beta1TidbNodeGroupStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Dedicatedv1beta1TidbNodeGroupState) IsValid() bool {
	for _, existing := range AllowedDedicatedv1beta1TidbNodeGroupStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to dedicatedv1beta1TidbNodeGroupState value
func (v Dedicatedv1beta1TidbNodeGroupState) Ptr() *Dedicatedv1beta1TidbNodeGroupState {
	return &v
}

type NullableDedicatedv1beta1TidbNodeGroupState struct {
	value *Dedicatedv1beta1TidbNodeGroupState
	isSet bool
}

func (v NullableDedicatedv1beta1TidbNodeGroupState) Get() *Dedicatedv1beta1TidbNodeGroupState {
	return v.value
}

func (v *NullableDedicatedv1beta1TidbNodeGroupState) Set(val *Dedicatedv1beta1TidbNodeGroupState) {
	v.value = val
	v.isSet = true
}

func (v NullableDedicatedv1beta1TidbNodeGroupState) IsSet() bool {
	return v.isSet
}

func (v *NullableDedicatedv1beta1TidbNodeGroupState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDedicatedv1beta1TidbNodeGroupState(val *Dedicatedv1beta1TidbNodeGroupState) *NullableDedicatedv1beta1TidbNodeGroupState {
	return &NullableDedicatedv1beta1TidbNodeGroupState{value: val, isSet: true}
}

func (v NullableDedicatedv1beta1TidbNodeGroupState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDedicatedv1beta1TidbNodeGroupState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

