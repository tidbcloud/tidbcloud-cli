/*
TiDB Cloud Dedicated Open API

TiDB Cloud Dedicated Open API.

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicated

import (
	"encoding/json"
)

// Dedicatedv1beta1ComponentType the model 'Dedicatedv1beta1ComponentType'
type Dedicatedv1beta1ComponentType string

// List of dedicatedv1beta1ComponentType
const (
	DEDICATEDV1BETA1COMPONENTTYPE_TIKV    Dedicatedv1beta1ComponentType = "TIKV"
	DEDICATEDV1BETA1COMPONENTTYPE_TIDB    Dedicatedv1beta1ComponentType = "TIDB"
	DEDICATEDV1BETA1COMPONENTTYPE_TIFLASH Dedicatedv1beta1ComponentType = "TIFLASH"
	DEDICATEDV1BETA1COMPONENTTYPE_PD      Dedicatedv1beta1ComponentType = "PD"
	DEDICATEDV1BETA1COMPONENTTYPE_TIPROXY Dedicatedv1beta1ComponentType = "TIPROXY"

	// Unknown value for handling new enum values gracefully
	Dedicatedv1beta1ComponentType_UNKNOWN Dedicatedv1beta1ComponentType = "unknown"
)

// All allowed values of Dedicatedv1beta1ComponentType enum
var AllowedDedicatedv1beta1ComponentTypeEnumValues = []Dedicatedv1beta1ComponentType{
	"TIKV",
	"TIDB",
	"TIFLASH",
	"PD",
	"TIPROXY",
	Dedicatedv1beta1ComponentType_UNKNOWN, // Include unknown
}

func (v *Dedicatedv1beta1ComponentType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Dedicatedv1beta1ComponentType(value)
	for _, existing := range AllowedDedicatedv1beta1ComponentTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	// Instead of returning an error, assign UNKNOWN value
	*v = Dedicatedv1beta1ComponentType_UNKNOWN
	return nil
}

// NewDedicatedv1beta1ComponentTypeFromValue returns a pointer to a valid Dedicatedv1beta1ComponentType
// for the value passed as argument, or UNKNOWN if the value is not in the enum list
func NewDedicatedv1beta1ComponentTypeFromValue(v string) *Dedicatedv1beta1ComponentType {
	ev := Dedicatedv1beta1ComponentType(v)
	if ev.IsValid() {
		return &ev
	}
	unknown := Dedicatedv1beta1ComponentType_UNKNOWN
	return &unknown
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Dedicatedv1beta1ComponentType) IsValid() bool {
	for _, existing := range AllowedDedicatedv1beta1ComponentTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to dedicatedv1beta1ComponentType value
func (v Dedicatedv1beta1ComponentType) Ptr() *Dedicatedv1beta1ComponentType {
	return &v
}

type NullableDedicatedv1beta1ComponentType struct {
	value *Dedicatedv1beta1ComponentType
	isSet bool
}

func (v NullableDedicatedv1beta1ComponentType) Get() *Dedicatedv1beta1ComponentType {
	return v.value
}

func (v *NullableDedicatedv1beta1ComponentType) Set(val *Dedicatedv1beta1ComponentType) {
	v.value = val
	v.isSet = true
}

func (v NullableDedicatedv1beta1ComponentType) IsSet() bool {
	return v.isSet
}

func (v *NullableDedicatedv1beta1ComponentType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDedicatedv1beta1ComponentType(val *Dedicatedv1beta1ComponentType) *NullableDedicatedv1beta1ComponentType {
	return &NullableDedicatedv1beta1ComponentType{value: val, isSet: true}
}

func (v NullableDedicatedv1beta1ComponentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDedicatedv1beta1ComponentType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
