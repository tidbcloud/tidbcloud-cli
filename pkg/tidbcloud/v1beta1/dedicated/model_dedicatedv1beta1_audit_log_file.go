/*
TiDB Cloud Dedicated Open API

TiDB Cloud Dedicated Open API.

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicated

import (
	"encoding/json"
	"time"
)

// checks if the Dedicatedv1beta1AuditLogFile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Dedicatedv1beta1AuditLogFile{}

// Dedicatedv1beta1AuditLogFile struct for Dedicatedv1beta1AuditLogFile
type Dedicatedv1beta1AuditLogFile struct {
	Filename             *string    `json:"filename,omitempty"`
	Uri                  *string    `json:"uri,omitempty"`
	Bucket               *string    `json:"bucket,omitempty"`
	SizeByte             *int32     `json:"sizeByte,omitempty"`
	CreateTime           *time.Time `json:"createTime,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Dedicatedv1beta1AuditLogFile Dedicatedv1beta1AuditLogFile

// NewDedicatedv1beta1AuditLogFile instantiates a new Dedicatedv1beta1AuditLogFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDedicatedv1beta1AuditLogFile() *Dedicatedv1beta1AuditLogFile {
	this := Dedicatedv1beta1AuditLogFile{}
	return &this
}

// NewDedicatedv1beta1AuditLogFileWithDefaults instantiates a new Dedicatedv1beta1AuditLogFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDedicatedv1beta1AuditLogFileWithDefaults() *Dedicatedv1beta1AuditLogFile {
	this := Dedicatedv1beta1AuditLogFile{}
	return &this
}

// GetFilename returns the Filename field value if set, zero value otherwise.
func (o *Dedicatedv1beta1AuditLogFile) GetFilename() string {
	if o == nil || IsNil(o.Filename) {
		var ret string
		return ret
	}
	return *o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dedicatedv1beta1AuditLogFile) GetFilenameOk() (*string, bool) {
	if o == nil || IsNil(o.Filename) {
		return nil, false
	}
	return o.Filename, true
}

// HasFilename returns a boolean if a field has been set.
func (o *Dedicatedv1beta1AuditLogFile) HasFilename() bool {
	if o != nil && !IsNil(o.Filename) {
		return true
	}

	return false
}

// SetFilename gets a reference to the given string and assigns it to the Filename field.
func (o *Dedicatedv1beta1AuditLogFile) SetFilename(v string) {
	o.Filename = &v
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *Dedicatedv1beta1AuditLogFile) GetUri() string {
	if o == nil || IsNil(o.Uri) {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dedicatedv1beta1AuditLogFile) GetUriOk() (*string, bool) {
	if o == nil || IsNil(o.Uri) {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *Dedicatedv1beta1AuditLogFile) HasUri() bool {
	if o != nil && !IsNil(o.Uri) {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *Dedicatedv1beta1AuditLogFile) SetUri(v string) {
	o.Uri = &v
}

// GetBucket returns the Bucket field value if set, zero value otherwise.
func (o *Dedicatedv1beta1AuditLogFile) GetBucket() string {
	if o == nil || IsNil(o.Bucket) {
		var ret string
		return ret
	}
	return *o.Bucket
}

// GetBucketOk returns a tuple with the Bucket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dedicatedv1beta1AuditLogFile) GetBucketOk() (*string, bool) {
	if o == nil || IsNil(o.Bucket) {
		return nil, false
	}
	return o.Bucket, true
}

// HasBucket returns a boolean if a field has been set.
func (o *Dedicatedv1beta1AuditLogFile) HasBucket() bool {
	if o != nil && !IsNil(o.Bucket) {
		return true
	}

	return false
}

// SetBucket gets a reference to the given string and assigns it to the Bucket field.
func (o *Dedicatedv1beta1AuditLogFile) SetBucket(v string) {
	o.Bucket = &v
}

// GetSizeByte returns the SizeByte field value if set, zero value otherwise.
func (o *Dedicatedv1beta1AuditLogFile) GetSizeByte() int32 {
	if o == nil || IsNil(o.SizeByte) {
		var ret int32
		return ret
	}
	return *o.SizeByte
}

// GetSizeByteOk returns a tuple with the SizeByte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dedicatedv1beta1AuditLogFile) GetSizeByteOk() (*int32, bool) {
	if o == nil || IsNil(o.SizeByte) {
		return nil, false
	}
	return o.SizeByte, true
}

// HasSizeByte returns a boolean if a field has been set.
func (o *Dedicatedv1beta1AuditLogFile) HasSizeByte() bool {
	if o != nil && !IsNil(o.SizeByte) {
		return true
	}

	return false
}

// SetSizeByte gets a reference to the given int32 and assigns it to the SizeByte field.
func (o *Dedicatedv1beta1AuditLogFile) SetSizeByte(v int32) {
	o.SizeByte = &v
}

// GetCreateTime returns the CreateTime field value if set, zero value otherwise.
func (o *Dedicatedv1beta1AuditLogFile) GetCreateTime() time.Time {
	if o == nil || IsNil(o.CreateTime) {
		var ret time.Time
		return ret
	}
	return *o.CreateTime
}

// GetCreateTimeOk returns a tuple with the CreateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dedicatedv1beta1AuditLogFile) GetCreateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreateTime) {
		return nil, false
	}
	return o.CreateTime, true
}

// HasCreateTime returns a boolean if a field has been set.
func (o *Dedicatedv1beta1AuditLogFile) HasCreateTime() bool {
	if o != nil && !IsNil(o.CreateTime) {
		return true
	}

	return false
}

// SetCreateTime gets a reference to the given time.Time and assigns it to the CreateTime field.
func (o *Dedicatedv1beta1AuditLogFile) SetCreateTime(v time.Time) {
	o.CreateTime = &v
}

func (o Dedicatedv1beta1AuditLogFile) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Dedicatedv1beta1AuditLogFile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Filename) {
		toSerialize["filename"] = o.Filename
	}
	if !IsNil(o.Uri) {
		toSerialize["uri"] = o.Uri
	}
	if !IsNil(o.Bucket) {
		toSerialize["bucket"] = o.Bucket
	}
	if !IsNil(o.SizeByte) {
		toSerialize["sizeByte"] = o.SizeByte
	}
	if !IsNil(o.CreateTime) {
		toSerialize["createTime"] = o.CreateTime
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Dedicatedv1beta1AuditLogFile) UnmarshalJSON(data []byte) (err error) {
	varDedicatedv1beta1AuditLogFile := _Dedicatedv1beta1AuditLogFile{}

	err = json.Unmarshal(data, &varDedicatedv1beta1AuditLogFile)

	if err != nil {
		return err
	}

	*o = Dedicatedv1beta1AuditLogFile(varDedicatedv1beta1AuditLogFile)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "filename")
		delete(additionalProperties, "uri")
		delete(additionalProperties, "bucket")
		delete(additionalProperties, "sizeByte")
		delete(additionalProperties, "createTime")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDedicatedv1beta1AuditLogFile struct {
	value *Dedicatedv1beta1AuditLogFile
	isSet bool
}

func (v NullableDedicatedv1beta1AuditLogFile) Get() *Dedicatedv1beta1AuditLogFile {
	return v.value
}

func (v *NullableDedicatedv1beta1AuditLogFile) Set(val *Dedicatedv1beta1AuditLogFile) {
	v.value = val
	v.isSet = true
}

func (v NullableDedicatedv1beta1AuditLogFile) IsSet() bool {
	return v.isSet
}

func (v *NullableDedicatedv1beta1AuditLogFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDedicatedv1beta1AuditLogFile(val *Dedicatedv1beta1AuditLogFile) *NullableDedicatedv1beta1AuditLogFile {
	return &NullableDedicatedv1beta1AuditLogFile{value: val, isSet: true}
}

func (v NullableDedicatedv1beta1AuditLogFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDedicatedv1beta1AuditLogFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
