/*
TiDB Cloud Dedicated Open API

TiDB Cloud Dedicated Open API.

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicated

import (
	"encoding/json"
)

// checks if the Required1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Required1{}

// Required1 struct for Required1
type Required1 struct {
	Name *string `json:"name,omitempty"`
	// Default is false.
	Enabled          *bool                           `json:"enabled,omitempty"`
	BucketUri        *string                         `json:"bucketUri,omitempty"`
	BucketRegionId   *string                         `json:"bucketRegionId,omitempty"`
	AwsRoleArn       *string                         `json:"awsRoleArn,omitempty"`
	AzureSasToken    *string                         `json:"azureSasToken,omitempty"`
	BucketWriteCheck *AuditLogConfigBucketWriteCheck `json:"bucketWriteCheck,omitempty"`
	// The bucket_manager field is used to indicate who manages the bucket. If this field is not set, the bucket is managed by the customer by default.
	BucketManager        *Dedicatedv1beta1BucketManager `json:"bucketManager,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Required1 Required1

// NewRequired1 instantiates a new Required1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRequired1() *Required1 {
	this := Required1{}
	return &this
}

// NewRequired1WithDefaults instantiates a new Required1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRequired1WithDefaults() *Required1 {
	this := Required1{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Required1) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Required1) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Required1) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Required1) SetName(v string) {
	o.Name = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *Required1) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Required1) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *Required1) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *Required1) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetBucketUri returns the BucketUri field value if set, zero value otherwise.
func (o *Required1) GetBucketUri() string {
	if o == nil || IsNil(o.BucketUri) {
		var ret string
		return ret
	}
	return *o.BucketUri
}

// GetBucketUriOk returns a tuple with the BucketUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Required1) GetBucketUriOk() (*string, bool) {
	if o == nil || IsNil(o.BucketUri) {
		return nil, false
	}
	return o.BucketUri, true
}

// HasBucketUri returns a boolean if a field has been set.
func (o *Required1) HasBucketUri() bool {
	if o != nil && !IsNil(o.BucketUri) {
		return true
	}

	return false
}

// SetBucketUri gets a reference to the given string and assigns it to the BucketUri field.
func (o *Required1) SetBucketUri(v string) {
	o.BucketUri = &v
}

// GetBucketRegionId returns the BucketRegionId field value if set, zero value otherwise.
func (o *Required1) GetBucketRegionId() string {
	if o == nil || IsNil(o.BucketRegionId) {
		var ret string
		return ret
	}
	return *o.BucketRegionId
}

// GetBucketRegionIdOk returns a tuple with the BucketRegionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Required1) GetBucketRegionIdOk() (*string, bool) {
	if o == nil || IsNil(o.BucketRegionId) {
		return nil, false
	}
	return o.BucketRegionId, true
}

// HasBucketRegionId returns a boolean if a field has been set.
func (o *Required1) HasBucketRegionId() bool {
	if o != nil && !IsNil(o.BucketRegionId) {
		return true
	}

	return false
}

// SetBucketRegionId gets a reference to the given string and assigns it to the BucketRegionId field.
func (o *Required1) SetBucketRegionId(v string) {
	o.BucketRegionId = &v
}

// GetAwsRoleArn returns the AwsRoleArn field value if set, zero value otherwise.
func (o *Required1) GetAwsRoleArn() string {
	if o == nil || IsNil(o.AwsRoleArn) {
		var ret string
		return ret
	}
	return *o.AwsRoleArn
}

// GetAwsRoleArnOk returns a tuple with the AwsRoleArn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Required1) GetAwsRoleArnOk() (*string, bool) {
	if o == nil || IsNil(o.AwsRoleArn) {
		return nil, false
	}
	return o.AwsRoleArn, true
}

// HasAwsRoleArn returns a boolean if a field has been set.
func (o *Required1) HasAwsRoleArn() bool {
	if o != nil && !IsNil(o.AwsRoleArn) {
		return true
	}

	return false
}

// SetAwsRoleArn gets a reference to the given string and assigns it to the AwsRoleArn field.
func (o *Required1) SetAwsRoleArn(v string) {
	o.AwsRoleArn = &v
}

// GetAzureSasToken returns the AzureSasToken field value if set, zero value otherwise.
func (o *Required1) GetAzureSasToken() string {
	if o == nil || IsNil(o.AzureSasToken) {
		var ret string
		return ret
	}
	return *o.AzureSasToken
}

// GetAzureSasTokenOk returns a tuple with the AzureSasToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Required1) GetAzureSasTokenOk() (*string, bool) {
	if o == nil || IsNil(o.AzureSasToken) {
		return nil, false
	}
	return o.AzureSasToken, true
}

// HasAzureSasToken returns a boolean if a field has been set.
func (o *Required1) HasAzureSasToken() bool {
	if o != nil && !IsNil(o.AzureSasToken) {
		return true
	}

	return false
}

// SetAzureSasToken gets a reference to the given string and assigns it to the AzureSasToken field.
func (o *Required1) SetAzureSasToken(v string) {
	o.AzureSasToken = &v
}

// GetBucketWriteCheck returns the BucketWriteCheck field value if set, zero value otherwise.
func (o *Required1) GetBucketWriteCheck() AuditLogConfigBucketWriteCheck {
	if o == nil || IsNil(o.BucketWriteCheck) {
		var ret AuditLogConfigBucketWriteCheck
		return ret
	}
	return *o.BucketWriteCheck
}

// GetBucketWriteCheckOk returns a tuple with the BucketWriteCheck field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Required1) GetBucketWriteCheckOk() (*AuditLogConfigBucketWriteCheck, bool) {
	if o == nil || IsNil(o.BucketWriteCheck) {
		return nil, false
	}
	return o.BucketWriteCheck, true
}

// HasBucketWriteCheck returns a boolean if a field has been set.
func (o *Required1) HasBucketWriteCheck() bool {
	if o != nil && !IsNil(o.BucketWriteCheck) {
		return true
	}

	return false
}

// SetBucketWriteCheck gets a reference to the given AuditLogConfigBucketWriteCheck and assigns it to the BucketWriteCheck field.
func (o *Required1) SetBucketWriteCheck(v AuditLogConfigBucketWriteCheck) {
	o.BucketWriteCheck = &v
}

// GetBucketManager returns the BucketManager field value if set, zero value otherwise.
func (o *Required1) GetBucketManager() Dedicatedv1beta1BucketManager {
	if o == nil || IsNil(o.BucketManager) {
		var ret Dedicatedv1beta1BucketManager
		return ret
	}
	return *o.BucketManager
}

// GetBucketManagerOk returns a tuple with the BucketManager field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Required1) GetBucketManagerOk() (*Dedicatedv1beta1BucketManager, bool) {
	if o == nil || IsNil(o.BucketManager) {
		return nil, false
	}
	return o.BucketManager, true
}

// HasBucketManager returns a boolean if a field has been set.
func (o *Required1) HasBucketManager() bool {
	if o != nil && !IsNil(o.BucketManager) {
		return true
	}

	return false
}

// SetBucketManager gets a reference to the given Dedicatedv1beta1BucketManager and assigns it to the BucketManager field.
func (o *Required1) SetBucketManager(v Dedicatedv1beta1BucketManager) {
	o.BucketManager = &v
}

func (o Required1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Required1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.BucketUri) {
		toSerialize["bucketUri"] = o.BucketUri
	}
	if !IsNil(o.BucketRegionId) {
		toSerialize["bucketRegionId"] = o.BucketRegionId
	}
	if !IsNil(o.AwsRoleArn) {
		toSerialize["awsRoleArn"] = o.AwsRoleArn
	}
	if !IsNil(o.AzureSasToken) {
		toSerialize["azureSasToken"] = o.AzureSasToken
	}
	if !IsNil(o.BucketWriteCheck) {
		toSerialize["bucketWriteCheck"] = o.BucketWriteCheck
	}
	if !IsNil(o.BucketManager) {
		toSerialize["bucketManager"] = o.BucketManager
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Required1) UnmarshalJSON(data []byte) (err error) {
	varRequired1 := _Required1{}

	err = json.Unmarshal(data, &varRequired1)

	if err != nil {
		return err
	}

	*o = Required1(varRequired1)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "bucketUri")
		delete(additionalProperties, "bucketRegionId")
		delete(additionalProperties, "awsRoleArn")
		delete(additionalProperties, "azureSasToken")
		delete(additionalProperties, "bucketWriteCheck")
		delete(additionalProperties, "bucketManager")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRequired1 struct {
	value *Required1
	isSet bool
}

func (v NullableRequired1) Get() *Required1 {
	return v.value
}

func (v *NullableRequired1) Set(val *Required1) {
	v.value = val
	v.isSet = true
}

func (v NullableRequired1) IsSet() bool {
	return v.isSet
}

func (v *NullableRequired1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequired1(val *Required1) *NullableRequired1 {
	return &NullableRequired1{value: val, isSet: true}
}

func (v NullableRequired1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequired1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
