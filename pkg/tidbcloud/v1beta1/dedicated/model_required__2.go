/*
TiDB Cloud Dedicated Open API

TiDB Cloud Dedicated Open API.

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicated

import (
	"encoding/json"
)

// checks if the Required2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Required2{}

// Required2 struct for Required2
type Required2 struct {
	Name                 *string  `json:"name,omitempty"`
	AuditLogFilterRuleId *string  `json:"auditLogFilterRuleId,omitempty"`
	UserExpr             *string  `json:"userExpr,omitempty"`
	DbExpr               *string  `json:"dbExpr,omitempty"`
	TableExpr            *string  `json:"tableExpr,omitempty"`
	AccessTypeList       []string `json:"accessTypeList,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Required2 Required2

// NewRequired2 instantiates a new Required2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRequired2() *Required2 {
	this := Required2{}
	return &this
}

// NewRequired2WithDefaults instantiates a new Required2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRequired2WithDefaults() *Required2 {
	this := Required2{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Required2) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Required2) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Required2) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Required2) SetName(v string) {
	o.Name = &v
}

// GetAuditLogFilterRuleId returns the AuditLogFilterRuleId field value if set, zero value otherwise.
func (o *Required2) GetAuditLogFilterRuleId() string {
	if o == nil || IsNil(o.AuditLogFilterRuleId) {
		var ret string
		return ret
	}
	return *o.AuditLogFilterRuleId
}

// GetAuditLogFilterRuleIdOk returns a tuple with the AuditLogFilterRuleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Required2) GetAuditLogFilterRuleIdOk() (*string, bool) {
	if o == nil || IsNil(o.AuditLogFilterRuleId) {
		return nil, false
	}
	return o.AuditLogFilterRuleId, true
}

// HasAuditLogFilterRuleId returns a boolean if a field has been set.
func (o *Required2) HasAuditLogFilterRuleId() bool {
	if o != nil && !IsNil(o.AuditLogFilterRuleId) {
		return true
	}

	return false
}

// SetAuditLogFilterRuleId gets a reference to the given string and assigns it to the AuditLogFilterRuleId field.
func (o *Required2) SetAuditLogFilterRuleId(v string) {
	o.AuditLogFilterRuleId = &v
}

// GetUserExpr returns the UserExpr field value if set, zero value otherwise.
func (o *Required2) GetUserExpr() string {
	if o == nil || IsNil(o.UserExpr) {
		var ret string
		return ret
	}
	return *o.UserExpr
}

// GetUserExprOk returns a tuple with the UserExpr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Required2) GetUserExprOk() (*string, bool) {
	if o == nil || IsNil(o.UserExpr) {
		return nil, false
	}
	return o.UserExpr, true
}

// HasUserExpr returns a boolean if a field has been set.
func (o *Required2) HasUserExpr() bool {
	if o != nil && !IsNil(o.UserExpr) {
		return true
	}

	return false
}

// SetUserExpr gets a reference to the given string and assigns it to the UserExpr field.
func (o *Required2) SetUserExpr(v string) {
	o.UserExpr = &v
}

// GetDbExpr returns the DbExpr field value if set, zero value otherwise.
func (o *Required2) GetDbExpr() string {
	if o == nil || IsNil(o.DbExpr) {
		var ret string
		return ret
	}
	return *o.DbExpr
}

// GetDbExprOk returns a tuple with the DbExpr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Required2) GetDbExprOk() (*string, bool) {
	if o == nil || IsNil(o.DbExpr) {
		return nil, false
	}
	return o.DbExpr, true
}

// HasDbExpr returns a boolean if a field has been set.
func (o *Required2) HasDbExpr() bool {
	if o != nil && !IsNil(o.DbExpr) {
		return true
	}

	return false
}

// SetDbExpr gets a reference to the given string and assigns it to the DbExpr field.
func (o *Required2) SetDbExpr(v string) {
	o.DbExpr = &v
}

// GetTableExpr returns the TableExpr field value if set, zero value otherwise.
func (o *Required2) GetTableExpr() string {
	if o == nil || IsNil(o.TableExpr) {
		var ret string
		return ret
	}
	return *o.TableExpr
}

// GetTableExprOk returns a tuple with the TableExpr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Required2) GetTableExprOk() (*string, bool) {
	if o == nil || IsNil(o.TableExpr) {
		return nil, false
	}
	return o.TableExpr, true
}

// HasTableExpr returns a boolean if a field has been set.
func (o *Required2) HasTableExpr() bool {
	if o != nil && !IsNil(o.TableExpr) {
		return true
	}

	return false
}

// SetTableExpr gets a reference to the given string and assigns it to the TableExpr field.
func (o *Required2) SetTableExpr(v string) {
	o.TableExpr = &v
}

// GetAccessTypeList returns the AccessTypeList field value if set, zero value otherwise.
func (o *Required2) GetAccessTypeList() []string {
	if o == nil || IsNil(o.AccessTypeList) {
		var ret []string
		return ret
	}
	return o.AccessTypeList
}

// GetAccessTypeListOk returns a tuple with the AccessTypeList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Required2) GetAccessTypeListOk() ([]string, bool) {
	if o == nil || IsNil(o.AccessTypeList) {
		return nil, false
	}
	return o.AccessTypeList, true
}

// HasAccessTypeList returns a boolean if a field has been set.
func (o *Required2) HasAccessTypeList() bool {
	if o != nil && !IsNil(o.AccessTypeList) {
		return true
	}

	return false
}

// SetAccessTypeList gets a reference to the given []string and assigns it to the AccessTypeList field.
func (o *Required2) SetAccessTypeList(v []string) {
	o.AccessTypeList = v
}

func (o Required2) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Required2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.AuditLogFilterRuleId) {
		toSerialize["auditLogFilterRuleId"] = o.AuditLogFilterRuleId
	}
	if !IsNil(o.UserExpr) {
		toSerialize["userExpr"] = o.UserExpr
	}
	if !IsNil(o.DbExpr) {
		toSerialize["dbExpr"] = o.DbExpr
	}
	if !IsNil(o.TableExpr) {
		toSerialize["tableExpr"] = o.TableExpr
	}
	if !IsNil(o.AccessTypeList) {
		toSerialize["accessTypeList"] = o.AccessTypeList
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Required2) UnmarshalJSON(data []byte) (err error) {
	varRequired2 := _Required2{}

	err = json.Unmarshal(data, &varRequired2)

	if err != nil {
		return err
	}

	*o = Required2(varRequired2)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "auditLogFilterRuleId")
		delete(additionalProperties, "userExpr")
		delete(additionalProperties, "dbExpr")
		delete(additionalProperties, "tableExpr")
		delete(additionalProperties, "accessTypeList")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRequired2 struct {
	value *Required2
	isSet bool
}

func (v NullableRequired2) Get() *Required2 {
	return v.value
}

func (v *NullableRequired2) Set(val *Required2) {
	v.value = val
	v.isSet = true
}

func (v NullableRequired2) IsSet() bool {
	return v.isSet
}

func (v *NullableRequired2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequired2(val *Required2) *NullableRequired2 {
	return &NullableRequired2{value: val, isSet: true}
}

func (v NullableRequired2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequired2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
