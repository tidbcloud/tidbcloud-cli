/*
TiDB Cloud Dedicated Open API

TiDB Cloud Dedicated Open API.

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicated

import (
	"encoding/json"
	"fmt"
)

// checks if the V1beta1NetworkContainer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1beta1NetworkContainer{}

// V1beta1NetworkContainer struct for V1beta1NetworkContainer
type V1beta1NetworkContainer struct {
	Name               *string `json:"name,omitempty"`
	NetworkContainerId *string `json:"networkContainerId,omitempty"`
	// The labels of the cluster. If there is no \"project_id\" in labels, resource should be in the default project of the creator's organization.
	Labels   *map[string]string `json:"labels,omitempty"`
	RegionId string             `json:"regionId"`
	// If not set, the default cidr of the region will be used.
	CidrNotion        *string                       `json:"cidrNotion,omitempty"`
	CloudProvider     *V1beta1RegionCloudProvider   `json:"cloudProvider,omitempty"`
	State             *V1beta1NetworkContainerState `json:"state,omitempty"`
	RegionDisplayName *string                       `json:"regionDisplayName,omitempty"`
	// For AWS, it is the vpc id. For GCP, it is the network name. For Azure, it is the vnet name.
	VpcId                *string `json:"vpcId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _V1beta1NetworkContainer V1beta1NetworkContainer

// NewV1beta1NetworkContainer instantiates a new V1beta1NetworkContainer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1beta1NetworkContainer(regionId string) *V1beta1NetworkContainer {
	this := V1beta1NetworkContainer{}
	this.RegionId = regionId
	return &this
}

// NewV1beta1NetworkContainerWithDefaults instantiates a new V1beta1NetworkContainer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1beta1NetworkContainerWithDefaults() *V1beta1NetworkContainer {
	this := V1beta1NetworkContainer{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *V1beta1NetworkContainer) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1beta1NetworkContainer) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *V1beta1NetworkContainer) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *V1beta1NetworkContainer) SetName(v string) {
	o.Name = &v
}

// GetNetworkContainerId returns the NetworkContainerId field value if set, zero value otherwise.
func (o *V1beta1NetworkContainer) GetNetworkContainerId() string {
	if o == nil || IsNil(o.NetworkContainerId) {
		var ret string
		return ret
	}
	return *o.NetworkContainerId
}

// GetNetworkContainerIdOk returns a tuple with the NetworkContainerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1beta1NetworkContainer) GetNetworkContainerIdOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkContainerId) {
		return nil, false
	}
	return o.NetworkContainerId, true
}

// HasNetworkContainerId returns a boolean if a field has been set.
func (o *V1beta1NetworkContainer) HasNetworkContainerId() bool {
	if o != nil && !IsNil(o.NetworkContainerId) {
		return true
	}

	return false
}

// SetNetworkContainerId gets a reference to the given string and assigns it to the NetworkContainerId field.
func (o *V1beta1NetworkContainer) SetNetworkContainerId(v string) {
	o.NetworkContainerId = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *V1beta1NetworkContainer) GetLabels() map[string]string {
	if o == nil || IsNil(o.Labels) {
		var ret map[string]string
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1beta1NetworkContainer) GetLabelsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *V1beta1NetworkContainer) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *V1beta1NetworkContainer) SetLabels(v map[string]string) {
	o.Labels = &v
}

// GetRegionId returns the RegionId field value
func (o *V1beta1NetworkContainer) GetRegionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RegionId
}

// GetRegionIdOk returns a tuple with the RegionId field value
// and a boolean to check if the value has been set.
func (o *V1beta1NetworkContainer) GetRegionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegionId, true
}

// SetRegionId sets field value
func (o *V1beta1NetworkContainer) SetRegionId(v string) {
	o.RegionId = v
}

// GetCidrNotion returns the CidrNotion field value if set, zero value otherwise.
func (o *V1beta1NetworkContainer) GetCidrNotion() string {
	if o == nil || IsNil(o.CidrNotion) {
		var ret string
		return ret
	}
	return *o.CidrNotion
}

// GetCidrNotionOk returns a tuple with the CidrNotion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1beta1NetworkContainer) GetCidrNotionOk() (*string, bool) {
	if o == nil || IsNil(o.CidrNotion) {
		return nil, false
	}
	return o.CidrNotion, true
}

// HasCidrNotion returns a boolean if a field has been set.
func (o *V1beta1NetworkContainer) HasCidrNotion() bool {
	if o != nil && !IsNil(o.CidrNotion) {
		return true
	}

	return false
}

// SetCidrNotion gets a reference to the given string and assigns it to the CidrNotion field.
func (o *V1beta1NetworkContainer) SetCidrNotion(v string) {
	o.CidrNotion = &v
}

// GetCloudProvider returns the CloudProvider field value if set, zero value otherwise.
func (o *V1beta1NetworkContainer) GetCloudProvider() V1beta1RegionCloudProvider {
	if o == nil || IsNil(o.CloudProvider) {
		var ret V1beta1RegionCloudProvider
		return ret
	}
	return *o.CloudProvider
}

// GetCloudProviderOk returns a tuple with the CloudProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1beta1NetworkContainer) GetCloudProviderOk() (*V1beta1RegionCloudProvider, bool) {
	if o == nil || IsNil(o.CloudProvider) {
		return nil, false
	}
	return o.CloudProvider, true
}

// HasCloudProvider returns a boolean if a field has been set.
func (o *V1beta1NetworkContainer) HasCloudProvider() bool {
	if o != nil && !IsNil(o.CloudProvider) {
		return true
	}

	return false
}

// SetCloudProvider gets a reference to the given V1beta1RegionCloudProvider and assigns it to the CloudProvider field.
func (o *V1beta1NetworkContainer) SetCloudProvider(v V1beta1RegionCloudProvider) {
	o.CloudProvider = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *V1beta1NetworkContainer) GetState() V1beta1NetworkContainerState {
	if o == nil || IsNil(o.State) {
		var ret V1beta1NetworkContainerState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1beta1NetworkContainer) GetStateOk() (*V1beta1NetworkContainerState, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *V1beta1NetworkContainer) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given V1beta1NetworkContainerState and assigns it to the State field.
func (o *V1beta1NetworkContainer) SetState(v V1beta1NetworkContainerState) {
	o.State = &v
}

// GetRegionDisplayName returns the RegionDisplayName field value if set, zero value otherwise.
func (o *V1beta1NetworkContainer) GetRegionDisplayName() string {
	if o == nil || IsNil(o.RegionDisplayName) {
		var ret string
		return ret
	}
	return *o.RegionDisplayName
}

// GetRegionDisplayNameOk returns a tuple with the RegionDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1beta1NetworkContainer) GetRegionDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.RegionDisplayName) {
		return nil, false
	}
	return o.RegionDisplayName, true
}

// HasRegionDisplayName returns a boolean if a field has been set.
func (o *V1beta1NetworkContainer) HasRegionDisplayName() bool {
	if o != nil && !IsNil(o.RegionDisplayName) {
		return true
	}

	return false
}

// SetRegionDisplayName gets a reference to the given string and assigns it to the RegionDisplayName field.
func (o *V1beta1NetworkContainer) SetRegionDisplayName(v string) {
	o.RegionDisplayName = &v
}

// GetVpcId returns the VpcId field value if set, zero value otherwise.
func (o *V1beta1NetworkContainer) GetVpcId() string {
	if o == nil || IsNil(o.VpcId) {
		var ret string
		return ret
	}
	return *o.VpcId
}

// GetVpcIdOk returns a tuple with the VpcId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1beta1NetworkContainer) GetVpcIdOk() (*string, bool) {
	if o == nil || IsNil(o.VpcId) {
		return nil, false
	}
	return o.VpcId, true
}

// HasVpcId returns a boolean if a field has been set.
func (o *V1beta1NetworkContainer) HasVpcId() bool {
	if o != nil && !IsNil(o.VpcId) {
		return true
	}

	return false
}

// SetVpcId gets a reference to the given string and assigns it to the VpcId field.
func (o *V1beta1NetworkContainer) SetVpcId(v string) {
	o.VpcId = &v
}

func (o V1beta1NetworkContainer) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1beta1NetworkContainer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NetworkContainerId) {
		toSerialize["networkContainerId"] = o.NetworkContainerId
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	toSerialize["regionId"] = o.RegionId
	if !IsNil(o.CidrNotion) {
		toSerialize["cidrNotion"] = o.CidrNotion
	}
	if !IsNil(o.CloudProvider) {
		toSerialize["cloudProvider"] = o.CloudProvider
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.RegionDisplayName) {
		toSerialize["regionDisplayName"] = o.RegionDisplayName
	}
	if !IsNil(o.VpcId) {
		toSerialize["vpcId"] = o.VpcId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *V1beta1NetworkContainer) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"regionId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1beta1NetworkContainer := _V1beta1NetworkContainer{}

	err = json.Unmarshal(data, &varV1beta1NetworkContainer)

	if err != nil {
		return err
	}

	*o = V1beta1NetworkContainer(varV1beta1NetworkContainer)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "networkContainerId")
		delete(additionalProperties, "labels")
		delete(additionalProperties, "regionId")
		delete(additionalProperties, "cidrNotion")
		delete(additionalProperties, "cloudProvider")
		delete(additionalProperties, "state")
		delete(additionalProperties, "regionDisplayName")
		delete(additionalProperties, "vpcId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableV1beta1NetworkContainer struct {
	value *V1beta1NetworkContainer
	isSet bool
}

func (v NullableV1beta1NetworkContainer) Get() *V1beta1NetworkContainer {
	return v.value
}

func (v *NullableV1beta1NetworkContainer) Set(val *V1beta1NetworkContainer) {
	v.value = val
	v.isSet = true
}

func (v NullableV1beta1NetworkContainer) IsSet() bool {
	return v.isSet
}

func (v *NullableV1beta1NetworkContainer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1beta1NetworkContainer(val *V1beta1NetworkContainer) *NullableV1beta1NetworkContainer {
	return &NullableV1beta1NetworkContainer{value: val, isSet: true}
}

func (v NullableV1beta1NetworkContainer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1beta1NetworkContainer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
