/*
TiDB Cloud Dedicated Open API

TiDB Cloud Dedicated Open API.

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicated

import (
	"encoding/json"
	"fmt"
)

// ClusterStorageNodeSettingStorageType the model 'ClusterStorageNodeSettingStorageType'
type ClusterStorageNodeSettingStorageType string

// List of ClusterStorageNodeSettingStorageType
const (
	CLUSTERSTORAGENODESETTINGSTORAGETYPE_BASIC     ClusterStorageNodeSettingStorageType = "BASIC"
	CLUSTERSTORAGENODESETTINGSTORAGETYPE_BASICV2   ClusterStorageNodeSettingStorageType = "BASICV2"
	CLUSTERSTORAGENODESETTINGSTORAGETYPE_OPTIMIZED ClusterStorageNodeSettingStorageType = "OPTIMIZED"
	CLUSTERSTORAGENODESETTINGSTORAGETYPE_PLUS      ClusterStorageNodeSettingStorageType = "PLUS"
)

// All allowed values of ClusterStorageNodeSettingStorageType enum
var AllowedClusterStorageNodeSettingStorageTypeEnumValues = []ClusterStorageNodeSettingStorageType{
	"BASIC",
	"BASICV2",
	"OPTIMIZED",
	"PLUS",
}

func (v *ClusterStorageNodeSettingStorageType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ClusterStorageNodeSettingStorageType(value)
	for _, existing := range AllowedClusterStorageNodeSettingStorageTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ClusterStorageNodeSettingStorageType", value)
}

// NewClusterStorageNodeSettingStorageTypeFromValue returns a pointer to a valid ClusterStorageNodeSettingStorageType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewClusterStorageNodeSettingStorageTypeFromValue(v string) (*ClusterStorageNodeSettingStorageType, error) {
	ev := ClusterStorageNodeSettingStorageType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ClusterStorageNodeSettingStorageType: valid values are %v", v, AllowedClusterStorageNodeSettingStorageTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ClusterStorageNodeSettingStorageType) IsValid() bool {
	for _, existing := range AllowedClusterStorageNodeSettingStorageTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ClusterStorageNodeSettingStorageType value
func (v ClusterStorageNodeSettingStorageType) Ptr() *ClusterStorageNodeSettingStorageType {
	return &v
}

type NullableClusterStorageNodeSettingStorageType struct {
	value *ClusterStorageNodeSettingStorageType
	isSet bool
}

func (v NullableClusterStorageNodeSettingStorageType) Get() *ClusterStorageNodeSettingStorageType {
	return v.value
}

func (v *NullableClusterStorageNodeSettingStorageType) Set(val *ClusterStorageNodeSettingStorageType) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterStorageNodeSettingStorageType) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterStorageNodeSettingStorageType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterStorageNodeSettingStorageType(val *ClusterStorageNodeSettingStorageType) *NullableClusterStorageNodeSettingStorageType {
	return &NullableClusterStorageNodeSettingStorageType{value: val, isSet: true}
}

func (v NullableClusterStorageNodeSettingStorageType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterStorageNodeSettingStorageType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
