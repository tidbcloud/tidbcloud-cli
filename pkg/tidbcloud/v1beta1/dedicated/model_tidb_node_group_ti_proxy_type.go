/*
TiDB Cloud Dedicated Open API

TiDB Cloud Dedicated Open API.

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicated

import (
	"encoding/json"
	"fmt"
)

// TidbNodeGroupTiProxyType the model 'TidbNodeGroupTiProxyType'
type TidbNodeGroupTiProxyType string

// List of TidbNodeGroupTiProxyType
const (
	TIDBNODEGROUPTIPROXYTYPE_MEDIUM TidbNodeGroupTiProxyType = "MEDIUM"
	TIDBNODEGROUPTIPROXYTYPE_LARGE  TidbNodeGroupTiProxyType = "LARGE"
)

// All allowed values of TidbNodeGroupTiProxyType enum
var AllowedTidbNodeGroupTiProxyTypeEnumValues = []TidbNodeGroupTiProxyType{
	"MEDIUM",
	"LARGE",
}

func (v *TidbNodeGroupTiProxyType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TidbNodeGroupTiProxyType(value)
	for _, existing := range AllowedTidbNodeGroupTiProxyTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TidbNodeGroupTiProxyType", value)
}

// NewTidbNodeGroupTiProxyTypeFromValue returns a pointer to a valid TidbNodeGroupTiProxyType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTidbNodeGroupTiProxyTypeFromValue(v string) (*TidbNodeGroupTiProxyType, error) {
	ev := TidbNodeGroupTiProxyType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TidbNodeGroupTiProxyType: valid values are %v", v, AllowedTidbNodeGroupTiProxyTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TidbNodeGroupTiProxyType) IsValid() bool {
	for _, existing := range AllowedTidbNodeGroupTiProxyTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TidbNodeGroupTiProxyType value
func (v TidbNodeGroupTiProxyType) Ptr() *TidbNodeGroupTiProxyType {
	return &v
}

type NullableTidbNodeGroupTiProxyType struct {
	value *TidbNodeGroupTiProxyType
	isSet bool
}

func (v NullableTidbNodeGroupTiProxyType) Get() *TidbNodeGroupTiProxyType {
	return v.value
}

func (v *NullableTidbNodeGroupTiProxyType) Set(val *TidbNodeGroupTiProxyType) {
	v.value = val
	v.isSet = true
}

func (v NullableTidbNodeGroupTiProxyType) IsSet() bool {
	return v.isSet
}

func (v *NullableTidbNodeGroupTiProxyType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTidbNodeGroupTiProxyType(val *TidbNodeGroupTiProxyType) *NullableTidbNodeGroupTiProxyType {
	return &NullableTidbNodeGroupTiProxyType{value: val, isSet: true}
}

func (v NullableTidbNodeGroupTiProxyType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTidbNodeGroupTiProxyType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
