/*
TiDB Cloud Dedicated Open API

TiDB Cloud Dedicated Open API.

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicated

import (
	"encoding/json"
	"fmt"
)

// checks if the V1beta1PublicEndpointSetting type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1beta1PublicEndpointSetting{}

// V1beta1PublicEndpointSetting struct for V1beta1PublicEndpointSetting
type V1beta1PublicEndpointSetting struct {
	Name *string `json:"name,omitempty"`
	// If set to \"-\", the default TiDB group will be used.
	TidbNodeGroupId      string                                     `json:"tidbNodeGroupId"`
	Enabled              NullableBool                               `json:"enabled,omitempty"`
	IpAccessList         []V1beta1PublicEndpointSettingIpAccessList `json:"ipAccessList,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _V1beta1PublicEndpointSetting V1beta1PublicEndpointSetting

// NewV1beta1PublicEndpointSetting instantiates a new V1beta1PublicEndpointSetting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1beta1PublicEndpointSetting(tidbNodeGroupId string) *V1beta1PublicEndpointSetting {
	this := V1beta1PublicEndpointSetting{}
	this.TidbNodeGroupId = tidbNodeGroupId
	return &this
}

// NewV1beta1PublicEndpointSettingWithDefaults instantiates a new V1beta1PublicEndpointSetting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1beta1PublicEndpointSettingWithDefaults() *V1beta1PublicEndpointSetting {
	this := V1beta1PublicEndpointSetting{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *V1beta1PublicEndpointSetting) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1beta1PublicEndpointSetting) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *V1beta1PublicEndpointSetting) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *V1beta1PublicEndpointSetting) SetName(v string) {
	o.Name = &v
}

// GetTidbNodeGroupId returns the TidbNodeGroupId field value
func (o *V1beta1PublicEndpointSetting) GetTidbNodeGroupId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TidbNodeGroupId
}

// GetTidbNodeGroupIdOk returns a tuple with the TidbNodeGroupId field value
// and a boolean to check if the value has been set.
func (o *V1beta1PublicEndpointSetting) GetTidbNodeGroupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TidbNodeGroupId, true
}

// SetTidbNodeGroupId sets field value
func (o *V1beta1PublicEndpointSetting) SetTidbNodeGroupId(v string) {
	o.TidbNodeGroupId = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *V1beta1PublicEndpointSetting) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled.Get()) {
		var ret bool
		return ret
	}
	return *o.Enabled.Get()
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *V1beta1PublicEndpointSetting) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Enabled.Get(), o.Enabled.IsSet()
}

// HasEnabled returns a boolean if a field has been set.
func (o *V1beta1PublicEndpointSetting) HasEnabled() bool {
	if o != nil && o.Enabled.IsSet() {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given NullableBool and assigns it to the Enabled field.
func (o *V1beta1PublicEndpointSetting) SetEnabled(v bool) {
	o.Enabled.Set(&v)
}

// SetEnabledNil sets the value for Enabled to be an explicit nil
func (o *V1beta1PublicEndpointSetting) SetEnabledNil() {
	o.Enabled.Set(nil)
}

// UnsetEnabled ensures that no value is present for Enabled, not even an explicit nil
func (o *V1beta1PublicEndpointSetting) UnsetEnabled() {
	o.Enabled.Unset()
}

// GetIpAccessList returns the IpAccessList field value if set, zero value otherwise.
func (o *V1beta1PublicEndpointSetting) GetIpAccessList() []V1beta1PublicEndpointSettingIpAccessList {
	if o == nil || IsNil(o.IpAccessList) {
		var ret []V1beta1PublicEndpointSettingIpAccessList
		return ret
	}
	return o.IpAccessList
}

// GetIpAccessListOk returns a tuple with the IpAccessList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1beta1PublicEndpointSetting) GetIpAccessListOk() ([]V1beta1PublicEndpointSettingIpAccessList, bool) {
	if o == nil || IsNil(o.IpAccessList) {
		return nil, false
	}
	return o.IpAccessList, true
}

// HasIpAccessList returns a boolean if a field has been set.
func (o *V1beta1PublicEndpointSetting) HasIpAccessList() bool {
	if o != nil && !IsNil(o.IpAccessList) {
		return true
	}

	return false
}

// SetIpAccessList gets a reference to the given []V1beta1PublicEndpointSettingIpAccessList and assigns it to the IpAccessList field.
func (o *V1beta1PublicEndpointSetting) SetIpAccessList(v []V1beta1PublicEndpointSettingIpAccessList) {
	o.IpAccessList = v
}

func (o V1beta1PublicEndpointSetting) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1beta1PublicEndpointSetting) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["tidbNodeGroupId"] = o.TidbNodeGroupId
	if o.Enabled.IsSet() {
		toSerialize["enabled"] = o.Enabled.Get()
	}
	if !IsNil(o.IpAccessList) {
		toSerialize["ipAccessList"] = o.IpAccessList
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *V1beta1PublicEndpointSetting) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tidbNodeGroupId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1beta1PublicEndpointSetting := _V1beta1PublicEndpointSetting{}

	err = json.Unmarshal(data, &varV1beta1PublicEndpointSetting)

	if err != nil {
		return err
	}

	*o = V1beta1PublicEndpointSetting(varV1beta1PublicEndpointSetting)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "tidbNodeGroupId")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "ipAccessList")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableV1beta1PublicEndpointSetting struct {
	value *V1beta1PublicEndpointSetting
	isSet bool
}

func (v NullableV1beta1PublicEndpointSetting) Get() *V1beta1PublicEndpointSetting {
	return v.value
}

func (v *NullableV1beta1PublicEndpointSetting) Set(val *V1beta1PublicEndpointSetting) {
	v.value = val
	v.isSet = true
}

func (v NullableV1beta1PublicEndpointSetting) IsSet() bool {
	return v.isSet
}

func (v *NullableV1beta1PublicEndpointSetting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1beta1PublicEndpointSetting(val *V1beta1PublicEndpointSetting) *NullableV1beta1PublicEndpointSetting {
	return &NullableV1beta1PublicEndpointSetting{value: val, isSet: true}
}

func (v NullableV1beta1PublicEndpointSetting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1beta1PublicEndpointSetting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
