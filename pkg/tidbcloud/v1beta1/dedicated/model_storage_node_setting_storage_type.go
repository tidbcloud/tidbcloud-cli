/*
TiDB Cloud Dedicated Open API

TiDB Cloud Dedicated Open API.

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicated

import (
	"encoding/json"
)

// StorageNodeSettingStorageType Spec https://pingcap.feishu.cn/wiki/R6dcwK0Q3i9XSgkgG1Scoc82nbf.   - Basic: Data disk: gp3; Raft log disk: none.  - Standard: Data disk: gp3; Raft log disk: gp3.  - Performance: Data disk: gp3; Raft log disk: io2.  - Plus: Data disk: io2; Raft log disk: none.
type StorageNodeSettingStorageType string

// List of StorageNodeSettingStorageType
const (
	STORAGENODESETTINGSTORAGETYPE_BASIC       StorageNodeSettingStorageType = "Basic"
	STORAGENODESETTINGSTORAGETYPE_STANDARD    StorageNodeSettingStorageType = "Standard"
	STORAGENODESETTINGSTORAGETYPE_PERFORMANCE StorageNodeSettingStorageType = "Performance"
	STORAGENODESETTINGSTORAGETYPE_PLUS        StorageNodeSettingStorageType = "Plus"
)

// All allowed values of StorageNodeSettingStorageType enum
var AllowedStorageNodeSettingStorageTypeEnumValues = []StorageNodeSettingStorageType{
	"Basic",
	"Standard",
	"Performance",
	"Plus",
}

func (v *StorageNodeSettingStorageType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StorageNodeSettingStorageType(value)
	for _, existing := range AllowedStorageNodeSettingStorageTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = StorageNodeSettingStorageType(value)
	return nil
}

// NewStorageNodeSettingStorageTypeFromValue returns a pointer to a valid StorageNodeSettingStorageType for the value passed as argument
func NewStorageNodeSettingStorageTypeFromValue(v string) *StorageNodeSettingStorageType {
	ev := StorageNodeSettingStorageType(v)
	return &ev
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StorageNodeSettingStorageType) IsValid() bool {
	for _, existing := range AllowedStorageNodeSettingStorageTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StorageNodeSettingStorageType value
func (v StorageNodeSettingStorageType) Ptr() *StorageNodeSettingStorageType {
	return &v
}

type NullableStorageNodeSettingStorageType struct {
	value *StorageNodeSettingStorageType
	isSet bool
}

func (v NullableStorageNodeSettingStorageType) Get() *StorageNodeSettingStorageType {
	return v.value
}

func (v *NullableStorageNodeSettingStorageType) Set(val *StorageNodeSettingStorageType) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageNodeSettingStorageType) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageNodeSettingStorageType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageNodeSettingStorageType(val *StorageNodeSettingStorageType) *NullableStorageNodeSettingStorageType {
	return &NullableStorageNodeSettingStorageType{value: val, isSet: true}
}

func (v NullableStorageNodeSettingStorageType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageNodeSettingStorageType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
