/*
TiDB Cloud Dedicated Open API

TiDB Cloud Dedicated Open API.

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicated

import (
	"encoding/json"
)

// V1beta1TidbNodeGroupEndpointConnectionType  - PUBLIC: The endpoint is a public endpoint.  - VPC_PEERING: The endpoint is a VPC peering endpoint.  - PRIVATE_ENDPOINT: The endpoint is a private link endpoint.
type V1beta1TidbNodeGroupEndpointConnectionType string

// List of v1beta1TidbNodeGroupEndpointConnectionType
const (
	V1BETA1TIDBNODEGROUPENDPOINTCONNECTIONTYPE_PUBLIC           V1beta1TidbNodeGroupEndpointConnectionType = "PUBLIC"
	V1BETA1TIDBNODEGROUPENDPOINTCONNECTIONTYPE_VPC_PEERING      V1beta1TidbNodeGroupEndpointConnectionType = "VPC_PEERING"
	V1BETA1TIDBNODEGROUPENDPOINTCONNECTIONTYPE_PRIVATE_ENDPOINT V1beta1TidbNodeGroupEndpointConnectionType = "PRIVATE_ENDPOINT"
)

// All allowed values of V1beta1TidbNodeGroupEndpointConnectionType enum
var AllowedV1beta1TidbNodeGroupEndpointConnectionTypeEnumValues = []V1beta1TidbNodeGroupEndpointConnectionType{
	"PUBLIC",
	"VPC_PEERING",
	"PRIVATE_ENDPOINT",
}

func (v *V1beta1TidbNodeGroupEndpointConnectionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V1beta1TidbNodeGroupEndpointConnectionType(value)
	for _, existing := range AllowedV1beta1TidbNodeGroupEndpointConnectionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = V1beta1TidbNodeGroupEndpointConnectionType(value)
	return nil
}

// NewV1beta1TidbNodeGroupEndpointConnectionTypeFromValue returns a pointer to a valid V1beta1TidbNodeGroupEndpointConnectionType for the value passed as argument
func NewV1beta1TidbNodeGroupEndpointConnectionTypeFromValue(v string) *V1beta1TidbNodeGroupEndpointConnectionType {
	ev := V1beta1TidbNodeGroupEndpointConnectionType(v)
	return &ev
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V1beta1TidbNodeGroupEndpointConnectionType) IsValid() bool {
	for _, existing := range AllowedV1beta1TidbNodeGroupEndpointConnectionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v1beta1TidbNodeGroupEndpointConnectionType value
func (v V1beta1TidbNodeGroupEndpointConnectionType) Ptr() *V1beta1TidbNodeGroupEndpointConnectionType {
	return &v
}

type NullableV1beta1TidbNodeGroupEndpointConnectionType struct {
	value *V1beta1TidbNodeGroupEndpointConnectionType
	isSet bool
}

func (v NullableV1beta1TidbNodeGroupEndpointConnectionType) Get() *V1beta1TidbNodeGroupEndpointConnectionType {
	return v.value
}

func (v *NullableV1beta1TidbNodeGroupEndpointConnectionType) Set(val *V1beta1TidbNodeGroupEndpointConnectionType) {
	v.value = val
	v.isSet = true
}

func (v NullableV1beta1TidbNodeGroupEndpointConnectionType) IsSet() bool {
	return v.isSet
}

func (v *NullableV1beta1TidbNodeGroupEndpointConnectionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1beta1TidbNodeGroupEndpointConnectionType(val *V1beta1TidbNodeGroupEndpointConnectionType) *NullableV1beta1TidbNodeGroupEndpointConnectionType {
	return &NullableV1beta1TidbNodeGroupEndpointConnectionType{value: val, isSet: true}
}

func (v NullableV1beta1TidbNodeGroupEndpointConnectionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1beta1TidbNodeGroupEndpointConnectionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
