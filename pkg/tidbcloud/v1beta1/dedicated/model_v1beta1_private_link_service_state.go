/*
TiDB Cloud Dedicated Open API

TiDB Cloud Dedicated Open API.

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicated

import (
	"encoding/json"
	"fmt"
)

// V1beta1PrivateLinkServiceState the model 'V1beta1PrivateLinkServiceState'
type V1beta1PrivateLinkServiceState string

// List of v1beta1PrivateLinkServiceState
const (
	V1BETA1PRIVATELINKSERVICESTATE_CREATING V1beta1PrivateLinkServiceState = "CREATING"
	V1BETA1PRIVATELINKSERVICESTATE_ACTIVE V1beta1PrivateLinkServiceState = "ACTIVE"
	V1BETA1PRIVATELINKSERVICESTATE_DELETING V1beta1PrivateLinkServiceState = "DELETING"
)

// All allowed values of V1beta1PrivateLinkServiceState enum
var AllowedV1beta1PrivateLinkServiceStateEnumValues = []V1beta1PrivateLinkServiceState{
	"CREATING",
	"ACTIVE",
	"DELETING",
}

func (v *V1beta1PrivateLinkServiceState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V1beta1PrivateLinkServiceState(value)
	for _, existing := range AllowedV1beta1PrivateLinkServiceStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V1beta1PrivateLinkServiceState", value)
}

// NewV1beta1PrivateLinkServiceStateFromValue returns a pointer to a valid V1beta1PrivateLinkServiceState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV1beta1PrivateLinkServiceStateFromValue(v string) (*V1beta1PrivateLinkServiceState, error) {
	ev := V1beta1PrivateLinkServiceState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V1beta1PrivateLinkServiceState: valid values are %v", v, AllowedV1beta1PrivateLinkServiceStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V1beta1PrivateLinkServiceState) IsValid() bool {
	for _, existing := range AllowedV1beta1PrivateLinkServiceStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v1beta1PrivateLinkServiceState value
func (v V1beta1PrivateLinkServiceState) Ptr() *V1beta1PrivateLinkServiceState {
	return &v
}

type NullableV1beta1PrivateLinkServiceState struct {
	value *V1beta1PrivateLinkServiceState
	isSet bool
}

func (v NullableV1beta1PrivateLinkServiceState) Get() *V1beta1PrivateLinkServiceState {
	return v.value
}

func (v *NullableV1beta1PrivateLinkServiceState) Set(val *V1beta1PrivateLinkServiceState) {
	v.value = val
	v.isSet = true
}

func (v NullableV1beta1PrivateLinkServiceState) IsSet() bool {
	return v.isSet
}

func (v *NullableV1beta1PrivateLinkServiceState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1beta1PrivateLinkServiceState(val *V1beta1PrivateLinkServiceState) *NullableV1beta1PrivateLinkServiceState {
	return &NullableV1beta1PrivateLinkServiceState{value: val, isSet: true}
}

func (v NullableV1beta1PrivateLinkServiceState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1beta1PrivateLinkServiceState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

