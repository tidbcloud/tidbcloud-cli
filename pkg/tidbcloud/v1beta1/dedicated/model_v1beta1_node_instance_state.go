/*
TiDB Cloud Dedicated Open API

TiDB Cloud Dedicated Open API.

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicated

import (
	"encoding/json"
)

// V1beta1NodeInstanceState the model 'V1beta1NodeInstanceState'
type V1beta1NodeInstanceState string

// List of v1beta1NodeInstanceState
const (
	V1BETA1NODEINSTANCESTATE_CREATING    V1beta1NodeInstanceState = "CREATING"
	V1BETA1NODEINSTANCESTATE_AVAILABLE   V1beta1NodeInstanceState = "AVAILABLE"
	V1BETA1NODEINSTANCESTATE_DELETING    V1beta1NodeInstanceState = "DELETING"
	V1BETA1NODEINSTANCESTATE_UNAVAILABLE V1beta1NodeInstanceState = "UNAVAILABLE"
)

// All allowed values of V1beta1NodeInstanceState enum
var AllowedV1beta1NodeInstanceStateEnumValues = []V1beta1NodeInstanceState{
	"CREATING",
	"AVAILABLE",
	"DELETING",
	"UNAVAILABLE",
}

func (v *V1beta1NodeInstanceState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V1beta1NodeInstanceState(value)
	for _, existing := range AllowedV1beta1NodeInstanceStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = V1beta1NodeInstanceState(value)
	return nil
}

// NewV1beta1NodeInstanceStateFromValue returns a pointer to a valid V1beta1NodeInstanceState for the value passed as argument
func NewV1beta1NodeInstanceStateFromValue(v string) *V1beta1NodeInstanceState {
	ev := V1beta1NodeInstanceState(v)
	return &ev
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V1beta1NodeInstanceState) IsValid() bool {
	for _, existing := range AllowedV1beta1NodeInstanceStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v1beta1NodeInstanceState value
func (v V1beta1NodeInstanceState) Ptr() *V1beta1NodeInstanceState {
	return &v
}

type NullableV1beta1NodeInstanceState struct {
	value *V1beta1NodeInstanceState
	isSet bool
}

func (v NullableV1beta1NodeInstanceState) Get() *V1beta1NodeInstanceState {
	return v.value
}

func (v *NullableV1beta1NodeInstanceState) Set(val *V1beta1NodeInstanceState) {
	v.value = val
	v.isSet = true
}

func (v NullableV1beta1NodeInstanceState) IsSet() bool {
	return v.isSet
}

func (v *NullableV1beta1NodeInstanceState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1beta1NodeInstanceState(val *V1beta1NodeInstanceState) *NullableV1beta1NodeInstanceState {
	return &NullableV1beta1NodeInstanceState{value: val, isSet: true}
}

func (v NullableV1beta1NodeInstanceState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1beta1NodeInstanceState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
