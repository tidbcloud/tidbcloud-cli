/*
TiDB Cloud Dedicated Open API

TiDB Cloud Dedicated Open API.

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicated

import (
	"encoding/json"
	"fmt"
)

// checks if the V1beta1ClusterStorageNodeSetting type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1beta1ClusterStorageNodeSetting{}

// V1beta1ClusterStorageNodeSetting struct for V1beta1ClusterStorageNodeSetting
type V1beta1ClusterStorageNodeSetting struct {
	NodeCount     int32  `json:"nodeCount"`
	NodeSpecKey   string `json:"nodeSpecKey"`
	StorageSizeGi int32  `json:"storageSizeGi"`
	// Default to Basic.
	StorageType *StorageNodeSettingStorageType `json:"storageType,omitempty"`
	// If raft_store_iops is not set, the default IOPS of raft store will be used.
	RaftStoreIops        NullableInt32                `json:"raftStoreIops,omitempty"`
	NodeSpecDisplayName  *string                      `json:"nodeSpecDisplayName,omitempty"`
	NodeChangingProgress *ClusterNodeChangingProgress `json:"nodeChangingProgress,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _V1beta1ClusterStorageNodeSetting V1beta1ClusterStorageNodeSetting

// NewV1beta1ClusterStorageNodeSetting instantiates a new V1beta1ClusterStorageNodeSetting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1beta1ClusterStorageNodeSetting(nodeCount int32, nodeSpecKey string, storageSizeGi int32) *V1beta1ClusterStorageNodeSetting {
	this := V1beta1ClusterStorageNodeSetting{}
	this.NodeCount = nodeCount
	this.NodeSpecKey = nodeSpecKey
	this.StorageSizeGi = storageSizeGi
	return &this
}

// NewV1beta1ClusterStorageNodeSettingWithDefaults instantiates a new V1beta1ClusterStorageNodeSetting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1beta1ClusterStorageNodeSettingWithDefaults() *V1beta1ClusterStorageNodeSetting {
	this := V1beta1ClusterStorageNodeSetting{}
	return &this
}

// GetNodeCount returns the NodeCount field value
func (o *V1beta1ClusterStorageNodeSetting) GetNodeCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NodeCount
}

// GetNodeCountOk returns a tuple with the NodeCount field value
// and a boolean to check if the value has been set.
func (o *V1beta1ClusterStorageNodeSetting) GetNodeCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeCount, true
}

// SetNodeCount sets field value
func (o *V1beta1ClusterStorageNodeSetting) SetNodeCount(v int32) {
	o.NodeCount = v
}

// GetNodeSpecKey returns the NodeSpecKey field value
func (o *V1beta1ClusterStorageNodeSetting) GetNodeSpecKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeSpecKey
}

// GetNodeSpecKeyOk returns a tuple with the NodeSpecKey field value
// and a boolean to check if the value has been set.
func (o *V1beta1ClusterStorageNodeSetting) GetNodeSpecKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeSpecKey, true
}

// SetNodeSpecKey sets field value
func (o *V1beta1ClusterStorageNodeSetting) SetNodeSpecKey(v string) {
	o.NodeSpecKey = v
}

// GetStorageSizeGi returns the StorageSizeGi field value
func (o *V1beta1ClusterStorageNodeSetting) GetStorageSizeGi() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.StorageSizeGi
}

// GetStorageSizeGiOk returns a tuple with the StorageSizeGi field value
// and a boolean to check if the value has been set.
func (o *V1beta1ClusterStorageNodeSetting) GetStorageSizeGiOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StorageSizeGi, true
}

// SetStorageSizeGi sets field value
func (o *V1beta1ClusterStorageNodeSetting) SetStorageSizeGi(v int32) {
	o.StorageSizeGi = v
}

// GetStorageType returns the StorageType field value if set, zero value otherwise.
func (o *V1beta1ClusterStorageNodeSetting) GetStorageType() StorageNodeSettingStorageType {
	if o == nil || IsNil(o.StorageType) {
		var ret StorageNodeSettingStorageType
		return ret
	}
	return *o.StorageType
}

// GetStorageTypeOk returns a tuple with the StorageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1beta1ClusterStorageNodeSetting) GetStorageTypeOk() (*StorageNodeSettingStorageType, bool) {
	if o == nil || IsNil(o.StorageType) {
		return nil, false
	}
	return o.StorageType, true
}

// HasStorageType returns a boolean if a field has been set.
func (o *V1beta1ClusterStorageNodeSetting) HasStorageType() bool {
	if o != nil && !IsNil(o.StorageType) {
		return true
	}

	return false
}

// SetStorageType gets a reference to the given StorageNodeSettingStorageType and assigns it to the StorageType field.
func (o *V1beta1ClusterStorageNodeSetting) SetStorageType(v StorageNodeSettingStorageType) {
	o.StorageType = &v
}

// GetRaftStoreIops returns the RaftStoreIops field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *V1beta1ClusterStorageNodeSetting) GetRaftStoreIops() int32 {
	if o == nil || IsNil(o.RaftStoreIops.Get()) {
		var ret int32
		return ret
	}
	return *o.RaftStoreIops.Get()
}

// GetRaftStoreIopsOk returns a tuple with the RaftStoreIops field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *V1beta1ClusterStorageNodeSetting) GetRaftStoreIopsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RaftStoreIops.Get(), o.RaftStoreIops.IsSet()
}

// HasRaftStoreIops returns a boolean if a field has been set.
func (o *V1beta1ClusterStorageNodeSetting) HasRaftStoreIops() bool {
	if o != nil && o.RaftStoreIops.IsSet() {
		return true
	}

	return false
}

// SetRaftStoreIops gets a reference to the given NullableInt32 and assigns it to the RaftStoreIops field.
func (o *V1beta1ClusterStorageNodeSetting) SetRaftStoreIops(v int32) {
	o.RaftStoreIops.Set(&v)
}

// SetRaftStoreIopsNil sets the value for RaftStoreIops to be an explicit nil
func (o *V1beta1ClusterStorageNodeSetting) SetRaftStoreIopsNil() {
	o.RaftStoreIops.Set(nil)
}

// UnsetRaftStoreIops ensures that no value is present for RaftStoreIops, not even an explicit nil
func (o *V1beta1ClusterStorageNodeSetting) UnsetRaftStoreIops() {
	o.RaftStoreIops.Unset()
}

// GetNodeSpecDisplayName returns the NodeSpecDisplayName field value if set, zero value otherwise.
func (o *V1beta1ClusterStorageNodeSetting) GetNodeSpecDisplayName() string {
	if o == nil || IsNil(o.NodeSpecDisplayName) {
		var ret string
		return ret
	}
	return *o.NodeSpecDisplayName
}

// GetNodeSpecDisplayNameOk returns a tuple with the NodeSpecDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1beta1ClusterStorageNodeSetting) GetNodeSpecDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.NodeSpecDisplayName) {
		return nil, false
	}
	return o.NodeSpecDisplayName, true
}

// HasNodeSpecDisplayName returns a boolean if a field has been set.
func (o *V1beta1ClusterStorageNodeSetting) HasNodeSpecDisplayName() bool {
	if o != nil && !IsNil(o.NodeSpecDisplayName) {
		return true
	}

	return false
}

// SetNodeSpecDisplayName gets a reference to the given string and assigns it to the NodeSpecDisplayName field.
func (o *V1beta1ClusterStorageNodeSetting) SetNodeSpecDisplayName(v string) {
	o.NodeSpecDisplayName = &v
}

// GetNodeChangingProgress returns the NodeChangingProgress field value if set, zero value otherwise.
func (o *V1beta1ClusterStorageNodeSetting) GetNodeChangingProgress() ClusterNodeChangingProgress {
	if o == nil || IsNil(o.NodeChangingProgress) {
		var ret ClusterNodeChangingProgress
		return ret
	}
	return *o.NodeChangingProgress
}

// GetNodeChangingProgressOk returns a tuple with the NodeChangingProgress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1beta1ClusterStorageNodeSetting) GetNodeChangingProgressOk() (*ClusterNodeChangingProgress, bool) {
	if o == nil || IsNil(o.NodeChangingProgress) {
		return nil, false
	}
	return o.NodeChangingProgress, true
}

// HasNodeChangingProgress returns a boolean if a field has been set.
func (o *V1beta1ClusterStorageNodeSetting) HasNodeChangingProgress() bool {
	if o != nil && !IsNil(o.NodeChangingProgress) {
		return true
	}

	return false
}

// SetNodeChangingProgress gets a reference to the given ClusterNodeChangingProgress and assigns it to the NodeChangingProgress field.
func (o *V1beta1ClusterStorageNodeSetting) SetNodeChangingProgress(v ClusterNodeChangingProgress) {
	o.NodeChangingProgress = &v
}

func (o V1beta1ClusterStorageNodeSetting) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1beta1ClusterStorageNodeSetting) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["nodeCount"] = o.NodeCount
	toSerialize["nodeSpecKey"] = o.NodeSpecKey
	toSerialize["storageSizeGi"] = o.StorageSizeGi
	if !IsNil(o.StorageType) {
		toSerialize["storageType"] = o.StorageType
	}
	if o.RaftStoreIops.IsSet() {
		toSerialize["raftStoreIops"] = o.RaftStoreIops.Get()
	}
	if !IsNil(o.NodeSpecDisplayName) {
		toSerialize["nodeSpecDisplayName"] = o.NodeSpecDisplayName
	}
	if !IsNil(o.NodeChangingProgress) {
		toSerialize["nodeChangingProgress"] = o.NodeChangingProgress
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *V1beta1ClusterStorageNodeSetting) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"nodeCount",
		"nodeSpecKey",
		"storageSizeGi",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1beta1ClusterStorageNodeSetting := _V1beta1ClusterStorageNodeSetting{}

	err = json.Unmarshal(data, &varV1beta1ClusterStorageNodeSetting)

	if err != nil {
		return err
	}

	*o = V1beta1ClusterStorageNodeSetting(varV1beta1ClusterStorageNodeSetting)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "nodeCount")
		delete(additionalProperties, "nodeSpecKey")
		delete(additionalProperties, "storageSizeGi")
		delete(additionalProperties, "storageType")
		delete(additionalProperties, "raftStoreIops")
		delete(additionalProperties, "nodeSpecDisplayName")
		delete(additionalProperties, "nodeChangingProgress")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableV1beta1ClusterStorageNodeSetting struct {
	value *V1beta1ClusterStorageNodeSetting
	isSet bool
}

func (v NullableV1beta1ClusterStorageNodeSetting) Get() *V1beta1ClusterStorageNodeSetting {
	return v.value
}

func (v *NullableV1beta1ClusterStorageNodeSetting) Set(val *V1beta1ClusterStorageNodeSetting) {
	v.value = val
	v.isSet = true
}

func (v NullableV1beta1ClusterStorageNodeSetting) IsSet() bool {
	return v.isSet
}

func (v *NullableV1beta1ClusterStorageNodeSetting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1beta1ClusterStorageNodeSetting(val *V1beta1ClusterStorageNodeSetting) *NullableV1beta1ClusterStorageNodeSetting {
	return &NullableV1beta1ClusterStorageNodeSetting{value: val, isSet: true}
}

func (v NullableV1beta1ClusterStorageNodeSetting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1beta1ClusterStorageNodeSetting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
