/*
TiDB Cloud Dedicated Open API

TiDB Cloud Dedicated Open API.

API version: v1beta1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dedicated

import (
	"encoding/json"
	"fmt"
)

// Dedicatedv1beta1ClusterPausePlanType the model 'Dedicatedv1beta1ClusterPausePlanType'
type Dedicatedv1beta1ClusterPausePlanType string

// List of dedicatedv1beta1ClusterPausePlanType
const (
	DEDICATEDV1BETA1CLUSTERPAUSEPLANTYPE_NORMAL Dedicatedv1beta1ClusterPausePlanType = "NORMAL"
	DEDICATEDV1BETA1CLUSTERPAUSEPLANTYPE_DEPRECATE Dedicatedv1beta1ClusterPausePlanType = "DEPRECATE"
)

// All allowed values of Dedicatedv1beta1ClusterPausePlanType enum
var AllowedDedicatedv1beta1ClusterPausePlanTypeEnumValues = []Dedicatedv1beta1ClusterPausePlanType{
	"NORMAL",
	"DEPRECATE",
}

func (v *Dedicatedv1beta1ClusterPausePlanType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Dedicatedv1beta1ClusterPausePlanType(value)
	for _, existing := range AllowedDedicatedv1beta1ClusterPausePlanTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Dedicatedv1beta1ClusterPausePlanType", value)
}

// NewDedicatedv1beta1ClusterPausePlanTypeFromValue returns a pointer to a valid Dedicatedv1beta1ClusterPausePlanType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDedicatedv1beta1ClusterPausePlanTypeFromValue(v string) (*Dedicatedv1beta1ClusterPausePlanType, error) {
	ev := Dedicatedv1beta1ClusterPausePlanType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Dedicatedv1beta1ClusterPausePlanType: valid values are %v", v, AllowedDedicatedv1beta1ClusterPausePlanTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Dedicatedv1beta1ClusterPausePlanType) IsValid() bool {
	for _, existing := range AllowedDedicatedv1beta1ClusterPausePlanTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to dedicatedv1beta1ClusterPausePlanType value
func (v Dedicatedv1beta1ClusterPausePlanType) Ptr() *Dedicatedv1beta1ClusterPausePlanType {
	return &v
}

type NullableDedicatedv1beta1ClusterPausePlanType struct {
	value *Dedicatedv1beta1ClusterPausePlanType
	isSet bool
}

func (v NullableDedicatedv1beta1ClusterPausePlanType) Get() *Dedicatedv1beta1ClusterPausePlanType {
	return v.value
}

func (v *NullableDedicatedv1beta1ClusterPausePlanType) Set(val *Dedicatedv1beta1ClusterPausePlanType) {
	v.value = val
	v.isSet = true
}

func (v NullableDedicatedv1beta1ClusterPausePlanType) IsSet() bool {
	return v.isSet
}

func (v *NullableDedicatedv1beta1ClusterPausePlanType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDedicatedv1beta1ClusterPausePlanType(val *Dedicatedv1beta1ClusterPausePlanType) *NullableDedicatedv1beta1ClusterPausePlanType {
	return &NullableDedicatedv1beta1ClusterPausePlanType{value: val, isSet: true}
}

func (v NullableDedicatedv1beta1ClusterPausePlanType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDedicatedv1beta1ClusterPausePlanType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

