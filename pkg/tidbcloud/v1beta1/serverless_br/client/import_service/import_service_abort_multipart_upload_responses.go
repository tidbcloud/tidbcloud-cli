// Code generated by go-swagger; DO NOT EDIT.

package import_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"tidbcloud-cli/pkg/tidbcloud/v1beta1/serverless_br/models"
)

// ImportServiceAbortMultipartUploadReader is a Reader for the ImportServiceAbortMultipartUpload structure.
type ImportServiceAbortMultipartUploadReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ImportServiceAbortMultipartUploadReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewImportServiceAbortMultipartUploadOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewImportServiceAbortMultipartUploadDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewImportServiceAbortMultipartUploadOK creates a ImportServiceAbortMultipartUploadOK with default headers values
func NewImportServiceAbortMultipartUploadOK() *ImportServiceAbortMultipartUploadOK {
	return &ImportServiceAbortMultipartUploadOK{}
}

/*
ImportServiceAbortMultipartUploadOK describes a response with status code 200, with default header values.

A successful response.
*/
type ImportServiceAbortMultipartUploadOK struct {
	Payload interface{}
}

// IsSuccess returns true when this import service abort multipart upload o k response has a 2xx status code
func (o *ImportServiceAbortMultipartUploadOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this import service abort multipart upload o k response has a 3xx status code
func (o *ImportServiceAbortMultipartUploadOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this import service abort multipart upload o k response has a 4xx status code
func (o *ImportServiceAbortMultipartUploadOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this import service abort multipart upload o k response has a 5xx status code
func (o *ImportServiceAbortMultipartUploadOK) IsServerError() bool {
	return false
}

// IsCode returns true when this import service abort multipart upload o k response a status code equal to that given
func (o *ImportServiceAbortMultipartUploadOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the import service abort multipart upload o k response
func (o *ImportServiceAbortMultipartUploadOK) Code() int {
	return 200
}

func (o *ImportServiceAbortMultipartUploadOK) Error() string {
	return fmt.Sprintf("[POST /v1beta1/clusters/{clusterId}/upload_url/abort][%d] importServiceAbortMultipartUploadOK  %+v", 200, o.Payload)
}

func (o *ImportServiceAbortMultipartUploadOK) String() string {
	return fmt.Sprintf("[POST /v1beta1/clusters/{clusterId}/upload_url/abort][%d] importServiceAbortMultipartUploadOK  %+v", 200, o.Payload)
}

func (o *ImportServiceAbortMultipartUploadOK) GetPayload() interface{} {
	return o.Payload
}

func (o *ImportServiceAbortMultipartUploadOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewImportServiceAbortMultipartUploadDefault creates a ImportServiceAbortMultipartUploadDefault with default headers values
func NewImportServiceAbortMultipartUploadDefault(code int) *ImportServiceAbortMultipartUploadDefault {
	return &ImportServiceAbortMultipartUploadDefault{
		_statusCode: code,
	}
}

/*
ImportServiceAbortMultipartUploadDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type ImportServiceAbortMultipartUploadDefault struct {
	_statusCode int

	Payload *models.RPCStatus
}

// IsSuccess returns true when this import service abort multipart upload default response has a 2xx status code
func (o *ImportServiceAbortMultipartUploadDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this import service abort multipart upload default response has a 3xx status code
func (o *ImportServiceAbortMultipartUploadDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this import service abort multipart upload default response has a 4xx status code
func (o *ImportServiceAbortMultipartUploadDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this import service abort multipart upload default response has a 5xx status code
func (o *ImportServiceAbortMultipartUploadDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this import service abort multipart upload default response a status code equal to that given
func (o *ImportServiceAbortMultipartUploadDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the import service abort multipart upload default response
func (o *ImportServiceAbortMultipartUploadDefault) Code() int {
	return o._statusCode
}

func (o *ImportServiceAbortMultipartUploadDefault) Error() string {
	return fmt.Sprintf("[POST /v1beta1/clusters/{clusterId}/upload_url/abort][%d] ImportService_AbortMultipartUpload default  %+v", o._statusCode, o.Payload)
}

func (o *ImportServiceAbortMultipartUploadDefault) String() string {
	return fmt.Sprintf("[POST /v1beta1/clusters/{clusterId}/upload_url/abort][%d] ImportService_AbortMultipartUpload default  %+v", o._statusCode, o.Payload)
}

func (o *ImportServiceAbortMultipartUploadDefault) GetPayload() *models.RPCStatus {
	return o.Payload
}

func (o *ImportServiceAbortMultipartUploadDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RPCStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
