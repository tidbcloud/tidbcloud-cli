// Code generated by go-swagger; DO NOT EDIT.

package backup_restore_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"tidbcloud-cli/pkg/tidbcloud/v1beta1/serverless_br/models"
)

// BackupRestoreServiceListBackupsReader is a Reader for the BackupRestoreServiceListBackups structure.
type BackupRestoreServiceListBackupsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *BackupRestoreServiceListBackupsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewBackupRestoreServiceListBackupsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewBackupRestoreServiceListBackupsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewBackupRestoreServiceListBackupsOK creates a BackupRestoreServiceListBackupsOK with default headers values
func NewBackupRestoreServiceListBackupsOK() *BackupRestoreServiceListBackupsOK {
	return &BackupRestoreServiceListBackupsOK{}
}

/*
BackupRestoreServiceListBackupsOK describes a response with status code 200, with default header values.

A successful response.
*/
type BackupRestoreServiceListBackupsOK struct {
	Payload *models.V1beta1ListBackupsResponse
}

// IsSuccess returns true when this backup restore service list backups o k response has a 2xx status code
func (o *BackupRestoreServiceListBackupsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this backup restore service list backups o k response has a 3xx status code
func (o *BackupRestoreServiceListBackupsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this backup restore service list backups o k response has a 4xx status code
func (o *BackupRestoreServiceListBackupsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this backup restore service list backups o k response has a 5xx status code
func (o *BackupRestoreServiceListBackupsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this backup restore service list backups o k response a status code equal to that given
func (o *BackupRestoreServiceListBackupsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the backup restore service list backups o k response
func (o *BackupRestoreServiceListBackupsOK) Code() int {
	return 200
}

func (o *BackupRestoreServiceListBackupsOK) Error() string {
	return fmt.Sprintf("[GET /v1beta1/backups][%d] backupRestoreServiceListBackupsOK  %+v", 200, o.Payload)
}

func (o *BackupRestoreServiceListBackupsOK) String() string {
	return fmt.Sprintf("[GET /v1beta1/backups][%d] backupRestoreServiceListBackupsOK  %+v", 200, o.Payload)
}

func (o *BackupRestoreServiceListBackupsOK) GetPayload() *models.V1beta1ListBackupsResponse {
	return o.Payload
}

func (o *BackupRestoreServiceListBackupsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V1beta1ListBackupsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBackupRestoreServiceListBackupsDefault creates a BackupRestoreServiceListBackupsDefault with default headers values
func NewBackupRestoreServiceListBackupsDefault(code int) *BackupRestoreServiceListBackupsDefault {
	return &BackupRestoreServiceListBackupsDefault{
		_statusCode: code,
	}
}

/*
BackupRestoreServiceListBackupsDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type BackupRestoreServiceListBackupsDefault struct {
	_statusCode int

	Payload *models.RPCStatus
}

// IsSuccess returns true when this backup restore service list backups default response has a 2xx status code
func (o *BackupRestoreServiceListBackupsDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this backup restore service list backups default response has a 3xx status code
func (o *BackupRestoreServiceListBackupsDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this backup restore service list backups default response has a 4xx status code
func (o *BackupRestoreServiceListBackupsDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this backup restore service list backups default response has a 5xx status code
func (o *BackupRestoreServiceListBackupsDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this backup restore service list backups default response a status code equal to that given
func (o *BackupRestoreServiceListBackupsDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the backup restore service list backups default response
func (o *BackupRestoreServiceListBackupsDefault) Code() int {
	return o._statusCode
}

func (o *BackupRestoreServiceListBackupsDefault) Error() string {
	return fmt.Sprintf("[GET /v1beta1/backups][%d] BackupRestoreService_ListBackups default  %+v", o._statusCode, o.Payload)
}

func (o *BackupRestoreServiceListBackupsDefault) String() string {
	return fmt.Sprintf("[GET /v1beta1/backups][%d] BackupRestoreService_ListBackups default  %+v", o._statusCode, o.Payload)
}

func (o *BackupRestoreServiceListBackupsDefault) GetPayload() *models.RPCStatus {
	return o.Payload
}

func (o *BackupRestoreServiceListBackupsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RPCStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
