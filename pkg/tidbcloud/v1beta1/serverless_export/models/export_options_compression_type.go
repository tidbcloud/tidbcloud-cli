// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ExportOptionsCompressionType  - Compression_UNSPECIFIED: The type of the compression is unknown.
//
// swagger:model ExportOptionsCompressionType
type ExportOptionsCompressionType string

func NewExportOptionsCompressionType(value ExportOptionsCompressionType) *ExportOptionsCompressionType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ExportOptionsCompressionType.
func (m ExportOptionsCompressionType) Pointer() *ExportOptionsCompressionType {
	return &m
}

const (

	// ExportOptionsCompressionTypeGZIP captures enum value "GZIP"
	ExportOptionsCompressionTypeGZIP ExportOptionsCompressionType = "GZIP"

	// ExportOptionsCompressionTypeSNAPPY captures enum value "SNAPPY"
	ExportOptionsCompressionTypeSNAPPY ExportOptionsCompressionType = "SNAPPY"

	// ExportOptionsCompressionTypeZSTD captures enum value "ZSTD"
	ExportOptionsCompressionTypeZSTD ExportOptionsCompressionType = "ZSTD"

	// ExportOptionsCompressionTypeNONE captures enum value "NONE"
	ExportOptionsCompressionTypeNONE ExportOptionsCompressionType = "NONE"
)

// for schema
var exportOptionsCompressionTypeEnum []interface{}

func init() {
	var res []ExportOptionsCompressionType
	if err := json.Unmarshal([]byte(`["GZIP","SNAPPY","ZSTD","NONE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		exportOptionsCompressionTypeEnum = append(exportOptionsCompressionTypeEnum, v)
	}
}

func (m ExportOptionsCompressionType) validateExportOptionsCompressionTypeEnum(path, location string, value ExportOptionsCompressionType) error {
	if err := validate.EnumCase(path, location, value, exportOptionsCompressionTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this export options compression type
func (m ExportOptionsCompressionType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateExportOptionsCompressionTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this export options compression type based on context it is used
func (m ExportOptionsCompressionType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
