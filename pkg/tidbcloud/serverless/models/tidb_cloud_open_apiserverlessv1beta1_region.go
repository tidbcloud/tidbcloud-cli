// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TidbCloudOpenApiserverlessv1beta1Region Message for describing a region for deploying TiDB Serverless clusters.
//
// swagger:model tidb_cloud_open_apiserverlessv1beta1Region
type TidbCloudOpenApiserverlessv1beta1Region struct {

	// Output_only. Immutable. User-friendly display name of the region.
	// Read Only: true
	DisplayName string `json:"displayName,omitempty"`

	// Required. Immutable. The unique name of the region.
	// Required: true
	Name *string `json:"name"`

	// Output_only. Immutable. The cloud provider for the region.
	// Read Only: true
	Provider *V1beta1RegionCloudProvider `json:"provider,omitempty"`
}

// Validate validates this tidb cloud open apiserverlessv1beta1 region
func (m *TidbCloudOpenApiserverlessv1beta1Region) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvider(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TidbCloudOpenApiserverlessv1beta1Region) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *TidbCloudOpenApiserverlessv1beta1Region) validateProvider(formats strfmt.Registry) error {
	if swag.IsZero(m.Provider) { // not required
		return nil
	}

	if m.Provider != nil {
		if err := m.Provider.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provider")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("provider")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this tidb cloud open apiserverlessv1beta1 region based on the context it is used
func (m *TidbCloudOpenApiserverlessv1beta1Region) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDisplayName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProvider(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TidbCloudOpenApiserverlessv1beta1Region) contextValidateDisplayName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "displayName", "body", string(m.DisplayName)); err != nil {
		return err
	}

	return nil
}

func (m *TidbCloudOpenApiserverlessv1beta1Region) contextValidateProvider(ctx context.Context, formats strfmt.Registry) error {

	if m.Provider != nil {

		if swag.IsZero(m.Provider) { // not required
			return nil
		}

		if err := m.Provider.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provider")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("provider")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TidbCloudOpenApiserverlessv1beta1Region) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TidbCloudOpenApiserverlessv1beta1Region) UnmarshalBinary(b []byte) error {
	var res TidbCloudOpenApiserverlessv1beta1Region
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
