// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TidbCloudOpenApiserverlessv1beta1Cluster Message for a serverless TiDB cluster resource.
//
// swagger:model tidb_cloud_open_apiserverlessv1beta1Cluster
type TidbCloudOpenApiserverlessv1beta1Cluster struct {

	// Optional. The annotations for the cluster.
	Annotations map[string]string `json:"annotations,omitempty"`

	// Optional. Automated backup policy to set on the cluster.
	AutomatedBackupPolicy *V1beta1ClusterAutomatedBackupPolicy `json:"automatedBackupPolicy,omitempty"`

	// Output_only. The unique ID of the cluster.
	// Read Only: true
	ClusterID string `json:"clusterId,omitempty"`

	// Output_only. Timestamp when the cluster was created.
	// Read Only: true
	// Format: date-time
	CreateTime strfmt.DateTime `json:"createTime,omitempty"`

	// Output_only. The email of the creator of the cluster.
	// Read Only: true
	CreatedBy string `json:"createdBy,omitempty"`

	// Required. User friendly display name of the cluster.
	// Required: true
	DisplayName *string `json:"displayName"`

	// Optional. Encryption settings for the cluster.
	EncryptionConfig *V1beta1ClusterEncryptionConfig `json:"encryptionConfig,omitempty"`

	// Optional. The endpoints for connecting to the cluster.
	Endpoints *V1beta1ClusterEndpoints `json:"endpoints,omitempty"`

	// Optional. The labels for the cluster.
	Labels map[string]string `json:"labels,omitempty"`

	// Output_only. The unique name of the cluster.
	// Read Only: true
	Name string `json:"name,omitempty"`

	// Required. Region where the cluster will be created.
	// Required: true
	Region *TidbCloudOpenApiserverlessv1beta1Region `json:"region"`

	// Optional. The spending limit for the cluster.
	SpendingLimit *ClusterSpendingLimit `json:"spendingLimit,omitempty"`

	// Output_only. The current state of the cluster.
	// Read Only: true
	State *TidbCloudOpenApiserverlessv1beta1ClusterState `json:"state,omitempty"`

	// Output_only. Timestamp when the cluster was last updated.
	// Read Only: true
	// Format: date-time
	UpdateTime strfmt.DateTime `json:"updateTime,omitempty"`

	// Output_only. Usage details of the cluster.
	// Read Only: true
	Usage *ClusterUsage `json:"usage,omitempty"`

	// Output_only. The unique prefix in SQL user name.
	// Read Only: true
	UserPrefix string `json:"userPrefix,omitempty"`

	// Output_only. The TiDB version of the cluster.
	// Read Only: true
	Version string `json:"version,omitempty"`
}

// Validate validates this tidb cloud open apiserverlessv1beta1 cluster
func (m *TidbCloudOpenApiserverlessv1beta1Cluster) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAutomatedBackupPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEncryptionConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndpoints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpendingLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TidbCloudOpenApiserverlessv1beta1Cluster) validateAutomatedBackupPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.AutomatedBackupPolicy) { // not required
		return nil
	}

	if m.AutomatedBackupPolicy != nil {
		if err := m.AutomatedBackupPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("automatedBackupPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("automatedBackupPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *TidbCloudOpenApiserverlessv1beta1Cluster) validateCreateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("createTime", "body", "date-time", m.CreateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TidbCloudOpenApiserverlessv1beta1Cluster) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("displayName", "body", m.DisplayName); err != nil {
		return err
	}

	return nil
}

func (m *TidbCloudOpenApiserverlessv1beta1Cluster) validateEncryptionConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.EncryptionConfig) { // not required
		return nil
	}

	if m.EncryptionConfig != nil {
		if err := m.EncryptionConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encryptionConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("encryptionConfig")
			}
			return err
		}
	}

	return nil
}

func (m *TidbCloudOpenApiserverlessv1beta1Cluster) validateEndpoints(formats strfmt.Registry) error {
	if swag.IsZero(m.Endpoints) { // not required
		return nil
	}

	if m.Endpoints != nil {
		if err := m.Endpoints.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("endpoints")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("endpoints")
			}
			return err
		}
	}

	return nil
}

func (m *TidbCloudOpenApiserverlessv1beta1Cluster) validateRegion(formats strfmt.Registry) error {

	if err := validate.Required("region", "body", m.Region); err != nil {
		return err
	}

	if m.Region != nil {
		if err := m.Region.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("region")
			}
			return err
		}
	}

	return nil
}

func (m *TidbCloudOpenApiserverlessv1beta1Cluster) validateSpendingLimit(formats strfmt.Registry) error {
	if swag.IsZero(m.SpendingLimit) { // not required
		return nil
	}

	if m.SpendingLimit != nil {
		if err := m.SpendingLimit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("spendingLimit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("spendingLimit")
			}
			return err
		}
	}

	return nil
}

func (m *TidbCloudOpenApiserverlessv1beta1Cluster) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	if m.State != nil {
		if err := m.State.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

func (m *TidbCloudOpenApiserverlessv1beta1Cluster) validateUpdateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("updateTime", "body", "date-time", m.UpdateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TidbCloudOpenApiserverlessv1beta1Cluster) validateUsage(formats strfmt.Registry) error {
	if swag.IsZero(m.Usage) { // not required
		return nil
	}

	if m.Usage != nil {
		if err := m.Usage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("usage")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this tidb cloud open apiserverlessv1beta1 cluster based on the context it is used
func (m *TidbCloudOpenApiserverlessv1beta1Cluster) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAutomatedBackupPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClusterID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreateTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEncryptionConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEndpoints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSpendingLimit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdateTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserPrefix(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TidbCloudOpenApiserverlessv1beta1Cluster) contextValidateAutomatedBackupPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.AutomatedBackupPolicy != nil {

		if swag.IsZero(m.AutomatedBackupPolicy) { // not required
			return nil
		}

		if err := m.AutomatedBackupPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("automatedBackupPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("automatedBackupPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *TidbCloudOpenApiserverlessv1beta1Cluster) contextValidateClusterID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "clusterId", "body", string(m.ClusterID)); err != nil {
		return err
	}

	return nil
}

func (m *TidbCloudOpenApiserverlessv1beta1Cluster) contextValidateCreateTime(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "createTime", "body", strfmt.DateTime(m.CreateTime)); err != nil {
		return err
	}

	return nil
}

func (m *TidbCloudOpenApiserverlessv1beta1Cluster) contextValidateCreatedBy(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "createdBy", "body", string(m.CreatedBy)); err != nil {
		return err
	}

	return nil
}

func (m *TidbCloudOpenApiserverlessv1beta1Cluster) contextValidateEncryptionConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.EncryptionConfig != nil {

		if swag.IsZero(m.EncryptionConfig) { // not required
			return nil
		}

		if err := m.EncryptionConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encryptionConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("encryptionConfig")
			}
			return err
		}
	}

	return nil
}

func (m *TidbCloudOpenApiserverlessv1beta1Cluster) contextValidateEndpoints(ctx context.Context, formats strfmt.Registry) error {

	if m.Endpoints != nil {

		if swag.IsZero(m.Endpoints) { // not required
			return nil
		}

		if err := m.Endpoints.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("endpoints")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("endpoints")
			}
			return err
		}
	}

	return nil
}

func (m *TidbCloudOpenApiserverlessv1beta1Cluster) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

func (m *TidbCloudOpenApiserverlessv1beta1Cluster) contextValidateRegion(ctx context.Context, formats strfmt.Registry) error {

	if m.Region != nil {

		if err := m.Region.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("region")
			}
			return err
		}
	}

	return nil
}

func (m *TidbCloudOpenApiserverlessv1beta1Cluster) contextValidateSpendingLimit(ctx context.Context, formats strfmt.Registry) error {

	if m.SpendingLimit != nil {

		if swag.IsZero(m.SpendingLimit) { // not required
			return nil
		}

		if err := m.SpendingLimit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("spendingLimit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("spendingLimit")
			}
			return err
		}
	}

	return nil
}

func (m *TidbCloudOpenApiserverlessv1beta1Cluster) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if m.State != nil {

		if swag.IsZero(m.State) { // not required
			return nil
		}

		if err := m.State.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

func (m *TidbCloudOpenApiserverlessv1beta1Cluster) contextValidateUpdateTime(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updateTime", "body", strfmt.DateTime(m.UpdateTime)); err != nil {
		return err
	}

	return nil
}

func (m *TidbCloudOpenApiserverlessv1beta1Cluster) contextValidateUsage(ctx context.Context, formats strfmt.Registry) error {

	if m.Usage != nil {

		if swag.IsZero(m.Usage) { // not required
			return nil
		}

		if err := m.Usage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("usage")
			}
			return err
		}
	}

	return nil
}

func (m *TidbCloudOpenApiserverlessv1beta1Cluster) contextValidateUserPrefix(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "userPrefix", "body", string(m.UserPrefix)); err != nil {
		return err
	}

	return nil
}

func (m *TidbCloudOpenApiserverlessv1beta1Cluster) contextValidateVersion(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "version", "body", string(m.Version)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TidbCloudOpenApiserverlessv1beta1Cluster) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TidbCloudOpenApiserverlessv1beta1Cluster) UnmarshalBinary(b []byte) error {
	var res TidbCloudOpenApiserverlessv1beta1Cluster
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
