// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1beta1ClusterView Enum for the different types of detail view to be returned for a TiDB Serverless cluster.
//
//   - CLUSTER_VIEW_UNSPECIFIED: The server default is used if unspecified.
//   - BASIC: Only basic information about the cluster is returned.
//   - FULL: All details about the cluster are returned.
//
// swagger:model v1beta1ClusterView
type V1beta1ClusterView string

func NewV1beta1ClusterView(value V1beta1ClusterView) *V1beta1ClusterView {
	return &value
}

// Pointer returns a pointer to a freshly-allocated V1beta1ClusterView.
func (m V1beta1ClusterView) Pointer() *V1beta1ClusterView {
	return &m
}

const (

	// V1beta1ClusterViewCLUSTERVIEWUNSPECIFIED captures enum value "CLUSTER_VIEW_UNSPECIFIED"
	V1beta1ClusterViewCLUSTERVIEWUNSPECIFIED V1beta1ClusterView = "CLUSTER_VIEW_UNSPECIFIED"

	// V1beta1ClusterViewBASIC captures enum value "BASIC"
	V1beta1ClusterViewBASIC V1beta1ClusterView = "BASIC"

	// V1beta1ClusterViewFULL captures enum value "FULL"
	V1beta1ClusterViewFULL V1beta1ClusterView = "FULL"
)

// for schema
var v1beta1ClusterViewEnum []interface{}

func init() {
	var res []V1beta1ClusterView
	if err := json.Unmarshal([]byte(`["CLUSTER_VIEW_UNSPECIFIED","BASIC","FULL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1beta1ClusterViewEnum = append(v1beta1ClusterViewEnum, v)
	}
}

func (m V1beta1ClusterView) validateV1beta1ClusterViewEnum(path, location string, value V1beta1ClusterView) error {
	if err := validate.EnumCase(path, location, value, v1beta1ClusterViewEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1beta1 cluster view
func (m V1beta1ClusterView) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1beta1ClusterViewEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1beta1 cluster view based on context it is used
func (m V1beta1ClusterView) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
