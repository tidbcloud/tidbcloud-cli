// Code generated by go-swagger; DO NOT EDIT.

package serverless_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewServerlessServiceListClustersParams creates a new ServerlessServiceListClustersParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewServerlessServiceListClustersParams() *ServerlessServiceListClustersParams {
	return &ServerlessServiceListClustersParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewServerlessServiceListClustersParamsWithTimeout creates a new ServerlessServiceListClustersParams object
// with the ability to set a timeout on a request.
func NewServerlessServiceListClustersParamsWithTimeout(timeout time.Duration) *ServerlessServiceListClustersParams {
	return &ServerlessServiceListClustersParams{
		timeout: timeout,
	}
}

// NewServerlessServiceListClustersParamsWithContext creates a new ServerlessServiceListClustersParams object
// with the ability to set a context for a request.
func NewServerlessServiceListClustersParamsWithContext(ctx context.Context) *ServerlessServiceListClustersParams {
	return &ServerlessServiceListClustersParams{
		Context: ctx,
	}
}

// NewServerlessServiceListClustersParamsWithHTTPClient creates a new ServerlessServiceListClustersParams object
// with the ability to set a custom HTTPClient for a request.
func NewServerlessServiceListClustersParamsWithHTTPClient(client *http.Client) *ServerlessServiceListClustersParams {
	return &ServerlessServiceListClustersParams{
		HTTPClient: client,
	}
}

/*
ServerlessServiceListClustersParams contains all the parameters to send to the API endpoint

	for the serverless service list clusters operation.

	Typically these are written to a http.Request.
*/
type ServerlessServiceListClustersParams struct {

	/* Filter.

	   Optional. The filter expression to filter clusters.
	*/
	Filter *string

	/* OrderBy.

	   Optional. The order by expression for sorting clusters.
	*/
	OrderBy *string

	/* PageSize.

	   Optional. The maximum number of clusters to return.

	   Format: int32
	*/
	PageSize *int32

	/* PageToken.

	   Optional. The page token from the previous response for pagination.
	*/
	PageToken *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the serverless service list clusters params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ServerlessServiceListClustersParams) WithDefaults() *ServerlessServiceListClustersParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the serverless service list clusters params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ServerlessServiceListClustersParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the serverless service list clusters params
func (o *ServerlessServiceListClustersParams) WithTimeout(timeout time.Duration) *ServerlessServiceListClustersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the serverless service list clusters params
func (o *ServerlessServiceListClustersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the serverless service list clusters params
func (o *ServerlessServiceListClustersParams) WithContext(ctx context.Context) *ServerlessServiceListClustersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the serverless service list clusters params
func (o *ServerlessServiceListClustersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the serverless service list clusters params
func (o *ServerlessServiceListClustersParams) WithHTTPClient(client *http.Client) *ServerlessServiceListClustersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the serverless service list clusters params
func (o *ServerlessServiceListClustersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilter adds the filter to the serverless service list clusters params
func (o *ServerlessServiceListClustersParams) WithFilter(filter *string) *ServerlessServiceListClustersParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the serverless service list clusters params
func (o *ServerlessServiceListClustersParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithOrderBy adds the orderBy to the serverless service list clusters params
func (o *ServerlessServiceListClustersParams) WithOrderBy(orderBy *string) *ServerlessServiceListClustersParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the serverless service list clusters params
func (o *ServerlessServiceListClustersParams) SetOrderBy(orderBy *string) {
	o.OrderBy = orderBy
}

// WithPageSize adds the pageSize to the serverless service list clusters params
func (o *ServerlessServiceListClustersParams) WithPageSize(pageSize *int32) *ServerlessServiceListClustersParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the serverless service list clusters params
func (o *ServerlessServiceListClustersParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WithPageToken adds the pageToken to the serverless service list clusters params
func (o *ServerlessServiceListClustersParams) WithPageToken(pageToken *string) *ServerlessServiceListClustersParams {
	o.SetPageToken(pageToken)
	return o
}

// SetPageToken adds the pageToken to the serverless service list clusters params
func (o *ServerlessServiceListClustersParams) SetPageToken(pageToken *string) {
	o.PageToken = pageToken
}

// WriteToRequest writes these params to a swagger request
func (o *ServerlessServiceListClustersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Filter != nil {

		// query param filter
		var qrFilter string

		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {

			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}
	}

	if o.OrderBy != nil {

		// query param orderBy
		var qrOrderBy string

		if o.OrderBy != nil {
			qrOrderBy = *o.OrderBy
		}
		qOrderBy := qrOrderBy
		if qOrderBy != "" {

			if err := r.SetQueryParam("orderBy", qOrderBy); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int32

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}
	}

	if o.PageToken != nil {

		// query param pageToken
		var qrPageToken string

		if o.PageToken != nil {
			qrPageToken = *o.PageToken
		}
		qPageToken := qrPageToken
		if qPageToken != "" {

			if err := r.SetQueryParam("pageToken", qPageToken); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
