// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OpenapiDPImportCreateReq openapi d p import create req
//
// swagger:model openapiDPImportCreateReq
type OpenapiDPImportCreateReq struct {

	// The arn of AWS IAM role.
	AwsRoleArn string `json:"aws_role_arn,omitempty"`

	// The ID of the cluster.
	// Example: 1
	// Required: true
	ClusterID *string `json:"cluster_id"`

	// The CSV configuration.
	CsvFormat *OpenapiCustomCSVFormat `json:"csv_format,omitempty"`

	// 1: sql statement(dumpling default format
	// 2: aurora snapshot(parquet)
	// 3: custom csv
	// 4: parquet format(not aurora)
	//
	// The format of data to import.
	// Required: true
	DataFormat *uint32 `json:"data_format"`

	// 1: aws s3
	// 2: GCS
	//
	// The cloud provider that keeps the data to import.
	// Required: true
	DataSourceType *uint32 `json:"data_source_type"`

	// The table filter.
	// Required: true
	Filter *string `json:"filter"`

	// object name pattern
	ObjectNamePattern string `json:"object_name_pattern,omitempty"`

	// The ID of the orgnization.
	// Example: 1
	// Required: true
	OrgID *string `json:"org_id"`

	// The ID of the project.
	// Example: 1
	// Required: true
	ProjectID *string `json:"project_id"`

	// The region of the s3 bucket that contains data to import.
	// Required: true
	Region *string `json:"region"`

	// import info
	//
	// The full s3 path that contains data to import.
	// Required: true
	SourceURL *string `json:"source_url"`

	// deprecated
	//
	// Deprectaed.
	// Required: true
	TargetPassword *string `json:"target_password"`

	// target table pattern
	TargetTablePattern string `json:"target_table_pattern,omitempty"`

	// deprecated
	//
	// Deprectaed.
	// Required: true
	TargetUsername *string `json:"target_username"`
}

// Validate validates this openapi d p import create req
func (m *OpenapiDPImportCreateReq) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCsvFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataSourceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrgID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetPassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenapiDPImportCreateReq) validateClusterID(formats strfmt.Registry) error {

	if err := validate.Required("cluster_id", "body", m.ClusterID); err != nil {
		return err
	}

	return nil
}

func (m *OpenapiDPImportCreateReq) validateCsvFormat(formats strfmt.Registry) error {
	if swag.IsZero(m.CsvFormat) { // not required
		return nil
	}

	if m.CsvFormat != nil {
		if err := m.CsvFormat.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("csv_format")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("csv_format")
			}
			return err
		}
	}

	return nil
}

func (m *OpenapiDPImportCreateReq) validateDataFormat(formats strfmt.Registry) error {

	if err := validate.Required("data_format", "body", m.DataFormat); err != nil {
		return err
	}

	return nil
}

func (m *OpenapiDPImportCreateReq) validateDataSourceType(formats strfmt.Registry) error {

	if err := validate.Required("data_source_type", "body", m.DataSourceType); err != nil {
		return err
	}

	return nil
}

func (m *OpenapiDPImportCreateReq) validateFilter(formats strfmt.Registry) error {

	if err := validate.Required("filter", "body", m.Filter); err != nil {
		return err
	}

	return nil
}

func (m *OpenapiDPImportCreateReq) validateOrgID(formats strfmt.Registry) error {

	if err := validate.Required("org_id", "body", m.OrgID); err != nil {
		return err
	}

	return nil
}

func (m *OpenapiDPImportCreateReq) validateProjectID(formats strfmt.Registry) error {

	if err := validate.Required("project_id", "body", m.ProjectID); err != nil {
		return err
	}

	return nil
}

func (m *OpenapiDPImportCreateReq) validateRegion(formats strfmt.Registry) error {

	if err := validate.Required("region", "body", m.Region); err != nil {
		return err
	}

	return nil
}

func (m *OpenapiDPImportCreateReq) validateSourceURL(formats strfmt.Registry) error {

	if err := validate.Required("source_url", "body", m.SourceURL); err != nil {
		return err
	}

	return nil
}

func (m *OpenapiDPImportCreateReq) validateTargetPassword(formats strfmt.Registry) error {

	if err := validate.Required("target_password", "body", m.TargetPassword); err != nil {
		return err
	}

	return nil
}

func (m *OpenapiDPImportCreateReq) validateTargetUsername(formats strfmt.Registry) error {

	if err := validate.Required("target_username", "body", m.TargetUsername); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this openapi d p import create req based on the context it is used
func (m *OpenapiDPImportCreateReq) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCsvFormat(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenapiDPImportCreateReq) contextValidateCsvFormat(ctx context.Context, formats strfmt.Registry) error {

	if m.CsvFormat != nil {
		if err := m.CsvFormat.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("csv_format")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("csv_format")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OpenapiDPImportCreateReq) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenapiDPImportCreateReq) UnmarshalBinary(b []byte) error {
	var res OpenapiDPImportCreateReq
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
