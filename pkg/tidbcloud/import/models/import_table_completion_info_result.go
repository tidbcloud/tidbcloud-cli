// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ImportTableCompletionInfoResult import table completion info result
//
// swagger:model ImportTableCompletionInfoResult
type ImportTableCompletionInfoResult string

func NewImportTableCompletionInfoResult(value ImportTableCompletionInfoResult) *ImportTableCompletionInfoResult {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ImportTableCompletionInfoResult.
func (m ImportTableCompletionInfoResult) Pointer() *ImportTableCompletionInfoResult {
	return &m
}

const (

	// ImportTableCompletionInfoResultSUCCESS captures enum value "SUCCESS"
	ImportTableCompletionInfoResultSUCCESS ImportTableCompletionInfoResult = "SUCCESS"

	// ImportTableCompletionInfoResultWARNING captures enum value "WARNING"
	ImportTableCompletionInfoResultWARNING ImportTableCompletionInfoResult = "WARNING"

	// ImportTableCompletionInfoResultERROR captures enum value "ERROR"
	ImportTableCompletionInfoResultERROR ImportTableCompletionInfoResult = "ERROR"
)

// for schema
var importTableCompletionInfoResultEnum []interface{}

func init() {
	var res []ImportTableCompletionInfoResult
	if err := json.Unmarshal([]byte(`["SUCCESS","WARNING","ERROR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		importTableCompletionInfoResultEnum = append(importTableCompletionInfoResultEnum, v)
	}
}

func (m ImportTableCompletionInfoResult) validateImportTableCompletionInfoResultEnum(path, location string, value ImportTableCompletionInfoResult) error {
	if err := validate.EnumCase(path, location, value, importTableCompletionInfoResultEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this import table completion info result
func (m ImportTableCompletionInfoResult) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateImportTableCompletionInfoResultEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this import table completion info result based on context it is used
func (m ImportTableCompletionInfoResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
