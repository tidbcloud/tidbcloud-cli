// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DataflowImportGetRespStatus dataflow import get resp status
//
// swagger:model dataflowImportGetRespStatus
type DataflowImportGetRespStatus string

func NewDataflowImportGetRespStatus(value DataflowImportGetRespStatus) *DataflowImportGetRespStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated DataflowImportGetRespStatus.
func (m DataflowImportGetRespStatus) Pointer() *DataflowImportGetRespStatus {
	return &m
}

const (

	// DataflowImportGetRespStatusUNKNOWN captures enum value "UNKNOWN"
	DataflowImportGetRespStatusUNKNOWN DataflowImportGetRespStatus = "UNKNOWN"

	// DataflowImportGetRespStatusPREPARING captures enum value "PREPARING"
	DataflowImportGetRespStatusPREPARING DataflowImportGetRespStatus = "PREPARING"

	// DataflowImportGetRespStatusIMPORTING captures enum value "IMPORTING"
	DataflowImportGetRespStatusIMPORTING DataflowImportGetRespStatus = "IMPORTING"

	// DataflowImportGetRespStatusCOMPLETED captures enum value "COMPLETED"
	DataflowImportGetRespStatusCOMPLETED DataflowImportGetRespStatus = "COMPLETED"

	// DataflowImportGetRespStatusFAILED captures enum value "FAILED"
	DataflowImportGetRespStatusFAILED DataflowImportGetRespStatus = "FAILED"

	// DataflowImportGetRespStatusCANCELING captures enum value "CANCELING"
	DataflowImportGetRespStatusCANCELING DataflowImportGetRespStatus = "CANCELING"

	// DataflowImportGetRespStatusCANCELED captures enum value "CANCELED"
	DataflowImportGetRespStatusCANCELED DataflowImportGetRespStatus = "CANCELED"
)

// for schema
var dataflowImportGetRespStatusEnum []interface{}

func init() {
	var res []DataflowImportGetRespStatus
	if err := json.Unmarshal([]byte(`["UNKNOWN","PREPARING","IMPORTING","COMPLETED","FAILED","CANCELING","CANCELED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataflowImportGetRespStatusEnum = append(dataflowImportGetRespStatusEnum, v)
	}
}

func (m DataflowImportGetRespStatus) validateDataflowImportGetRespStatusEnum(path, location string, value DataflowImportGetRespStatus) error {
	if err := validate.EnumCase(path, location, value, dataflowImportGetRespStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this dataflow import get resp status
func (m DataflowImportGetRespStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDataflowImportGetRespStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this dataflow import get resp status based on context it is used
func (m DataflowImportGetRespStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
