// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OpenapiCreateImportReq openapi create import req
//
// swagger:model openapiCreateImportReq
type OpenapiCreateImportReq struct {

	// used for importing from S3
	//
	// The arn of AWS IAM role.
	AwsRoleArn string `json:"aws_role_arn,omitempty"`

	// The ID of the cluster.
	// Example: 1
	// Required: true
	ClusterID *string `json:"cluster_id"`

	// The CSV configuration.
	CsvFormat *OpenapiCustomCSVFormat `json:"csv_format,omitempty"`

	// The format of data to import.
	// Required: true
	DataFormat *OpenapiDataFormat `json:"data_format"`

	// used for importing from local file
	//
	// The file name returned by generating upload url.
	FileName string `json:"file_name,omitempty"`

	// The ID of the project.
	// Example: 1
	// Required: true
	ProjectID *string `json:"project_id"`

	// used for importing from S3
	//
	// The full s3 path that contains data to import.
	SourceURL string `json:"source_url,omitempty"`

	// The target db and table to import data.
	TargetTable *OpenapiTable `json:"target_table,omitempty"`

	// The type of data source.
	// Required: true
	Type *CreateImportReqImportType `json:"type"`
}

// Validate validates this openapi create import req
func (m *OpenapiCreateImportReq) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCsvFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetTable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenapiCreateImportReq) validateClusterID(formats strfmt.Registry) error {

	if err := validate.Required("cluster_id", "body", m.ClusterID); err != nil {
		return err
	}

	return nil
}

func (m *OpenapiCreateImportReq) validateCsvFormat(formats strfmt.Registry) error {
	if swag.IsZero(m.CsvFormat) { // not required
		return nil
	}

	if m.CsvFormat != nil {
		if err := m.CsvFormat.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("csv_format")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("csv_format")
			}
			return err
		}
	}

	return nil
}

func (m *OpenapiCreateImportReq) validateDataFormat(formats strfmt.Registry) error {

	if err := validate.Required("data_format", "body", m.DataFormat); err != nil {
		return err
	}

	if err := validate.Required("data_format", "body", m.DataFormat); err != nil {
		return err
	}

	if m.DataFormat != nil {
		if err := m.DataFormat.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data_format")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data_format")
			}
			return err
		}
	}

	return nil
}

func (m *OpenapiCreateImportReq) validateProjectID(formats strfmt.Registry) error {

	if err := validate.Required("project_id", "body", m.ProjectID); err != nil {
		return err
	}

	return nil
}

func (m *OpenapiCreateImportReq) validateTargetTable(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetTable) { // not required
		return nil
	}

	if m.TargetTable != nil {
		if err := m.TargetTable.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("target_table")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("target_table")
			}
			return err
		}
	}

	return nil
}

func (m *OpenapiCreateImportReq) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this openapi create import req based on the context it is used
func (m *OpenapiCreateImportReq) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCsvFormat(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDataFormat(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetTable(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OpenapiCreateImportReq) contextValidateCsvFormat(ctx context.Context, formats strfmt.Registry) error {

	if m.CsvFormat != nil {
		if err := m.CsvFormat.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("csv_format")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("csv_format")
			}
			return err
		}
	}

	return nil
}

func (m *OpenapiCreateImportReq) contextValidateDataFormat(ctx context.Context, formats strfmt.Registry) error {

	if m.DataFormat != nil {
		if err := m.DataFormat.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data_format")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("data_format")
			}
			return err
		}
	}

	return nil
}

func (m *OpenapiCreateImportReq) contextValidateTargetTable(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetTable != nil {
		if err := m.TargetTable.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("target_table")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("target_table")
			}
			return err
		}
	}

	return nil
}

func (m *OpenapiCreateImportReq) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OpenapiCreateImportReq) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OpenapiCreateImportReq) UnmarshalBinary(b []byte) error {
	var res OpenapiCreateImportReq
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
