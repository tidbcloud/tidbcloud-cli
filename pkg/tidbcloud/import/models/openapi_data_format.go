// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// OpenapiDataFormat openapi data format
//
// swagger:model openapiDataFormat
type OpenapiDataFormat string

func NewOpenapiDataFormat(value OpenapiDataFormat) *OpenapiDataFormat {
	return &value
}

// Pointer returns a pointer to a freshly-allocated OpenapiDataFormat.
func (m OpenapiDataFormat) Pointer() *OpenapiDataFormat {
	return &m
}

const (

	// OpenapiDataFormatSQLFile captures enum value "SqlFile"
	OpenapiDataFormatSQLFile OpenapiDataFormat = "SqlFile"

	// OpenapiDataFormatAuroraSnapshot captures enum value "AuroraSnapshot"
	OpenapiDataFormatAuroraSnapshot OpenapiDataFormat = "AuroraSnapshot"

	// OpenapiDataFormatCSV captures enum value "CSV"
	OpenapiDataFormatCSV OpenapiDataFormat = "CSV"

	// OpenapiDataFormatParquet captures enum value "Parquet"
	OpenapiDataFormatParquet OpenapiDataFormat = "Parquet"
)

// for schema
var openapiDataFormatEnum []interface{}

func init() {
	var res []OpenapiDataFormat
	if err := json.Unmarshal([]byte(`["SqlFile","AuroraSnapshot","CSV","Parquet"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		openapiDataFormatEnum = append(openapiDataFormatEnum, v)
	}
}

func (m OpenapiDataFormat) validateOpenapiDataFormatEnum(path, location string, value OpenapiDataFormat) error {
	if err := validate.EnumCase(path, location, value, openapiDataFormatEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this openapi data format
func (m OpenapiDataFormat) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOpenapiDataFormatEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this openapi data format based on context it is used
func (m OpenapiDataFormat) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
