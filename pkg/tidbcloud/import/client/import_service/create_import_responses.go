// Code generated by go-swagger; DO NOT EDIT.

package import_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"tidbcloud-cli/pkg/tidbcloud/import/models"
)

// CreateImportReader is a Reader for the CreateImport structure.
type CreateImportReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateImportReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateImportOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewCreateImportDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateImportOK creates a CreateImportOK with default headers values
func NewCreateImportOK() *CreateImportOK {
	return &CreateImportOK{}
}

/*
CreateImportOK describes a response with status code 200, with default header values.

A successful response.
*/
type CreateImportOK struct {
	Payload *models.OpenapiCreateImportResp
}

// IsSuccess returns true when this create import o k response has a 2xx status code
func (o *CreateImportOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create import o k response has a 3xx status code
func (o *CreateImportOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create import o k response has a 4xx status code
func (o *CreateImportOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create import o k response has a 5xx status code
func (o *CreateImportOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create import o k response a status code equal to that given
func (o *CreateImportOK) IsCode(code int) bool {
	return code == 200
}

func (o *CreateImportOK) Error() string {
	return fmt.Sprintf("[POST /api/internal/projects/{project_id}/clusters/{cluster_id}/imports][%d] createImportOK  %+v", 200, o.Payload)
}

func (o *CreateImportOK) String() string {
	return fmt.Sprintf("[POST /api/internal/projects/{project_id}/clusters/{cluster_id}/imports][%d] createImportOK  %+v", 200, o.Payload)
}

func (o *CreateImportOK) GetPayload() *models.OpenapiCreateImportResp {
	return o.Payload
}

func (o *CreateImportOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OpenapiCreateImportResp)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateImportDefault creates a CreateImportDefault with default headers values
func NewCreateImportDefault(code int) *CreateImportDefault {
	return &CreateImportDefault{
		_statusCode: code,
	}
}

/*
CreateImportDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type CreateImportDefault struct {
	_statusCode int

	Payload *models.GooglerpcStatus
}

// Code gets the status code for the create import default response
func (o *CreateImportDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this create import default response has a 2xx status code
func (o *CreateImportDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this create import default response has a 3xx status code
func (o *CreateImportDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this create import default response has a 4xx status code
func (o *CreateImportDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this create import default response has a 5xx status code
func (o *CreateImportDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this create import default response a status code equal to that given
func (o *CreateImportDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *CreateImportDefault) Error() string {
	return fmt.Sprintf("[POST /api/internal/projects/{project_id}/clusters/{cluster_id}/imports][%d] CreateImport default  %+v", o._statusCode, o.Payload)
}

func (o *CreateImportDefault) String() string {
	return fmt.Sprintf("[POST /api/internal/projects/{project_id}/clusters/{cluster_id}/imports][%d] CreateImport default  %+v", o._statusCode, o.Payload)
}

func (o *CreateImportDefault) GetPayload() *models.GooglerpcStatus {
	return o.Payload
}

func (o *CreateImportDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GooglerpcStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
CreateImportBody create import body
swagger:model CreateImportBody
*/
type CreateImportBody struct {

	// The arn of AWS IAM role.
	// Required: true
	AwsRoleArn *string `json:"aws_role_arn"`

	// The CSV configuration.
	CsvFormat *models.OpenapiCustomCSVFormat `json:"csv_format,omitempty"`

	// The format of data to import.
	// Required: true
	DataFormat *models.OpenapiDataFormat `json:"data_format"`

	// The full s3 path that contains data to import.
	// Required: true
	SourceURL *string `json:"source_url"`
}

// Validate validates this create import body
func (o *CreateImportBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAwsRoleArn(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCsvFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDataFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSourceURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateImportBody) validateAwsRoleArn(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"aws_role_arn", "body", o.AwsRoleArn); err != nil {
		return err
	}

	return nil
}

func (o *CreateImportBody) validateCsvFormat(formats strfmt.Registry) error {
	if swag.IsZero(o.CsvFormat) { // not required
		return nil
	}

	if o.CsvFormat != nil {
		if err := o.CsvFormat.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "csv_format")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "csv_format")
			}
			return err
		}
	}

	return nil
}

func (o *CreateImportBody) validateDataFormat(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"data_format", "body", o.DataFormat); err != nil {
		return err
	}

	if err := validate.Required("body"+"."+"data_format", "body", o.DataFormat); err != nil {
		return err
	}

	if o.DataFormat != nil {
		if err := o.DataFormat.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "data_format")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "data_format")
			}
			return err
		}
	}

	return nil
}

func (o *CreateImportBody) validateSourceURL(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"source_url", "body", o.SourceURL); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create import body based on the context it is used
func (o *CreateImportBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCsvFormat(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateDataFormat(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateImportBody) contextValidateCsvFormat(ctx context.Context, formats strfmt.Registry) error {

	if o.CsvFormat != nil {
		if err := o.CsvFormat.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "csv_format")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "csv_format")
			}
			return err
		}
	}

	return nil
}

func (o *CreateImportBody) contextValidateDataFormat(ctx context.Context, formats strfmt.Registry) error {

	if o.DataFormat != nil {
		if err := o.DataFormat.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "data_format")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "data_format")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateImportBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateImportBody) UnmarshalBinary(b []byte) error {
	var res CreateImportBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
