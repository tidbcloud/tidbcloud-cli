// Code generated by go-swagger; DO NOT EDIT.

package import_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new import service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for import service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CancelImport(params *CancelImportParams, opts ...ClientOption) (*CancelImportOK, error)

	CreateImport(params *CreateImportParams, opts ...ClientOption) (*CreateImportOK, error)

	GenerateUploadURL(params *GenerateUploadURLParams, opts ...ClientOption) (*GenerateUploadURLOK, error)

	GetImport(params *GetImportParams, opts ...ClientOption) (*GetImportOK, error)

	ListImports(params *ListImportsParams, opts ...ClientOption) (*ListImportsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CancelImport cancels an import job
*/
func (a *Client) CancelImport(params *CancelImportParams, opts ...ClientOption) (*CancelImportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelImportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CancelImport",
		Method:             "DELETE",
		PathPattern:        "/api/internal/projects/{project_id}/clusters/{cluster_id}/imports/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CancelImportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CancelImportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CancelImportDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateImport creates an import job
*/
func (a *Client) CreateImport(params *CreateImportParams, opts ...ClientOption) (*CreateImportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateImportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateImport",
		Method:             "POST",
		PathPattern:        "/api/internal/projects/{project_id}/clusters/{cluster_id}/imports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateImportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateImportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateImportDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GenerateUploadURL generates s3 url to upload file
*/
func (a *Client) GenerateUploadURL(params *GenerateUploadURLParams, opts ...ClientOption) (*GenerateUploadURLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGenerateUploadURLParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GenerateUploadURL",
		Method:             "POST",
		PathPattern:        "/api/internal/projects/{project_id}/clusters/{cluster_id}/upload_url",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GenerateUploadURLReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GenerateUploadURLOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GenerateUploadURLDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetImport gets an import job
*/
func (a *Client) GetImport(params *GetImportParams, opts ...ClientOption) (*GetImportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetImport",
		Method:             "GET",
		PathPattern:        "/api/internal/projects/{project_id}/clusters/{cluster_id}/imports/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetImportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetImportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetImportDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListImports lists all import jobs in the cluster
*/
func (a *Client) ListImports(params *ListImportsParams, opts ...ClientOption) (*ListImportsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListImportsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListImports",
		Method:             "GET",
		PathPattern:        "/api/internal/projects/{project_id}/clusters/{cluster_id}/imports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListImportsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListImportsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListImportsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
